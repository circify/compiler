<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2017 ARM Limited or its affiliates. All rights reserved. -->
<!-- This document is Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by ARM and the party that ARM delivered this document to. -->

<instructionsection id="FMOV_float_imm" title="FMOV (scalar, immediate) -- A64" type="instruction">
  <docvars>
    <docvar key="immediate-type" value="imm8f" />
    <docvar key="instr-class" value="float" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="FMOV" />
  </docvars>
  <heading>FMOV (scalar, immediate)</heading>
  <desc>
    <brief>
      <para>Floating-point move immediate (scalar)</para>
    </brief>
    <authored>
      <para>Floating-point move immediate (scalar). This instruction copies a floating-point immediate constant into the SIMD&amp;FP destination register.</para>
      <para>Depending on the settings in the <xref linkend="AArch64.cpacr_el1">CPACR_EL1</xref>, <xref linkend="AArch64.cptr_el2">CPTR_EL2</xref>, and <xref linkend="AArch64.cptr_el3">CPTR_EL3</xref> registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Floating point constant in 8 bits" oneof="1" id="imm8f" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="immediate-type" value="imm8f" />
        <docvar key="instr-class" value="float" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FMOV" />
      </docvars>
      <iclassintro count="3"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/float/move/fp/imm/FMOV_D_floatimm">
        <box hibit="31" name="M" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" settings="1">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="type" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="8" name="imm8" usename="1">
          <c colspan="8"></c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="imm5" settings="5">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="FMOV_H_floatimm" oneofinclass="3" oneof="3" label="Half-precision" bitdiffs="type == 11">
        <docvars>
          <docvar key="datatype" value="half" />
          <docvar key="immediate-type" value="imm8f" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMOV" />
        </docvars>
        <arch_variants>
          <arch_variant name="ARMv8.2" />
        </arch_variants>
        <box hibit="23" width="2" name="type">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a link="hd" hover="16-bit SIMD&amp;FP destination register (field &quot;Rd&quot;)">&lt;Hd&gt;</a><text>, #</text><a link="imm" hover="Signed floating-point constant with 3-bit exponent and normalized 4 bits of precision (field &quot;imm8&quot;)">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_S_floatimm" oneofinclass="3" oneof="3" label="Single-precision" bitdiffs="type == 00">
        <docvars>
          <docvar key="datatype" value="single" />
          <docvar key="immediate-type" value="imm8f" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMOV" />
        </docvars>
        <box hibit="23" width="2" name="type">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a link="sd" hover="32-bit SIMD&amp;FP destination register (field &quot;Rd&quot;)">&lt;Sd&gt;</a><text>, #</text><a link="imm" hover="Signed floating-point constant with 3-bit exponent and normalized 4 bits of precision (field &quot;imm8&quot;)">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_D_floatimm" oneofinclass="3" oneof="3" label="Double-precision" bitdiffs="type == 01">
        <docvars>
          <docvar key="datatype" value="double" />
          <docvar key="immediate-type" value="imm8f" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMOV" />
        </docvars>
        <box hibit="23" width="2" name="type">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a link="dd" hover="64-bit SIMD&amp;FP destination register (field &quot;Rd&quot;)">&lt;Dd&gt;</a><text>, #</text><a link="imm" hover="Signed floating-point constant with 3-bit exponent and normalized 4 bits of precision (field &quot;imm8&quot;)">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/float/move/fp/imm/FMOV_D_floatimm" mylink="aarch64.instrs.float.move.fp.imm.FMOV_D_floatimm" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);

integer datasize;
case type of
    when '00' datasize = 32;
    when '01' datasize = 64;
    when '10' <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();
    when '11'
        if HaveFP16Ext() then
            datasize = 16;
        else
            <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();

bits(datasize) imm = <a link="impl-shared.VFPExpandImm.1" file="shared_pseudocode.xml" hover="function: bits(N) VFPExpandImm(bits(8) imm8)">VFPExpandImm</a>(imm8);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="FMOV_D_floatimm" symboldefcount="1">
      <symbol link="dd">&lt;Dd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_H_floatimm" symboldefcount="1">
      <symbol link="hd">&lt;Hd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_S_floatimm" symboldefcount="1">
      <symbol link="sd">&lt;Sd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_D_floatimm, FMOV_H_floatimm, FMOV_S_floatimm" symboldefcount="1">
      <symbol link="imm">&lt;imm&gt;</symbol>
      <account encodedin="imm8">
        <intro>
          <para>Is a signed floating-point constant with 3-bit exponent and normalized 4 bits of precision, encoded in the "imm8" field. For details of the range of constants available and the encoding of <syntax>&lt;imm&gt;</syntax>, see <xref linkend="CJAFAFAI">Modified immediate constants in A64 floating-point instructions</xref>.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/float/move/fp/imm/FMOV_D_floatimm" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPAdvSIMDEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPAdvSIMDEnabled64()">CheckFPAdvSIMDEnabled64</a>();

<a link="impl-aarch64.V.write.1" file="shared_pseudocode.xml" hover="accessor: V[integer n] = bits(width) value">V</a>[d] = imm;</pstext>
    </ps>
  </ps_section>
</instructionsection>
