<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2017 ARM Limited or its affiliates. All rights reserved. -->
<!-- This document is Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by ARM and the party that ARM delivered this document to. -->

<instructionsection id="MADD" title="MADD -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="MADD" />
  </docvars>
  <heading>MADD</heading>
  <desc>
    <brief>
      <para>Multiply-Add</para>
    </brief>
    <authored>
      <para>Multiply-Add multiplies two register values, adds a third register value, and writes the result to the destination register.</para>
    </authored>
  </desc>
  <alias_list howmany="1">
    <alias_list_intro>This instruction is used by the alias </alias_list_intro>
    <aliasref aliaspageid="MUL_MADD" aliasfile="mul_madd.xml" hover="Multiply" punct=".">
      <text>MUL</text>
      <aliaspref>Ra == '11111'</aliaspref>
    </aliasref>
    <alias_list_outro>
      <text>  See </text>
      <aliastablelink />
      <text> below for details of when the alias is preferred.</text>
    </alias_list_outro>
  </alias_list>
  <classes>
    <iclass name="Integer" oneof="1" id="general" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="MADD" />
      </docvars>
      <iclassintro count="2"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/integer/arithmetic/mul/uniform/add-sub/MADD_32A_dp_3src" tworows="1">
        <box hibit="31" name="sf" usename="1">
          <c></c>
        </box>
        <box hibit="30" width="2" name="op54" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="23" width="3" name="op31" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" name="o0" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="14" width="5" name="Ra" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="MADD_32A_dp_3src" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0">
        <docvars>
          <docvar key="datatype" value="32" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="MADD" />
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <asmtemplate><text>MADD  </text><a link="wd" hover="32-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Wd&gt;</a><text>, </text><a link="wn" hover="First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)">&lt;Wn&gt;</a><text>, </text><a link="wm" hover="Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)">&lt;Wm&gt;</a><text>, </text><a link="wa" hover="Third 32-bit general-purpose source register holding addend (field &quot;Ra&quot;)">&lt;Wa&gt;</a></asmtemplate>
      </encoding>
      <encoding name="MADD_64A_dp_3src" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1">
        <docvars>
          <docvar key="datatype" value="64" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="MADD" />
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <asmtemplate><text>MADD  </text><a link="xd" hover="64-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>, </text><a link="xn" hover="First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)">&lt;Xn&gt;</a><text>, </text><a link="xm" hover="Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>, </text><a link="xa" hover="Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)">&lt;Xa&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/integer/arithmetic/mul/uniform/add-sub/MADD_32A_dp_3src" mylink="aarch64.instrs.integer.arithmetic.mul.uniform.add-sub.MADD_32A_dp_3src" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
integer a = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Ra);
integer destsize = if sf == '1' then 64 else 32;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="MADD_32A_dp_3src" symboldefcount="1">
      <symbol link="wd">&lt;Wd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_32A_dp_3src" symboldefcount="1">
      <symbol link="wn">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first general-purpose source register holding the multiplicand, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_32A_dp_3src" symboldefcount="1">
      <symbol link="wm">&lt;Wm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 32-bit name of the second general-purpose source register holding the multiplier, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_32A_dp_3src" symboldefcount="1">
      <symbol link="wa">&lt;Wa&gt;</symbol>
      <account encodedin="Ra">
        <intro>
          <para>Is the 32-bit name of the third general-purpose source register holding the addend, encoded in the "Ra" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_64A_dp_3src" symboldefcount="1">
      <symbol link="xd">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_64A_dp_3src" symboldefcount="1">
      <symbol link="xn">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first general-purpose source register holding the multiplicand, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_64A_dp_3src" symboldefcount="1">
      <symbol link="xm">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second general-purpose source register holding the multiplier, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MADD_64A_dp_3src" symboldefcount="1">
      <symbol link="xa">&lt;Xa&gt;</symbol>
      <account encodedin="Ra">
        <intro>
          <para>Is the 64-bit name of the third general-purpose source register holding the addend, encoded in the "Ra" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <aliastablehook anchor="aliasconditions">Alias Conditions</aliastablehook>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/integer/arithmetic/mul/uniform/add-sub/MADD_32A_dp_3src" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(destsize) operand1 = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];
bits(destsize) operand2 = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[m];
bits(destsize) operand3 = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[a];

integer result;

result = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(operand3) + (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(operand1) * <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(operand2));

<a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[d] = result&lt;destsize-1:0&gt;;</pstext>
    </ps>
  </ps_section>
</instructionsection>
