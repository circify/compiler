<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2017 ARM Limited or its affiliates. All rights reserved. -->
<!-- This document is Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by ARM and the party that ARM delivered this document to. -->

<instructionsection id="LDRB_reg" title="LDRB (register) -- A64" type="instruction">
  <docvars>
    <docvar key="datatype" value="32" />
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="LDRB" />
    <docvar key="offset-type" value="off-reg" />
  </docvars>
  <heading>LDRB (register)</heading>
  <desc>
    <brief>
      <para>Load Register Byte (register)</para>
    </brief>
    <authored>
      <para>Load Register Byte (register) calculates an address from a base register value and an offset register value, loads a byte from memory, zero-extends it, and writes it to a register. For information about memory accesses, see <xref linkend="CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="32-bit" oneof="1" id="32" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="datatype" value="32" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="LDRB" />
        <docvar key="offset-type" value="off-reg" />
      </docvars>
      <iclassintro count="2"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/memory/single/general/register/LDRB_32B_ldst_regoff" tworows="1">
        <box hibit="31" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="3" name="option" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="12" name="S" usename="1">
          <c></c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="LDRB_32B_ldst_regoff" oneofinclass="2" oneof="2" label="Extended register" bitdiffs="option != 011">
        <docvars>
          <docvar key="datatype" value="32" />
          <docvar key="datatype-reguse" value="32-ext-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="ext-reg" />
        </docvars>
        <box hibit="15" width="3" name="option">
          <c>Z</c>
          <c>N</c>
          <c>N</c>
        </box>
        <asmtemplate><text>LDRB  </text><a link="wt" hover="32-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Wt&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, (</text><a link="wm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)">&lt;Wm&gt;</a><text>|</text><a link="xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>), </text><a link="extend" hover="Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]">&lt;extend&gt;</a><text> </text><text>{</text><a link="amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDRB_32BL_ldst_regoff" oneofinclass="2" oneof="2" label="Shifted register" bitdiffs="option == 011">
        <docvars>
          <docvar key="datatype" value="32" />
          <docvar key="datatype-reguse" value="32-shifted-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="shifted-reg" />
        </docvars>
        <box hibit="15" width="3" name="option">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>LDRB  </text><a link="wt" hover="32-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Wt&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link="amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/single/general/register/LDRB_32B_ldst_regoff" mylink="aarch64.instrs.memory.single.general.register.LDRB_32B_ldst_regoff" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if option&lt;1&gt; == '0' then <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();    // sub-word index
<a link="ExtendType" file="shared_pseudocode.xml" hover="enumeration ExtendType  {ExtendType_SXTB, ExtendType_SXTH, ExtendType_SXTW, ExtendType_SXTX,&#13; ExtendType_UXTB, ExtendType_UXTH, ExtendType_UXTW, ExtendType_UXTX}">ExtendType</a> extend_type = <a link="impl-aarch64.DecodeRegExtend.1" file="shared_pseudocode.xml" hover="function: ExtendType DecodeRegExtend(bits(3) op)">DecodeRegExtend</a>(option);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="LDRB_32B_ldst_regoff, LDRB_32BL_ldst_regoff" symboldefcount="1">
      <symbol link="wt">&lt;Wt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 32-bit name of the general-purpose register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRB_32B_ldst_regoff, LDRB_32BL_ldst_regoff" symboldefcount="1">
      <symbol link="xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRB_32B_ldst_regoff" symboldefcount="1">
      <symbol link="wm">&lt;Wm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>When <field>option&lt;0&gt;</field> is set to <binarynumber>0</binarynumber>, is the 32-bit name of the general-purpose index register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRB_32B_ldst_regoff, LDRB_32BL_ldst_regoff" symboldefcount="1">
      <symbol link="xm">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>When <field>option&lt;0&gt;</field> is set to <binarynumber>1</binarynumber>, is the 64-bit name of the general-purpose index register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRB_32B_ldst_regoff" symboldefcount="1">
      <symbol link="extend">&lt;extend&gt;</symbol>
      <definition encodedin="option">
        <intro>Is the index extend specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">option</entry>
                <entry class="symbol">&lt;extend&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">010</entry>
                <entry class="symbol">UXTW</entry>
              </row>
              <row>
                <entry class="bitfield">110</entry>
                <entry class="symbol">SXTW</entry>
              </row>
              <row>
                <entry class="bitfield">111</entry>
                <entry class="symbol">SXTX</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="LDRB_32B_ldst_regoff, LDRB_32BL_ldst_regoff" symboldefcount="1">
      <symbol link="amount">&lt;amount&gt;</symbol>
      <account encodedin="S">
        <intro>
          <para>Is the index shift amount, it must be <value>#0</value>, encoded in "S" as <binarynumber>0</binarynumber> if omitted, or as <binarynumber>1</binarynumber> if present.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/register/LDRB_32B_ldst_regoff" mylink="commonps" enclabels="" sections="1" secttype="Shared Decode">
      <pstext mayhavelinks="1" section="Postdecode" rep_section="postdecode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);</pstext>
    </ps>
  </ps_section>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/register/LDRB_32B_ldst_regoff" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) offset = <a link="impl-aarch64.ExtendReg.3" file="shared_pseudocode.xml" hover="function: bits(N) ExtendReg(integer reg, ExtendType type, integer shift)">ExtendReg</a>(m, extend_type, 0);
bits(64) address;
bits(8) data;

if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

address = address + offset;

data = <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccType acctype]">Mem</a>[address, 1, <a link="AccType_NORMAL" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_NORMAL</a>];
<a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[t] = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(data, 32);</pstext>
    </ps>
  </ps_section>
</instructionsection>
