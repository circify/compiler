<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2017 ARM Limited or its affiliates. All rights reserved. -->
<!-- This document is Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by ARM and the party that ARM delivered this document to. -->

<instructionsection id="STTR" title="STTR -- A64" type="instruction">
  <docvars>
    <docvar key="address-form" value="base-plus-offset" />
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="STTR" />
    <docvar key="offset-type" value="off9s_u" />
  </docvars>
  <heading>STTR</heading>
  <desc>
    <brief>
      <para>Store Register (unprivileged)</para>
    </brief>
    <authored>
      <para>Store Register (unprivileged) stores a word or doubleword from a register to memory. The address that is used for the store is calculated from a base register and an immediate offset.</para>
      <para>The memory is restricted as if execution is at EL0 when:</para>
      <list type="unordered">
        <listitem><content>Executing at EL1.</content></listitem>
        <listitem><content>Executing at EL2, in ARMv8.1, with HCR_EL2.{E2H, TGE} set to {1, 1}.</content></listitem>
      </list>
      <para>Otherwise, the access permission is for the Exception level at which the instruction is executed. For information about memory accesses, see <xref linkend="CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Unscaled offset" oneof="1" id="base_plus_offset" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="address-form" value="base-plus-offset" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="STTR" />
        <docvar key="offset-type" value="off9s_u" />
      </docvars>
      <iclassintro count="2"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/memory/single/general/immediate/signed/offset/unpriv/STTR_32_ldst_unpriv" tworows="1">
        <box hibit="31" width="2" name="size" usename="1" settings="1" psbits="xx">
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="9" name="imm9" usename="1">
          <c colspan="9"></c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="STTR_32_ldst_unpriv" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="size == 10">
        <docvars>
          <docvar key="address-form" value="base-plus-offset" />
          <docvar key="datatype" value="32" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STTR" />
          <docvar key="offset-type" value="off9s_u" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>STTR  </text><a link="wt" hover="32-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Wt&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link="simm" hover="Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <encoding name="STTR_64_ldst_unpriv" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="size == 11">
        <docvars>
          <docvar key="address-form" value="base-plus-offset" />
          <docvar key="datatype" value="64" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STTR" />
          <docvar key="offset-type" value="off9s_u" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>1</c>
        </box>
        <asmtemplate><text>STTR  </text><a link="xt" hover="64-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Xt&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link="simm" hover="Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/single/general/immediate/signed/offset/unpriv/STTR_32_ldst_unpriv" mylink="aarch64.instrs.memory.single.general.immediate.signed.offset.unpriv.STTR_32_ldst_unpriv" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer scale = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
bits(64) offset = <a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(imm9, 64);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="STTR_32_ldst_unpriv" symboldefcount="1">
      <symbol link="wt">&lt;Wt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 32-bit name of the general-purpose register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTR_64_ldst_unpriv" symboldefcount="1">
      <symbol link="xt">&lt;Xt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 64-bit name of the general-purpose register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTR_32_ldst_unpriv, STTR_64_ldst_unpriv" symboldefcount="1">
      <symbol link="xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTR_32_ldst_unpriv, STTR_64_ldst_unpriv" symboldefcount="1">
      <symbol link="simm">&lt;simm&gt;</symbol>
      <account encodedin="imm9">
        <intro>
          <para>Is the optional signed immediate byte offset, in the range -256 to 255, defaulting to 0 and encoded in the "imm9" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/immediate/signed/offset/unpriv/STTR_32_ldst_unpriv" mylink="commonps" enclabels="" sections="1" secttype="Shared Decode">
      <pstext mayhavelinks="1" section="Postdecode" rep_section="postdecode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);

integer datasize = 8 &lt;&lt; scale;</pstext>
    </ps>
  </ps_section>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/immediate/signed/offset/unpriv/STTR_32_ldst_unpriv" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) address;
bits(datasize) data;

if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

address = address + offset;

data = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[t];
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccType acctype] = bits(size*8) value">Mem</a>[address, datasize DIV 8, <a link="AccType_UNPRIV" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_UNPRIV</a>] = data;</pstext>
    </ps>
  </ps_section>
</instructionsection>
