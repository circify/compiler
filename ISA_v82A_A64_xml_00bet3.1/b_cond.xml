
<instructionsection id="B_cond" title="B.cond -- A64" type="instruction">
  <docvars>
    <docvar key="branch-offset" value="br19" />
    <docvar key="compare-with" value="cmp-cond" />
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="B" />
  </docvars>
  <heading>B.cond</heading>
  <desc>
    <brief>
      <para>Branch conditionally</para>
    </brief>
    <authored>
      <para>Branch conditionally to a label at a PC-relative offset, with a hint that this is not a subroutine call or return.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="19-bit signed PC-relative branch offset" oneof="1" id="B_only_condbranch" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="branch-offset" value="br19" />
        <docvar key="compare-with" value="cmp-cond" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="B" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/branch/conditional/cond">
        <box hibit="31" width="7" settings="7">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" name="o1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="19" name="imm19" usename="1">
          <c colspan="19"></c>
        </box>
        <box hibit="4" name="o0" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="cond" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="B_only_condbranch" oneofinclass="1" oneof="1" label="19-bit signed PC-relative branch offset">
        <docvars>
          <docvar key="branch-offset" value="br19" />
          <docvar key="compare-with" value="cmp-cond" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="B" />
        </docvars>
        <asmtemplate><text>B.</text><a link="cond" hover="Standard condition (field &quot;cond&quot;)">&lt;cond&gt;</a><text>  </text><a link="label" hover="Label to be conditionally branched to (field imm19)">&lt;label&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/branch/conditional/cond" mylink="aarch64.instrs.branch.conditional.cond" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">bits(64) offset = <a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(imm19:'00', 64);
bits(4) condition = cond;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="B_only_condbranch" symboldefcount="1">
      <symbol link="cond">&lt;cond&gt;</symbol>
      <account encodedin="cond">
        <intro>
          <para>Is one of the standard conditions, encoded in the "cond" field in the standard way.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="B_only_condbranch" symboldefcount="1">
      <symbol link="label">&lt;label&gt;</symbol>
      <account encodedin="imm19">
        <intro>
          <para>Is the program label to be conditionally branched to. Its offset from the address of this instruction, in the range +/-1MB, is encoded as "imm19" times 4.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/branch/conditional/cond" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    <a link="impl-shared.BranchTo.2" file="shared_pseudocode.xml" hover="function: BranchTo(bits(N) target, BranchType branch_type)">BranchTo</a>(<a link="impl-aarch64.PC.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) PC[]">PC</a>[] + offset, <a link="BranchType_JMP" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_JMP</a>);</pstext>
    </ps>
  </ps_section>
</instructionsection>
xml" hover="function: BranchTo(bits(N) target, BranchType branch_type)">BranchTo</a>(<a link="impl-aarch64.PC.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) PC[]">PC</a>[] + offset, <a link="BranchType_JMP" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_JMP</a>);</pstext>
    </ps>
  </ps_section>
</instructionsection>
