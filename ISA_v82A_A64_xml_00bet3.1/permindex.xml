
<permindex titlename="A64" what="Permuted index of instructions">
  <initials howmany="30">
    <in link="#1">1</in>
    <in link="#2">2</in>
    <in link="#3">3</in>
    <in link="#4">4</in>
    <in link="#6">6</in>
    <in link="#A">A</in>
    <in link="#B">B</in>
    <in link="#C">C</in>
    <in link="#D">D</in>
    <in link="#E">E</in>
    <in link="#F">F</in>
    <in link="#G">G</in>
    <in link="#H">H</in>
    <in link="#I">I</in>
    <in link="#K">K</in>
    <in link="#L">L</in>
    <in link="#M">M</in>
    <in link="#N">N</in>
    <in link="#O">O</in>
    <in link="#P">P</in>
    <in link="#Q">Q</in>
    <in link="#R">R</in>
    <in link="#S">S</in>
    <in link="#T">T</in>
    <in link="#U">U</in>
    <in link="#V">V</in>
    <in link="#W">W</in>
    <in link="#X">X</in>
    <in link="#Y">Y</in>
    <in link="#Z">Z</in>
  </initials>
  <line initialtag="1"><left><a href="rev16_advsimd.xml">REV16 (vector)</a>: Reverse elements in </left><right>16-bit halfwords (vector).</right></line>
  <line><left><a href="rev16_int.xml">REV16</a>: Reverse bytes in </left><right>16-bit halfwords.</right></line>
  <line initialtag="2"><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single </left><right>2-element structure and Replicate to all lanes of two registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single </left><right>2-element structure from one lane of two registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single </left><right>2-element structure to one lane of two registers.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: Store multiple </left><right>2-element structures from two registers.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: Load multiple </left><right>2-element structures to two registers.</right></line>
  <line initialtag="3"><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single </left><right>3-element structure and Replicate to all lanes of three registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single </left><right>3-element structure from one lane of three registers.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single </left><right>3-element structure to one lane of three registers).</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: Store multiple </left><right>3-element structures from three registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: Load multiple </left><right>3-element structures to three registers.</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (vector)</a>: Reverse elements in </left><right>32-bit words (vector).</right></line>
  <line><left><a href="rev32_int.xml">REV32</a>: Reverse bytes in </left><right>32-bit words.</right></line>
  <line initialtag="4"><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single </left><right>4-element structure and Replicate to all lanes of four registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single </left><right>4-element structure from one lane of four registers.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single </left><right>4-element structure to one lane of four registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: Store multiple </left><right>4-element structures from four registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: Load multiple </left><right>4-element structures to four registers.</right></line>
  <line initialtag="6"><left><a href="rev64_advsimd.xml">REV64</a>: Reverse elements in </left><right>64-bit doublewords (vector).</right></line>
  <line initialtag="A"><left></left><right><a href="abs_advsimd.xml">ABS</a>: Absolute value (vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: Floating-point </left><right>Absolute Compare Greater than (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-point </left><right>Absolute Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fabd_advsimd.xml">FABD</a>: Floating-point </left><right>Absolute Difference (vector).</right></line>
  <line><left><a href="uabd_advsimd.xml">UABD</a>: Unsigned </left><right>Absolute Difference (vector).</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: Signed </left><right>Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: Unsigned </left><right>Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="saba_advsimd.xml">SABA</a>: Signed </left><right>Absolute difference and Accumulate.</right></line>
  <line><left><a href="uaba_advsimd.xml">UABA</a>: Unsigned </left><right>Absolute difference and Accumulate.</right></line>
  <line><left><a href="sabdl_advsimd.xml">SABDL, SABDL2</a>: Signed </left><right>Absolute Difference Long.</right></line>
  <line><left><a href="uabdl_advsimd.xml">UABDL, UABDL2</a>: Unsigned </left><right>Absolute Difference Long.</right></line>
  <line><left><a href="sabd_advsimd.xml">SABD</a>: Signed </left><right>Absolute Difference.</right></line>
  <line><left><a href="fabs_float.xml">FABS (scalar)</a>: Floating-point </left><right>Absolute value (scalar).</right></line>
  <line><left><a href="abs_advsimd.xml">ABS</a>: </left><right>Absolute value (vector).</right></line>
  <line><left><a href="fabs_advsimd.xml">FABS (vector)</a>: Floating-point </left><right>Absolute value (vector).</right></line>
  <line><left><a href="sqabs_advsimd.xml">SQABS</a>: Signed saturating </left><right>Absolute value.</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: Signed Rounding Shift Right and </left><right>Accumulate (immediate).</right></line>
  <line><left><a href="ssra_advsimd.xml">SSRA</a>: Signed Shift Right and </left><right>Accumulate (immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: Unsigned Rounding Shift Right and </left><right>Accumulate (immediate).</right></line>
  <line><left><a href="usra_advsimd.xml">USRA</a>: Unsigned Shift Right and </left><right>Accumulate (immediate).</right></line>
  <line><left><a href="sadalp_advsimd.xml">SADALP</a>: Signed Add and </left><right>Accumulate Long Pairwise.</right></line>
  <line><left><a href="uadalp_advsimd.xml">UADALP</a>: Unsigned Add and </left><right>Accumulate Long Pairwise.</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: Signed Absolute difference and </left><right>Accumulate Long.</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: Unsigned Absolute difference and </left><right>Accumulate Long.</right></line>
  <line><left><a href="usqadd_advsimd.xml">USQADD</a>: Unsigned saturating </left><right>Accumulate of Signed value.</right></line>
  <line><left><a href="suqadd_advsimd.xml">SUQADD</a>: Signed saturating </left><right>Accumulate of Unsigned value.</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply </left><right>Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply </left><right>Accumulate returning High Half (vector).</right></line>
  <line><left><a href="saba_advsimd.xml">SABA</a>: Signed Absolute difference and </left><right>Accumulate.</right></line>
  <line><left><a href="uaba_advsimd.xml">UABA</a>: Unsigned Absolute difference and </left><right>Accumulate.</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point fused Multiply-Add to </left><right>accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point fused Multiply-Subtract from </left><right>accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point fused Multiply-Add to </left><right>accumulator (vector).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point fused Multiply-Subtract from </left><right>accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_vec.xml">MLA (vector)</a>: Multiply-Add to </left><right>accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_vec.xml">MLS (vector)</a>: Multiply-Subtract from </left><right>accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by element)</a>: Multiply-Add to </left><right>accumulator (vector, by element).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by element)</a>: Multiply-Subtract from </left><right>accumulator (vector, by element).</right></line>
  <line><left><a href="ldaxp.xml">LDAXP</a>: Load-</left><right>Acquire Exclusive Pair of Registers.</right></line>
  <line><left><a href="ldaxrb.xml">LDAXRB</a>: Load-</left><right>Acquire Exclusive Register Byte.</right></line>
  <line><left><a href="ldaxrh.xml">LDAXRH</a>: Load-</left><right>Acquire Exclusive Register Halfword.</right></line>
  <line><left><a href="ldaxr.xml">LDAXR</a>: Load-</left><right>Acquire Exclusive Register.</right></line>
  <line><left><a href="ldarb.xml">LDARB</a>: Load-</left><right>Acquire Register Byte.</right></line>
  <line><left><a href="ldlarb.xml">LDLARB</a>: Load LO</left><right>Acquire Register Byte.</right></line>
  <line><left><a href="ldarh.xml">LDARH</a>: Load-</left><right>Acquire Register Halfword.</right></line>
  <line><left><a href="ldlarh.xml">LDLARH</a>: Load LO</left><right>Acquire Register Halfword.</right></line>
  <line><left><a href="ldar.xml">LDAR</a>: Load-</left><right>Acquire Register.</right></line>
  <line><left><a href="ldlar.xml">LDLAR</a>: Load LO</left><right>Acquire Register.</right></line>
  <line><left><a href="addv_advsimd.xml">ADDV</a>: Add </left><right>across Vector.</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-point Maximum Number </left><right>across Vector.</right></line>
  <line><left><a href="fmaxv_advsimd.xml">FMAXV</a>: Floating-point Maximum </left><right>across Vector.</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-point Minimum Number </left><right>across Vector.</right></line>
  <line><left><a href="fminv_advsimd.xml">FMINV</a>: Floating-point Minimum </left><right>across Vector.</right></line>
  <line><left><a href="saddlv_advsimd.xml">SADDLV</a>: Signed Add Long </left><right>across Vector.</right></line>
  <line><left><a href="smaxv_advsimd.xml">SMAXV</a>: Signed Maximum </left><right>across Vector.</right></line>
  <line><left><a href="sminv_advsimd.xml">SMINV</a>: Signed Minimum </left><right>across Vector.</right></line>
  <line><left><a href="uaddlv_advsimd.xml">UADDLV</a>: Unsigned sum Long </left><right>across Vector.</right></line>
  <line><left><a href="umaxv_advsimd.xml">UMAXV</a>: Unsigned Maximum </left><right>across Vector.</right></line>
  <line><left><a href="uminv_advsimd.xml">UMINV</a>: Unsigned Minimum </left><right>across Vector.</right></line>
  <line><left></left><right><a href="adc.xml">ADC</a>: Add with Carry.</right></line>
  <line><left></left><right><a href="adcs.xml">ADCS</a>: Add with Carry, setting flags.</right></line>
  <line><left><a href="adds_addsub_ext.xml">ADDS (extended register)</a>: </left><right>Add (extended register), setting flags.</right></line>
  <line><left><a href="add_addsub_ext.xml">ADD (extended register)</a>: </left><right>Add (extended register).</right></line>
  <line><left></left><right><a href="add_addsub_ext.xml">ADD (extended register)</a>: Add (extended register).</right></line>
  <line><left><a href="adds_addsub_imm.xml">ADDS (immediate)</a>: </left><right>Add (immediate), setting flags.</right></line>
  <line><left><a href="add_addsub_imm.xml">ADD (immediate)</a>: </left><right>Add (immediate).</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack pointer: an alias of </left><right>ADD (immediate).</right></line>
  <line><left></left><right><a href="add_addsub_imm.xml">ADD (immediate)</a>: Add (immediate).</right></line>
  <line><left><a href="fadd_float.xml">FADD (scalar)</a>: Floating-point </left><right>Add (scalar).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: Floating-point fused Multiply-</left><right>Add (scalar).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-point Negated fused Multiply-</left><right>Add (scalar).</right></line>
  <line><left><a href="adds_addsub_shift.xml">ADDS (shifted register)</a>: </left><right>Add (shifted register), setting flags.</right></line>
  <line><left><a href="add_addsub_shift.xml">ADD (shifted register)</a>: </left><right>Add (shifted register).</right></line>
  <line><left></left><right><a href="add_addsub_shift.xml">ADD (shifted register)</a>: Add (shifted register).</right></line>
  <line><left><a href="add_advsimd.xml">ADD (vector)</a>: </left><right>Add (vector).</right></line>
  <line><left><a href="fadd_advsimd.xml">FADD (vector)</a>: Floating-point </left><right>Add (vector).</right></line>
  <line><left></left><right><a href="add_advsimd.xml">ADD (vector)</a>: Add (vector).</right></line>
  <line><left><a href="addv_advsimd.xml">ADDV</a>: </left><right>Add across Vector.</right></line>
  <line><left><a href="sadalp_advsimd.xml">SADALP</a>: Signed </left><right>Add and Accumulate Long Pairwise.</right></line>
  <line><left><a href="uadalp_advsimd.xml">UADALP</a>: Unsigned </left><right>Add and Accumulate Long Pairwise.</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating Doubling Multiply-</left><right>Add Long (by element).</right></line>
  <line><left><a href="saddl_advsimd.xml">SADDL, SADDL2</a>: Signed </left><right>Add Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: Signed Multiply-</left><right>Add Long (vector).</right></line>
  <line><left><a href="uaddl_advsimd.xml">UADDL, UADDL2</a>: Unsigned </left><right>Add Long (vector).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: Unsigned Multiply-</left><right>Add Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed Multiply-</left><right>Add Long (vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned Multiply-</left><right>Add Long (vector, by element).</right></line>
  <line><left><a href="saddlv_advsimd.xml">SADDLV</a>: Signed </left><right>Add Long across Vector.</right></line>
  <line><left><a href="saddlp_advsimd.xml">SADDLP</a>: Signed </left><right>Add Long Pairwise.</right></line>
  <line><left><a href="uaddlp_advsimd.xml">UADDLP</a>: Unsigned </left><right>Add Long Pairwise.</right></line>
  <line><left><a href="smaddl.xml">SMADDL</a>: Signed Multiply-</left><right>Add Long.</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed saturating Doubling Multiply-</left><right>Add Long.</right></line>
  <line><left><a href="umaddl.xml">UMADDL</a>: Unsigned Multiply-</left><right>Add Long.</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic </left><right>add on byte in memory, without return.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: Atomic </left><right>add on byte in memory.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic </left><right>add on halfword in memory, without return.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: Atomic </left><right>add on halfword in memory.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic </left><right>add on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic </left><right>add on word or doubleword in memory.</right></line>
  <line><left><a href="addp_advsimd_pair.xml">ADDP (scalar)</a>: </left><right>Add Pair of elements (scalar).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-point </left><right>Add Pair of elements (scalar).</right></line>
  <line><left><a href="addp_advsimd_vec.xml">ADDP (vector)</a>: </left><right>Add Pairwise (vector).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: Floating-point </left><right>Add Pairwise (vector).</right></line>
  <line><left><a href="addhn_advsimd.xml">ADDHN, ADDHN2</a>: </left><right>Add returning High Narrow.</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: Rounding </left><right>Add returning High Narrow.</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point fused Multiply-</left><right>Add to accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point fused Multiply-</left><right>Add to accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_vec.xml">MLA (vector)</a>: Multiply-</left><right>Add to accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by element)</a>: Multiply-</left><right>Add to accumulator (vector, by element).</right></line>
  <line><left><a href="saddw_advsimd.xml">SADDW, SADDW2</a>: Signed </left><right>Add Wide.</right></line>
  <line><left><a href="uaddw_advsimd.xml">UADDW, UADDW2</a>: Unsigned </left><right>Add Wide.</right></line>
  <line><left><a href="adcs.xml">ADCS</a>: </left><right>Add with Carry, setting flags.</right></line>
  <line><left><a href="adc.xml">ADC</a>: </left><right>Add with Carry.</right></line>
  <line><left><a href="madd.xml">MADD</a>: Multiply-</left><right>Add.</right></line>
  <line><left><a href="shadd_advsimd.xml">SHADD</a>: Signed Halving </left><right>Add.</right></line>
  <line><left><a href="sqadd_advsimd.xml">SQADD</a>: Signed saturating </left><right>Add.</right></line>
  <line><left><a href="srhadd_advsimd.xml">SRHADD</a>: Signed Rounding Halving </left><right>Add.</right></line>
  <line><left><a href="uhadd_advsimd.xml">UHADD</a>: Unsigned Halving </left><right>Add.</right></line>
  <line><left><a href="uqadd_advsimd.xml">UQADD</a>: Unsigned saturating </left><right>Add.</right></line>
  <line><left><a href="urhadd_advsimd.xml">URHADD</a>: Unsigned Rounding Halving </left><right>Add.</right></line>
  <line><left></left><right><a href="addhn_advsimd.xml">ADDHN, ADDHN2</a>: Add returning High Narrow.</right></line>
  <line><left><a href="addhn_advsimd.xml">ADDHN, </a></left><right><a href="addhn_advsimd.xml">ADDHN2</a>: Add returning High Narrow.</right></line>
  <line><left></left><right><a href="addp_advsimd_pair.xml">ADDP (scalar)</a>: Add Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="addp_advsimd_vec.xml">ADDP (vector)</a>: Add Pairwise (vector).</right></line>
  <line><left><a href="adrp.xml">ADRP</a>: Form PC-relative </left><right>address to 4KB page.</right></line>
  <line><left><a href="at_sys.xml">AT</a>: </left><right>Address Translate: an alias of SYS.</right></line>
  <line><left><a href="adr.xml">ADR</a>: Form PC-relative </left><right>address.</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (extended register): an alias of </left><right>ADDS (extended register).</right></line>
  <line><left></left><right><a href="adds_addsub_ext.xml">ADDS (extended register)</a>: Add (extended register), setting flags.</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (immediate): an alias of </left><right>ADDS (immediate).</right></line>
  <line><left></left><right><a href="adds_addsub_imm.xml">ADDS (immediate)</a>: Add (immediate), setting flags.</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (shifted register): an alias of </left><right>ADDS (shifted register).</right></line>
  <line><left></left><right><a href="adds_addsub_shift.xml">ADDS (shifted register)</a>: Add (shifted register), setting flags.</right></line>
  <line><left></left><right><a href="addv_advsimd.xml">ADDV</a>: Add across Vector.</right></line>
  <line><left></left><right><a href="adr.xml">ADR</a>: Form PC-relative address.</right></line>
  <line><left></left><right><a href="adrp.xml">ADRP</a>: Form PC-relative address to 4KB page.</right></line>
  <line><left><a href="aesimc_advsimd.xml">AESIMC</a>: </left><right>AES inverse mix columns.</right></line>
  <line><left><a href="aesmc_advsimd.xml">AESMC</a>: </left><right>AES mix columns.</right></line>
  <line><left><a href="aesd_advsimd.xml">AESD</a>: </left><right>AES single round decryption.</right></line>
  <line><left><a href="aese_advsimd.xml">AESE</a>: </left><right>AES single round encryption.</right></line>
  <line><left></left><right><a href="aesd_advsimd.xml">AESD</a>: AES single round decryption.</right></line>
  <line><left></left><right><a href="aese_advsimd.xml">AESE</a>: AES single round encryption.</right></line>
  <line><left></left><right><a href="aesimc_advsimd.xml">AESIMC</a>: AES inverse mix columns.</right></line>
  <line><left></left><right><a href="aesmc_advsimd.xml">AESMC</a>: AES mix columns.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack pointer: an </left><right>alias of ADD (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (extended register): an </left><right>alias of ADDS (extended register).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (immediate): an </left><right>alias of ADDS (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (shifted register): an </left><right>alias of ADDS (shifted register).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (immediate): an </left><right>alias of ANDS (immediate).</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (shifted register): an </left><right>alias of ANDS (shifted register).</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic Shift Right (register): an </left><right>alias of ASRV.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other bits unchanged: an </left><right>alias of BFM.</right></line>
  <line><left><a href="bfi_bfm.xml">BFI</a>: Bitfield Insert: an </left><right>alias of BFM.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at low end: an </left><right>alias of BFM.</right></line>
  <line><left><a href="cinc_csinc.xml">CINC</a>: Conditional Increment: an </left><right>alias of CSINC.</right></line>
  <line><left><a href="cset_csinc.xml">CSET</a>: Conditional Set: an </left><right>alias of CSINC.</right></line>
  <line><left><a href="cinv_csinv.xml">CINV</a>: Conditional Invert: an </left><right>alias of CSINV.</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: Conditional Set Mask: an </left><right>alias of CSINV.</right></line>
  <line><left><a href="cneg_csneg.xml">CNEG</a>: Conditional Negate: an </left><right>alias of CSNEG.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to scalar: an </left><right>alias of DUP (element).</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: Rotate right (immediate): an </left><right>alias of EXTR.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector element: an </left><right>alias of INS (element).</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector element: an </left><right>alias of INS (general).</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: Logical Shift Left (register): an </left><right>alias of LSLV.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: Logical Shift Right (register): an </left><right>alias of LSRV.</right></line>
  <line><left><a href="mul_madd.xml">MUL</a>: Multiply: an </left><right>alias of MADD.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted wide immediate): an </left><right>alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (wide immediate): an </left><right>alias of MOVZ.</right></line>
  <line><left><a href="mneg_msub.xml">MNEG</a>: Multiply-Negate: an </left><right>alias of MSUB.</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise NOT (vector): an </left><right>alias of NOT.</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise NOT: an </left><right>alias of ORN (shifted register).</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask immediate): an </left><right>alias of ORR (immediate).</right></line>
  <line><left><a href="mov_orr_log_shift.xml">MOV (register)</a>: Move (register): an </left><right>alias of ORR (shifted register).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move vector: an </left><right>alias of ORR (vector, register).</right></line>
  <line><left><a href="rev64_rev.xml">REV64</a>: Reverse Bytes: an </left><right>alias of REV.</right></line>
  <line><left><a href="ror_rorv.xml">ROR (register)</a>: Rotate Right (register): an </left><right>alias of RORV.</right></line>
  <line><left><a href="ngc_sbc.xml">NGC</a>: Negate with Carry: an </left><right>alias of SBC.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: Negate with Carry, setting flags: an </left><right>alias of SBCS.</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift Right (immediate): an </left><right>alias of SBFM.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield Insert in Zero: an </left><right>alias of SBFM.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: Signed Bitfield Extract: an </left><right>alias of SBFM.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: Signed Extend Byte: an </left><right>alias of SBFM.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: Sign Extend Halfword: an </left><right>alias of SBFM.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: Sign Extend Word: an </left><right>alias of SBFM.</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: Signed Multiply Long: an </left><right>alias of SMADDL.</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-Negate Long: an </left><right>alias of SMSUBL.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend Long: an </left><right>alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (shifted register): an </left><right>alias of SUB (shifted register).</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (extended register): an </left><right>alias of SUBS (extended register).</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (immediate): an </left><right>alias of SUBS (immediate).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (shifted register): an </left><right>alias of SUBS (shifted register).</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting flags: an </left><right>alias of SUBS (shifted register).</right></line>
  <line><left><a href="at_sys.xml">AT</a>: Address Translate: an </left><right>alias of SYS.</right></line>
  <line><left><a href="dc_sys.xml">DC</a>: Data Cache operation: an </left><right>alias of SYS.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: Instruction Cache operation: an </left><right>alias of SYS.</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: TLB Invalidate operation: an </left><right>alias of SYS.</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift Left (immediate): an </left><right>alias of UBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift Right (immediate): an </left><right>alias of UBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield Insert in Zero: an </left><right>alias of UBFM.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned Bitfield Extract: an </left><right>alias of UBFM.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned Extend Byte: an </left><right>alias of UBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: Unsigned Extend Halfword: an </left><right>alias of UBFM.</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: Unsigned Multiply Long: an </left><right>alias of UMADDL.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to general-purpose register: an </left><right>alias of UMOV.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-Negate Long: an </left><right>alias of UMSUBL.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend Long: an </left><right>alias of USHLL, USHLL2.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element structure and Replicate to </left><right>all lanes (of one register).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element structure and Replicate to </left><right>all lanes of four registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element structure and Replicate to </left><right>all lanes of three registers.</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element structure and Replicate to </left><right>all lanes of two registers.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack pointer: </left><right>an alias of ADD (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (extended register): </left><right>an alias of ADDS (extended register).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (immediate): </left><right>an alias of ADDS (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (shifted register): </left><right>an alias of ADDS (shifted register).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (immediate): </left><right>an alias of ANDS (immediate).</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (shifted register): </left><right>an alias of ANDS (shifted register).</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic Shift Right (register): </left><right>an alias of ASRV.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other bits unchanged: </left><right>an alias of BFM.</right></line>
  <line><left><a href="bfi_bfm.xml">BFI</a>: Bitfield Insert: </left><right>an alias of BFM.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at low end: </left><right>an alias of BFM.</right></line>
  <line><left><a href="cinc_csinc.xml">CINC</a>: Conditional Increment: </left><right>an alias of CSINC.</right></line>
  <line><left><a href="cset_csinc.xml">CSET</a>: Conditional Set: </left><right>an alias of CSINC.</right></line>
  <line><left><a href="cinv_csinv.xml">CINV</a>: Conditional Invert: </left><right>an alias of CSINV.</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: Conditional Set Mask: </left><right>an alias of CSINV.</right></line>
  <line><left><a href="cneg_csneg.xml">CNEG</a>: Conditional Negate: </left><right>an alias of CSNEG.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to scalar: </left><right>an alias of DUP (element).</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: Rotate right (immediate): </left><right>an alias of EXTR.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector element: </left><right>an alias of INS (element).</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector element: </left><right>an alias of INS (general).</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: Logical Shift Left (register): </left><right>an alias of LSLV.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: Logical Shift Right (register): </left><right>an alias of LSRV.</right></line>
  <line><left><a href="mul_madd.xml">MUL</a>: Multiply: </left><right>an alias of MADD.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted wide immediate): </left><right>an alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (wide immediate): </left><right>an alias of MOVZ.</right></line>
  <line><left><a href="mneg_msub.xml">MNEG</a>: Multiply-Negate: </left><right>an alias of MSUB.</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise NOT (vector): </left><right>an alias of NOT.</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise NOT: </left><right>an alias of ORN (shifted register).</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask immediate): </left><right>an alias of ORR (immediate).</right></line>
  <line><left><a href="mov_orr_log_shift.xml">MOV (register)</a>: Move (register): </left><right>an alias of ORR (shifted register).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move vector: </left><right>an alias of ORR (vector, register).</right></line>
  <line><left><a href="rev64_rev.xml">REV64</a>: Reverse Bytes: </left><right>an alias of REV.</right></line>
  <line><left><a href="ror_rorv.xml">ROR (register)</a>: Rotate Right (register): </left><right>an alias of RORV.</right></line>
  <line><left><a href="ngc_sbc.xml">NGC</a>: Negate with Carry: </left><right>an alias of SBC.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: Negate with Carry, setting flags: </left><right>an alias of SBCS.</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift Right (immediate): </left><right>an alias of SBFM.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield Insert in Zero: </left><right>an alias of SBFM.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: Signed Bitfield Extract: </left><right>an alias of SBFM.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: Signed Extend Byte: </left><right>an alias of SBFM.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: Sign Extend Halfword: </left><right>an alias of SBFM.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: Sign Extend Word: </left><right>an alias of SBFM.</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: Signed Multiply Long: </left><right>an alias of SMADDL.</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-Negate Long: </left><right>an alias of SMSUBL.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend Long: </left><right>an alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (shifted register): </left><right>an alias of SUB (shifted register).</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (extended register): </left><right>an alias of SUBS (extended register).</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (immediate): </left><right>an alias of SUBS (immediate).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (shifted register): </left><right>an alias of SUBS (shifted register).</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting flags: </left><right>an alias of SUBS (shifted register).</right></line>
  <line><left><a href="at_sys.xml">AT</a>: Address Translate: </left><right>an alias of SYS.</right></line>
  <line><left><a href="dc_sys.xml">DC</a>: Data Cache operation: </left><right>an alias of SYS.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: Instruction Cache operation: </left><right>an alias of SYS.</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: TLB Invalidate operation: </left><right>an alias of SYS.</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift Left (immediate): </left><right>an alias of UBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift Right (immediate): </left><right>an alias of UBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield Insert in Zero: </left><right>an alias of UBFM.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned Bitfield Extract: </left><right>an alias of UBFM.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned Extend Byte: </left><right>an alias of UBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: Unsigned Extend Halfword: </left><right>an alias of UBFM.</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: Unsigned Multiply Long: </left><right>an alias of UMADDL.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to general-purpose register: </left><right>an alias of UMOV.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-Negate Long: </left><right>an alias of UMSUBL.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend Long: </left><right>an alias of USHLL, USHLL2.</right></line>
  <line><left><a href="ands_log_imm.xml">ANDS (immediate)</a>: Bitwise </left><right>AND (immediate), setting flags.</right></line>
  <line><left><a href="and_log_imm.xml">AND (immediate)</a>: Bitwise </left><right>AND (immediate).</right></line>
  <line><left></left><right><a href="and_log_imm.xml">AND (immediate)</a>: Bitwise AND (immediate).</right></line>
  <line><left><a href="ands_log_shift.xml">ANDS (shifted register)</a>: Bitwise </left><right>AND (shifted register), setting flags.</right></line>
  <line><left><a href="and_log_shift.xml">AND (shifted register)</a>: Bitwise </left><right>AND (shifted register).</right></line>
  <line><left></left><right><a href="and_log_shift.xml">AND (shifted register)</a>: Bitwise AND (shifted register).</right></line>
  <line><left><a href="and_advsimd.xml">AND (vector)</a>: Bitwise </left><right>AND (vector).</right></line>
  <line><left></left><right><a href="and_advsimd.xml">AND (vector)</a>: Bitwise AND (vector).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (immediate): an alias of </left><right>ANDS (immediate).</right></line>
  <line><left></left><right><a href="ands_log_imm.xml">ANDS (immediate)</a>: Bitwise AND (immediate), setting flags.</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (shifted register): an alias of </left><right>ANDS (shifted register).</right></line>
  <line><left></left><right><a href="ands_log_shift.xml">ANDS (shifted register)</a>: Bitwise AND (shifted register), setting flags.</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert vector element from </left><right>another vector element.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to </left><right>another vector element: an alias of INS (element).</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: </left><right>Arithmetic Shift Right (immediate): an alias of SBFM.</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: </left><right>Arithmetic Shift Right (register): an alias of ASRV.</right></line>
  <line><left><a href="asrv.xml">ASRV</a>: </left><right>Arithmetic Shift Right Variable.</right></line>
  <line><left></left><right><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift Right (immediate): an alias of SBFM.</right></line>
  <line><left></left><right><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic Shift Right (register): an alias of ASRV.</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic Shift Right (register): an alias of </left><right>ASRV.</right></line>
  <line><left></left><right><a href="asrv.xml">ASRV</a>: Arithmetic Shift Right Variable.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert </left><right>at low end: an alias of BFM.</right></line>
  <line><left></left><right><a href="at_sys.xml">AT</a>: Address Translate: an alias of SYS.</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: </left><right>Atomic add on byte in memory, without return.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: </left><right>Atomic add on byte in memory.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: </left><right>Atomic add on halfword in memory, without return.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: </left><right>Atomic add on halfword in memory.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: </left><right>Atomic add on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: </left><right>Atomic add on word or doubleword in memory.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: </left><right>Atomic bit clear on byte in memory, without return.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: </left><right>Atomic bit clear on byte in memory.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: </left><right>Atomic bit clear on halfword in memory, without return.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: </left><right>Atomic bit clear on halfword in memory.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: </left><right>Atomic bit clear on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: </left><right>Atomic bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: </left><right>Atomic bit set on byte in memory, without return.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: </left><right>Atomic bit set on byte in memory.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: </left><right>Atomic bit set on halfword in memory, without return.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: </left><right>Atomic bit set on halfword in memory.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: </left><right>Atomic bit set on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: </left><right>Atomic bit set on word or doubleword in memory.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: </left><right>Atomic exclusive OR on byte in memory, without return.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: </left><right>Atomic exclusive OR on byte in memory.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: </left><right>Atomic exclusive OR on halfword in memory, without return.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: </left><right>Atomic exclusive OR on halfword in memory.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: </left><right>Atomic exclusive OR on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: </left><right>Atomic exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: </left><right>Atomic signed maximum on byte in memory, without return.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: </left><right>Atomic signed maximum on byte in memory.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: </left><right>Atomic signed maximum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: </left><right>Atomic signed maximum on halfword in memory.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: </left><right>Atomic signed maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: </left><right>Atomic signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: </left><right>Atomic signed minimum on byte in memory, without return.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: </left><right>Atomic signed minimum on byte in memory.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: </left><right>Atomic signed minimum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: </left><right>Atomic signed minimum on halfword in memory.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: </left><right>Atomic signed minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: </left><right>Atomic signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: </left><right>Atomic unsigned maximum on byte in memory, without return.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: </left><right>Atomic unsigned maximum on byte in memory.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: </left><right>Atomic unsigned maximum on halfword in memory, without return.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: </left><right>Atomic unsigned maximum on halfword in memory.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: </left><right>Atomic unsigned maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: </left><right>Atomic unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: </left><right>Atomic unsigned minimum on byte in memory, without return.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: </left><right>Atomic unsigned minimum on byte in memory.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: </left><right>Atomic unsigned minimum on halfword in memory, without return.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: </left><right>Atomic unsigned minimum on halfword in memory.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: </left><right>Atomic unsigned minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: </left><right>Atomic unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to </left><right>Away (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to </left><right>Away (scalar).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to Integral, to nearest with ties to </left><right>Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to </left><right>Away (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to </left><right>Away (vector).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to Integral, to nearest with ties to </left><right>Away (vector).</right></line>
  <line initialtag="B"><left></left><right><a href="b_cond.xml">B.cond</a>: Branch conditionally.</right></line>
  <line><left></left><right><a href="b_uncond.xml">B</a>: Branch.</right></line>
  <line><left><a href="dmb.xml">DMB</a>: Data Memory </left><right>Barrier.</right></line>
  <line><left><a href="dsb.xml">DSB</a>: Data Synchronization </left><right>Barrier.</right></line>
  <line><left><a href="esb.xml">ESB</a>: Error Synchronization </left><right>Barrier.</right></line>
  <line><left><a href="isb.xml">ISB</a>: Instruction Synchronization </left><right>Barrier.</right></line>
  <line><left><a href="psb.xml">PSB CSYNC</a>: Profiling Synchronization </left><right>Barrier.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move </left><right>between register and stack pointer: an alias of ADD (immediate).</right></line>
  <line><left></left><right><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other bits unchanged: an alias of BFM.</right></line>
  <line><left></left><right><a href="bfi_bfm.xml">BFI</a>: Bitfield Insert: an alias of BFM.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other bits unchanged: an alias of </left><right>BFM.</right></line>
  <line><left><a href="bfi_bfm.xml">BFI</a>: Bitfield Insert: an alias of </left><right>BFM.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at low end: an alias of </left><right>BFM.</right></line>
  <line><left></left><right><a href="bfm.xml">BFM</a>: Bitfield Move.</right></line>
  <line><left></left><right><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at low end: an alias of BFM.</right></line>
  <line><left></left><right><a href="bic_log_shift.xml">BIC (shifted register)</a>: Bitwise Bit Clear (shifted register).</right></line>
  <line><left></left><right><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: Bitwise bit Clear (vector, immediate).</right></line>
  <line><left></left><right><a href="bic_advsimd_reg.xml">BIC (vector, register)</a>: Bitwise bit Clear (vector, register).</right></line>
  <line><left></left><right><a href="bics.xml">BICS (shifted register)</a>: Bitwise Bit Clear (shifted register), setting flags.</right></line>
  <line><left></left><right><a href="bif_advsimd.xml">BIF</a>: Bitwise Insert if False.</right></line>
  <line><left><a href="tbnz.xml">TBNZ</a>: Test </left><right>bit and Branch if Nonzero.</right></line>
  <line><left><a href="tbz.xml">TBZ</a>: Test </left><right>bit and Branch if Zero.</right></line>
  <line><left><a href="bics.xml">BICS (shifted register)</a>: Bitwise </left><right>Bit Clear (shifted register), setting flags.</right></line>
  <line><left><a href="bic_log_shift.xml">BIC (shifted register)</a>: Bitwise </left><right>Bit Clear (shifted register).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: Bitwise </left><right>bit Clear (vector, immediate).</right></line>
  <line><left><a href="bic_advsimd_reg.xml">BIC (vector, register)</a>: Bitwise </left><right>bit Clear (vector, register).</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic </left><right>bit clear on byte in memory, without return.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic </left><right>bit clear on byte in memory.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic </left><right>bit clear on halfword in memory, without return.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic </left><right>bit clear on halfword in memory.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic </left><right>bit clear on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic </left><right>bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="rbit_advsimd.xml">RBIT (vector)</a>: Reverse </left><right>Bit order (vector).</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic </left><right>bit set on byte in memory, without return.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic </left><right>bit set on byte in memory.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic </left><right>bit set on halfword in memory, without return.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic </left><right>bit set on halfword in memory.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic </left><right>bit set on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic </left><right>bit set on word or doubleword in memory.</right></line>
  <line><left></left><right><a href="bit_advsimd.xml">BIT</a>: Bitwise Insert if True.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: </left><right>Bitfield Clear, leaving other bits unchanged: an alias of BFM.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: </left><right>Bitfield extract and insert at low end: an alias of BFM.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: Signed </left><right>Bitfield Extract: an alias of SBFM.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned </left><right>Bitfield Extract: an alias of UBFM.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed </left><right>Bitfield Insert in Zero: an alias of SBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned </left><right>Bitfield Insert in Zero: an alias of UBFM.</right></line>
  <line><left><a href="bfi_bfm.xml">BFI</a>: </left><right>Bitfield Insert: an alias of BFM.</right></line>
  <line><left><a href="bfm.xml">BFM</a>: </left><right>Bitfield Move.</right></line>
  <line><left><a href="sbfm.xml">SBFM</a>: Signed </left><right>Bitfield Move.</right></line>
  <line><left><a href="ubfm.xml">UBFM</a>: Unsigned </left><right>Bitfield Move.</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (</left><right>bitmask immediate): an alias of ORR (immediate).</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (</a></left><right><a href="mov_orr_log_imm.xml">bitmask immediate)</a>: Move (bitmask immediate): an alias of ORR (immediate).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test </left><right>bits (immediate): an alias of ANDS (immediate).</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (vector)</a>: Count Leading Sign </left><right>bits (vector).</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (vector)</a>: Count Leading Zero </left><right>bits (vector).</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: Compare bitwise Test </left><right>bits nonzero (vector).</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other </left><right>bits unchanged: an alias of BFM.</right></line>
  <line><left><a href="cls_int.xml">CLS</a>: Count leading sign </left><right>bits.</right></line>
  <line><left><a href="clz_int.xml">CLZ</a>: Count leading zero </left><right>bits.</right></line>
  <line><left><a href="rbit_int.xml">RBIT</a>: Reverse </left><right>Bits.</right></line>
  <line><left><a href="ands_log_imm.xml">ANDS (immediate)</a>: </left><right>Bitwise AND (immediate), setting flags.</right></line>
  <line><left><a href="and_log_imm.xml">AND (immediate)</a>: </left><right>Bitwise AND (immediate).</right></line>
  <line><left><a href="ands_log_shift.xml">ANDS (shifted register)</a>: </left><right>Bitwise AND (shifted register), setting flags.</right></line>
  <line><left><a href="and_log_shift.xml">AND (shifted register)</a>: </left><right>Bitwise AND (shifted register).</right></line>
  <line><left><a href="and_advsimd.xml">AND (vector)</a>: </left><right>Bitwise AND (vector).</right></line>
  <line><left><a href="bics.xml">BICS (shifted register)</a>: </left><right>Bitwise Bit Clear (shifted register), setting flags.</right></line>
  <line><left><a href="bic_log_shift.xml">BIC (shifted register)</a>: </left><right>Bitwise Bit Clear (shifted register).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: </left><right>Bitwise bit Clear (vector, immediate).</right></line>
  <line><left><a href="bic_advsimd_reg.xml">BIC (vector, register)</a>: </left><right>Bitwise bit Clear (vector, register).</right></line>
  <line><left><a href="cmeq_advsimd_reg.xml">CMEQ (register)</a>: Compare </left><right>bitwise Equal (vector).</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: Compare </left><right>bitwise Equal to zero (vector).</right></line>
  <line><left><a href="eor_log_imm.xml">EOR (immediate)</a>: </left><right>Bitwise Exclusive OR (immediate).</right></line>
  <line><left><a href="eor_log_shift.xml">EOR (shifted register)</a>: </left><right>Bitwise Exclusive OR (shifted register).</right></line>
  <line><left><a href="eor_advsimd.xml">EOR (vector)</a>: </left><right>Bitwise Exclusive OR (vector).</right></line>
  <line><left><a href="eon.xml">EON (shifted register)</a>: </left><right>Bitwise Exclusive OR NOT (shifted register).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: </left><right>Bitwise inclusive OR (vector, immediate).</right></line>
  <line><left><a href="orr_advsimd_reg.xml">ORR (vector, register)</a>: </left><right>Bitwise inclusive OR (vector, register).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (vector)</a>: </left><right>Bitwise inclusive OR NOT (vector).</right></line>
  <line><left><a href="bif_advsimd.xml">BIF</a>: </left><right>Bitwise Insert if False.</right></line>
  <line><left><a href="bit_advsimd.xml">BIT</a>: </left><right>Bitwise Insert if True.</right></line>
  <line><left><a href="not_advsimd.xml">NOT</a>: </left><right>Bitwise NOT (vector).</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: </left><right>Bitwise NOT (vector): an alias of NOT.</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: </left><right>Bitwise NOT: an alias of ORN (shifted register).</right></line>
  <line><left><a href="orr_log_imm.xml">ORR (immediate)</a>: </left><right>Bitwise OR (immediate).</right></line>
  <line><left><a href="orr_log_shift.xml">ORR (shifted register)</a>: </left><right>Bitwise OR (shifted register).</right></line>
  <line><left><a href="orn_log_shift.xml">ORN (shifted register)</a>: </left><right>Bitwise OR NOT (shifted register).</right></line>
  <line><left><a href="bsl_advsimd.xml">BSL</a>: </left><right>Bitwise Select.</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: Compare </left><right>bitwise Test bits nonzero (vector).</right></line>
  <line><left></left><right><a href="bl.xml">BL</a>: Branch with Link.</right></line>
  <line><left></left><right><a href="blr.xml">BLR</a>: Branch with Link to Register.</right></line>
  <line><left></left><right><a href="br.xml">BR</a>: Branch to Register.</right></line>
  <line><left><a href="b_cond.xml">B.cond</a>: </left><right>Branch conditionally.</right></line>
  <line><left><a href="tbnz.xml">TBNZ</a>: Test bit and </left><right>Branch if Nonzero.</right></line>
  <line><left><a href="tbz.xml">TBZ</a>: Test bit and </left><right>Branch if Zero.</right></line>
  <line><left><a href="cbnz.xml">CBNZ</a>: Compare and </left><right>Branch on Nonzero.</right></line>
  <line><left><a href="cbz.xml">CBZ</a>: Compare and </left><right>Branch on Zero.</right></line>
  <line><left><a href="br.xml">BR</a>: </left><right>Branch to Register.</right></line>
  <line><left><a href="blr.xml">BLR</a>: </left><right>Branch with Link to Register.</right></line>
  <line><left><a href="bl.xml">BL</a>: </left><right>Branch with Link.</right></line>
  <line><left><a href="b_uncond.xml">B</a>: </left><right>Branch.</right></line>
  <line><left><a href="brk.xml">BRK</a>: </left><right>Breakpoint instruction.</right></line>
  <line><left></left><right><a href="brk.xml">BRK</a>: Breakpoint instruction.</right></line>
  <line><left></left><right><a href="bsl_advsimd.xml">BSL</a>: Bitwise Select.</right></line>
  <line><left><a href="ldrb_imm.xml">LDRB (immediate)</a>: Load Register </left><right>Byte (immediate).</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: Load Register Signed </left><right>Byte (immediate).</right></line>
  <line><left><a href="strb_imm.xml">STRB (immediate)</a>: Store Register </left><right>Byte (immediate).</right></line>
  <line><left><a href="ldrb_reg.xml">LDRB (register)</a>: Load Register </left><right>Byte (register).</right></line>
  <line><left><a href="ldrsb_reg.xml">LDRSB (register)</a>: Load Register Signed </left><right>Byte (register).</right></line>
  <line><left><a href="strb_reg.xml">STRB (register)</a>: Store Register </left><right>Byte (register).</right></line>
  <line><left><a href="ldtrb.xml">LDTRB</a>: Load Register </left><right>Byte (unprivileged).</right></line>
  <line><left><a href="ldtrsb.xml">LDTRSB</a>: Load Register Signed </left><right>Byte (unprivileged).</right></line>
  <line><left><a href="sttrb.xml">STTRB</a>: Store Register </left><right>Byte (unprivileged).</right></line>
  <line><left><a href="ldurb.xml">LDURB</a>: Load Register </left><right>Byte (unscaled).</right></line>
  <line><left><a href="ldursb.xml">LDURSB</a>: Load Register Signed </left><right>Byte (unscaled).</right></line>
  <line><left><a href="sturb.xml">STURB</a>: Store Register </left><right>Byte (unscaled).</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum on </left><right>byte in memory, without return.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, CASALB, CASLB</a>: Compare and Swap </left><right>byte in memory.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: Atomic add on </left><right>byte in memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit clear on </left><right>byte in memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive OR on </left><right>byte in memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit set on </left><right>byte in memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum on </left><right>byte in memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed minimum on </left><right>byte in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum on </left><right>byte in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum on </left><right>byte in memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, SWPAB, SWPALB, SWPLB</a>: Swap </left><right>byte in memory.</right></line>
  <line><left><a href="cnt_advsimd.xml">CNT</a>: Population Count per </left><right>byte.</right></line>
  <line><left><a href="ldarb.xml">LDARB</a>: Load-Acquire Register </left><right>Byte.</right></line>
  <line><left><a href="ldaxrb.xml">LDAXRB</a>: Load-Acquire Exclusive Register </left><right>Byte.</right></line>
  <line><left><a href="ldlarb.xml">LDLARB</a>: Load LOAcquire Register </left><right>Byte.</right></line>
  <line><left><a href="ldxrb.xml">LDXRB</a>: Load Exclusive Register </left><right>Byte.</right></line>
  <line><left><a href="stllrb.xml">STLLRB</a>: Store LORelease Register </left><right>Byte.</right></line>
  <line><left><a href="stlrb.xml">STLRB</a>: Store-Release Register </left><right>Byte.</right></line>
  <line><left><a href="stlxrb.xml">STLXRB</a>: Store-Release Exclusive Register </left><right>Byte.</right></line>
  <line><left><a href="stxrb.xml">STXRB</a>: Store Exclusive Register </left><right>Byte.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: Signed Extend </left><right>Byte: an alias of SBFM.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned Extend </left><right>Byte: an alias of UBFM.</right></line>
  <line><left><a href="rev16_int.xml">REV16</a>: Reverse </left><right>bytes in 16-bit halfwords.</right></line>
  <line><left><a href="rev32_int.xml">REV32</a>: Reverse </left><right>bytes in 32-bit words.</right></line>
  <line><left><a href="rev.xml">REV</a>: Reverse </left><right>Bytes.</right></line>
  <line><left><a href="rev64_rev.xml">REV64</a>: Reverse </left><right>Bytes: an alias of REV.</right></line>
  <line initialtag="C"><left><a href="dc_sys.xml">DC</a>: Data </left><right>Cache operation: an alias of SYS.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: Instruction </left><right>Cache operation: an alias of SYS.</right></line>
  <line><left><a href="hvc.xml">HVC</a>: Hypervisor </left><right>Call.</right></line>
  <line><left><a href="smc.xml">SMC</a>: Secure Monitor </left><right>Call.</right></line>
  <line><left><a href="svc.xml">SVC</a>: Supervisor </left><right>Call.</right></line>
  <line><left><a href="adcs.xml">ADCS</a>: Add with </left><right>Carry, setting flags.</right></line>
  <line><left><a href="sbcs.xml">SBCS</a>: Subtract with </left><right>Carry, setting flags.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: Negate with </left><right>Carry, setting flags: an alias of SBCS.</right></line>
  <line><left><a href="adc.xml">ADC</a>: Add with </left><right>Carry.</right></line>
  <line><left><a href="sbc.xml">SBC</a>: Subtract with </left><right>Carry.</right></line>
  <line><left><a href="ngc_sbc.xml">NGC</a>: Negate with </left><right>Carry: an alias of SBC.</right></line>
  <line><left></left><right><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: Compare and Swap word or doubleword in memory.</right></line>
  <line><left><a href="cas.xml">CAS, </a></left><right><a href="cas.xml">CASA, CASAL, CASL</a>: Compare and Swap word or doubleword in memory.</right></line>
  <line><left><a href="casb.xml">CASB, </a></left><right><a href="casb.xml">CASAB, CASALB, CASLB</a>: Compare and Swap byte in memory.</right></line>
  <line><left><a href="cash.xml">CASH, </a></left><right><a href="cash.xml">CASAH, CASALH, CASLH</a>: Compare and Swap halfword in memory.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, </a></left><right><a href="cas.xml">CASAL, CASL</a>: Compare and Swap word or doubleword in memory.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, </a></left><right><a href="casb.xml">CASALB, CASLB</a>: Compare and Swap byte in memory.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, </a></left><right><a href="cash.xml">CASALH, CASLH</a>: Compare and Swap halfword in memory.</right></line>
  <line><left></left><right><a href="casb.xml">CASB, CASAB, CASALB, CASLB</a>: Compare and Swap byte in memory.</right></line>
  <line><left></left><right><a href="cash.xml">CASH, CASAH, CASALH, CASLH</a>: Compare and Swap halfword in memory.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, </a></left><right><a href="cas.xml">CASL</a>: Compare and Swap word or doubleword in memory.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, CASALB, </a></left><right><a href="casb.xml">CASLB</a>: Compare and Swap byte in memory.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, CASALH, </a></left><right><a href="cash.xml">CASLH</a>: Compare and Swap halfword in memory.</right></line>
  <line><left></left><right><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and Swap Pair of words or doublewords in memory.</right></line>
  <line><left><a href="casp.xml">CASP, </a></left><right><a href="casp.xml">CASPA, CASPAL, CASPL</a>: Compare and Swap Pair of words or doublewords in memory.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, </a></left><right><a href="casp.xml">CASPAL, CASPL</a>: Compare and Swap Pair of words or doublewords in memory.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, </a></left><right><a href="casp.xml">CASPL</a>: Compare and Swap Pair of words or doublewords in memory.</right></line>
  <line><left></left><right><a href="cbnz.xml">CBNZ</a>: Compare and Branch on Nonzero.</right></line>
  <line><left></left><right><a href="cbz.xml">CBZ</a>: Compare and Branch on Zero.</right></line>
  <line><left></left><right><a href="ccmn_imm.xml">CCMN (immediate)</a>: Conditional Compare Negative (immediate).</right></line>
  <line><left></left><right><a href="ccmn_reg.xml">CCMN (register)</a>: Conditional Compare Negative (register).</right></line>
  <line><left></left><right><a href="ccmp_imm.xml">CCMP (immediate)</a>: Conditional Compare (immediate).</right></line>
  <line><left></left><right><a href="ccmp_reg.xml">CCMP (register)</a>: Conditional Compare (register).</right></line>
  <line><left><a href="dcps1.xml">DCPS1</a>: Debug </left><right>Change PE State to EL1..</right></line>
  <line><left><a href="dcps2.xml">DCPS2</a>: Debug </left><right>Change PE State to EL2..</right></line>
  <line><left><a href="dcps3.xml">DCPS3</a>: Debug </left><right>Change PE State to EL3.</right></line>
  <line><left><a href="crc32.xml">CRC32B, CRC32H, CRC32W, CRC32X</a>: CRC32 </left><right>checksum.</right></line>
  <line><left><a href="crc32c.xml">CRC32CB, CRC32CH, CRC32CW, CRC32CX</a>: CRC32C </left><right>checksum.</right></line>
  <line><left><a href="sha1c_advsimd.xml">SHA1C</a>: SHA1 hash update (</left><right>choose).</right></line>
  <line><left></left><right><a href="cinc_csinc.xml">CINC</a>: Conditional Increment: an alias of CSINC.</right></line>
  <line><left></left><right><a href="cinv_csinv.xml">CINV</a>: Conditional Invert: an alias of CSINV.</right></line>
  <line><left><a href="bics.xml">BICS (shifted register)</a>: Bitwise Bit </left><right>Clear (shifted register), setting flags.</right></line>
  <line><left><a href="bic_log_shift.xml">BIC (shifted register)</a>: Bitwise Bit </left><right>Clear (shifted register).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: Bitwise bit </left><right>Clear (vector, immediate).</right></line>
  <line><left><a href="bic_advsimd_reg.xml">BIC (vector, register)</a>: Bitwise bit </left><right>Clear (vector, register).</right></line>
  <line><left><a href="clrex.xml">CLREX</a>: </left><right>Clear Exclusive.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit </left><right>clear on byte in memory, without return.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit </left><right>clear on byte in memory.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit </left><right>clear on halfword in memory, without return.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit </left><right>clear on halfword in memory.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit </left><right>clear on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit </left><right>clear on word or doubleword in memory.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield </left><right>Clear, leaving other bits unchanged: an alias of BFM.</right></line>
  <line><left></left><right><a href="clrex.xml">CLREX</a>: Clear Exclusive.</right></line>
  <line><left></left><right><a href="cls_advsimd.xml">CLS (vector)</a>: Count Leading Sign bits (vector).</right></line>
  <line><left></left><right><a href="cls_int.xml">CLS</a>: Count leading sign bits.</right></line>
  <line><left></left><right><a href="clz_advsimd.xml">CLZ (vector)</a>: Count Leading Zero bits (vector).</right></line>
  <line><left></left><right><a href="clz_int.xml">CLZ</a>: Count leading zero bits.</right></line>
  <line><left></left><right><a href="cmeq_advsimd_reg.xml">CMEQ (register)</a>: Compare bitwise Equal (vector).</right></line>
  <line><left></left><right><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: Compare bitwise Equal to zero (vector).</right></line>
  <line><left></left><right><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: Compare signed Greater than or Equal (vector).</right></line>
  <line><left></left><right><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare signed Greater than or Equal to zero (vector).</right></line>
  <line><left></left><right><a href="cmgt_advsimd_reg.xml">CMGT (register)</a>: Compare signed Greater than (vector).</right></line>
  <line><left></left><right><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: Compare signed Greater than zero (vector).</right></line>
  <line><left></left><right><a href="cmhi_advsimd.xml">CMHI (register)</a>: Compare unsigned Higher (vector).</right></line>
  <line><left></left><right><a href="cmhs_advsimd.xml">CMHS (register)</a>: Compare unsigned Higher or Same (vector).</right></line>
  <line><left></left><right><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare signed Less than or Equal to zero (vector).</right></line>
  <line><left></left><right><a href="cmlt_advsimd.xml">CMLT (zero)</a>: Compare signed Less than zero (vector).</right></line>
  <line><left></left><right><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (extended register): an alias of ADDS (extended register).</right></line>
  <line><left></left><right><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (immediate): an alias of ADDS (immediate).</right></line>
  <line><left></left><right><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (shifted register): an alias of ADDS (shifted register).</right></line>
  <line><left></left><right><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (extended register): an alias of SUBS (extended register).</right></line>
  <line><left></left><right><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (immediate): an alias of SUBS (immediate).</right></line>
  <line><left></left><right><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (shifted register): an alias of SUBS (shifted register).</right></line>
  <line><left></left><right><a href="cmtst_advsimd.xml">CMTST</a>: Compare bitwise Test bits nonzero (vector).</right></line>
  <line><left></left><right><a href="cneg_csneg.xml">CNEG</a>: Conditional Negate: an alias of CSNEG.</right></line>
  <line><left></left><right><a href="cnt_advsimd.xml">CNT</a>: Population Count per byte.</right></line>
  <line><left><a href="aesimc_advsimd.xml">AESIMC</a>: AES inverse mix </left><right>columns.</right></line>
  <line><left><a href="aesmc_advsimd.xml">AESMC</a>: AES mix </left><right>columns.</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: </left><right>Compare (extended register): an alias of SUBS (extended register).</right></line>
  <line><left><a href="ccmp_imm.xml">CCMP (immediate)</a>: Conditional </left><right>Compare (immediate).</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: </left><right>Compare (immediate): an alias of SUBS (immediate).</right></line>
  <line><left><a href="ccmp_reg.xml">CCMP (register)</a>: Conditional </left><right>Compare (register).</right></line>
  <line><left><a href="fccmp_float.xml">FCCMP</a>: Floating-point Conditional quiet </left><right>Compare (scalar).</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: Floating-point Conditional signaling </left><right>Compare (scalar).</right></line>
  <line><left><a href="fcmp_float.xml">FCMP</a>: Floating-point quiet </left><right>Compare (scalar).</right></line>
  <line><left><a href="fcmpe_float.xml">FCMPE</a>: Floating-point signaling </left><right>Compare (scalar).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: </left><right>Compare (shifted register): an alias of SUBS (shifted register).</right></line>
  <line><left><a href="cbnz.xml">CBNZ</a>: </left><right>Compare and Branch on Nonzero.</right></line>
  <line><left><a href="cbz.xml">CBZ</a>: </left><right>Compare and Branch on Zero.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, CASALB, CASLB</a>: </left><right>Compare and Swap byte in memory.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, CASALH, CASLH</a>: </left><right>Compare and Swap halfword in memory.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: </left><right>Compare and Swap Pair of words or doublewords in memory.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: </left><right>Compare and Swap word or doubleword in memory.</right></line>
  <line><left><a href="cmeq_advsimd_reg.xml">CMEQ (register)</a>: </left><right>Compare bitwise Equal (vector).</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: </left><right>Compare bitwise Equal to zero (vector).</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: </left><right>Compare bitwise Test bits nonzero (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: Floating-point </left><right>Compare Equal (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-point </left><right>Compare Equal to zero (vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: Floating-point Absolute </left><right>Compare Greater than (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: Floating-point </left><right>Compare Greater than (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-point Absolute </left><right>Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-point </left><right>Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point </left><right>Compare Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-point </left><right>Compare Greater than zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point </left><right>Compare Less than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-point </left><right>Compare Less than zero (vector).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: </left><right>Compare Negative (extended register): an alias of ADDS (extended register).</right></line>
  <line><left><a href="ccmn_imm.xml">CCMN (immediate)</a>: Conditional </left><right>Compare Negative (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: </left><right>Compare Negative (immediate): an alias of ADDS (immediate).</right></line>
  <line><left><a href="ccmn_reg.xml">CCMN (register)</a>: Conditional </left><right>Compare Negative (register).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: </left><right>Compare Negative (shifted register): an alias of ADDS (shifted register).</right></line>
  <line><left><a href="cmgt_advsimd_reg.xml">CMGT (register)</a>: </left><right>Compare signed Greater than (vector).</right></line>
  <line><left><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: </left><right>Compare signed Greater than or Equal (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: </left><right>Compare signed Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: </left><right>Compare signed Greater than zero (vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: </left><right>Compare signed Less than or Equal to zero (vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (zero)</a>: </left><right>Compare signed Less than zero (vector).</right></line>
  <line><left><a href="cmhi_advsimd.xml">CMHI (register)</a>: </left><right>Compare unsigned Higher (vector).</right></line>
  <line><left><a href="cmhs_advsimd.xml">CMHS (register)</a>: </left><right>Compare unsigned Higher or Same (vector).</right></line>
  <line><left><a href="b_cond.xml">B.</a></left><right><a href="b_cond.xml">cond</a>: Branch conditionally.</right></line>
  <line><left><a href="ccmp_imm.xml">CCMP (immediate)</a>: </left><right>Conditional Compare (immediate).</right></line>
  <line><left><a href="ccmp_reg.xml">CCMP (register)</a>: </left><right>Conditional Compare (register).</right></line>
  <line><left><a href="ccmn_imm.xml">CCMN (immediate)</a>: </left><right>Conditional Compare Negative (immediate).</right></line>
  <line><left><a href="ccmn_reg.xml">CCMN (register)</a>: </left><right>Conditional Compare Negative (register).</right></line>
  <line><left><a href="cinc_csinc.xml">CINC</a>: </left><right>Conditional Increment: an alias of CSINC.</right></line>
  <line><left><a href="cinv_csinv.xml">CINV</a>: </left><right>Conditional Invert: an alias of CSINV.</right></line>
  <line><left><a href="cneg_csneg.xml">CNEG</a>: </left><right>Conditional Negate: an alias of CSNEG.</right></line>
  <line><left><a href="fccmp_float.xml">FCCMP</a>: Floating-point </left><right>Conditional quiet Compare (scalar).</right></line>
  <line><left><a href="fcsel_float.xml">FCSEL</a>: Floating-point </left><right>Conditional Select (scalar).</right></line>
  <line><left><a href="csinc.xml">CSINC</a>: </left><right>Conditional Select Increment.</right></line>
  <line><left><a href="csinv.xml">CSINV</a>: </left><right>Conditional Select Invert.</right></line>
  <line><left><a href="csneg.xml">CSNEG</a>: </left><right>Conditional Select Negation.</right></line>
  <line><left><a href="csel.xml">CSEL</a>: </left><right>Conditional Select.</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: </left><right>Conditional Set Mask: an alias of CSINV.</right></line>
  <line><left><a href="cset_csinc.xml">CSET</a>: </left><right>Conditional Set: an alias of CSINC.</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: Floating-point </left><right>Conditional signaling Compare (scalar).</right></line>
  <line><left><a href="b_cond.xml">B.cond</a>: Branch </left><right>conditionally.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point Move to or from general-purpose register without </left><right>conversion.</right></line>
  <line><left><a href="fmov_float.xml">FMOV (register)</a>: Floating-point Move register without </left><right>conversion.</right></line>
  <line><left><a href="fcvt_float.xml">FCVT</a>: Floating-point </left><right>Convert precision (scalar).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-point </left><right>Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed integer </left><right>Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-point </left><right>Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned integer </left><right>Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-point </left><right>Convert to Floating-point (vector).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed integer </left><right>Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-point </left><right>Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned integer </left><right>Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point </left><right>Convert to higher precision Long (vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point </left><right>Convert to lower precision Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point </left><right>Convert to lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point </left><right>Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point </left><right>Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point </left><right>Convert to Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point </left><right>Convert to Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point </left><right>Convert to Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point </left><right>Convert to Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point </left><right>Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point </left><right>Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point </left><right>Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point </left><right>Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (vector)</a>: </left><right>Count Leading Sign bits (vector).</right></line>
  <line><left><a href="cls_int.xml">CLS</a>: </left><right>Count leading sign bits.</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (vector)</a>: </left><right>Count Leading Zero bits (vector).</right></line>
  <line><left><a href="clz_int.xml">CLZ</a>: </left><right>Count leading zero bits.</right></line>
  <line><left><a href="cnt_advsimd.xml">CNT</a>: Population </left><right>Count per byte.</right></line>
  <line><left><a href="crc32.xml">CRC32B, CRC32H, CRC32W, CRC32X</a>: </left><right>CRC32 checksum.</right></line>
  <line><left></left><right><a href="crc32.xml">CRC32B, CRC32H, CRC32W, CRC32X</a>: CRC32 checksum.</right></line>
  <line><left><a href="crc32c.xml">CRC32CB, CRC32CH, CRC32CW, CRC32CX</a>: </left><right>CRC32C checksum.</right></line>
  <line><left></left><right><a href="crc32c.xml">CRC32CB, CRC32CH, CRC32CW, CRC32CX</a>: CRC32C checksum.</right></line>
  <line><left><a href="crc32c.xml">CRC32CB, </a></left><right><a href="crc32c.xml">CRC32CH, CRC32CW, CRC32CX</a>: CRC32C checksum.</right></line>
  <line><left><a href="crc32c.xml">CRC32CB, CRC32CH, </a></left><right><a href="crc32c.xml">CRC32CW, CRC32CX</a>: CRC32C checksum.</right></line>
  <line><left><a href="crc32c.xml">CRC32CB, CRC32CH, CRC32CW, </a></left><right><a href="crc32c.xml">CRC32CX</a>: CRC32C checksum.</right></line>
  <line><left><a href="crc32.xml">CRC32B, </a></left><right><a href="crc32.xml">CRC32H, CRC32W, CRC32X</a>: CRC32 checksum.</right></line>
  <line><left><a href="crc32.xml">CRC32B, CRC32H, </a></left><right><a href="crc32.xml">CRC32W, CRC32X</a>: CRC32 checksum.</right></line>
  <line><left><a href="crc32.xml">CRC32B, CRC32H, CRC32W, </a></left><right><a href="crc32.xml">CRC32X</a>: CRC32 checksum.</right></line>
  <line><left></left><right><a href="csel.xml">CSEL</a>: Conditional Select.</right></line>
  <line><left></left><right><a href="cset_csinc.xml">CSET</a>: Conditional Set: an alias of CSINC.</right></line>
  <line><left></left><right><a href="csetm_csinv.xml">CSETM</a>: Conditional Set Mask: an alias of CSINV.</right></line>
  <line><left><a href="cinc_csinc.xml">CINC</a>: Conditional Increment: an alias of </left><right>CSINC.</right></line>
  <line><left><a href="cset_csinc.xml">CSET</a>: Conditional Set: an alias of </left><right>CSINC.</right></line>
  <line><left></left><right><a href="csinc.xml">CSINC</a>: Conditional Select Increment.</right></line>
  <line><left><a href="cinv_csinv.xml">CINV</a>: Conditional Invert: an alias of </left><right>CSINV.</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: Conditional Set Mask: an alias of </left><right>CSINV.</right></line>
  <line><left></left><right><a href="csinv.xml">CSINV</a>: Conditional Select Invert.</right></line>
  <line><left><a href="cneg_csneg.xml">CNEG</a>: Conditional Negate: an alias of </left><right>CSNEG.</right></line>
  <line><left></left><right><a href="csneg.xml">CSNEG</a>: Conditional Select Negation.</right></line>
  <line><left><a href="psb.xml">PSB </a></left><right><a href="psb.xml">CSYNC</a>: Profiling Synchronization Barrier.</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, using </left><right>current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, using </left><right>current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, using </left><right>current rounding mode (vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, using </left><right>current rounding mode (vector).</right></line>
  <line initialtag="D"><left><a href="dc_sys.xml">DC</a>: </left><right>Data Cache operation: an alias of SYS.</right></line>
  <line><left><a href="dmb.xml">DMB</a>: </left><right>Data Memory Barrier.</right></line>
  <line><left><a href="dsb.xml">DSB</a>: </left><right>Data Synchronization Barrier.</right></line>
  <line><left></left><right><a href="dc_sys.xml">DC</a>: Data Cache operation: an alias of SYS.</right></line>
  <line><left></left><right><a href="dcps1.xml">DCPS1</a>: Debug Change PE State to EL1..</right></line>
  <line><left></left><right><a href="dcps2.xml">DCPS2</a>: Debug Change PE State to EL2..</right></line>
  <line><left></left><right><a href="dcps3.xml">DCPS3</a>: Debug Change PE State to EL3.</right></line>
  <line><left><a href="dcps1.xml">DCPS1</a>: </left><right>Debug Change PE State to EL1..</right></line>
  <line><left><a href="dcps2.xml">DCPS2</a>: </left><right>Debug Change PE State to EL2..</right></line>
  <line><left><a href="dcps3.xml">DCPS3</a>: </left><right>Debug Change PE State to EL3.</right></line>
  <line><left><a href="drps.xml">DRPS</a>: </left><right>Debug restore process state.</right></line>
  <line><left><a href="aesd_advsimd.xml">AESD</a>: AES single round </left><right>decryption.</right></line>
  <line><left><a href="fabd_advsimd.xml">FABD</a>: Floating-point Absolute </left><right>Difference (vector).</right></line>
  <line><left><a href="uabd_advsimd.xml">UABD</a>: Unsigned Absolute </left><right>Difference (vector).</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: Signed Absolute </left><right>difference and Accumulate Long.</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: Unsigned Absolute </left><right>difference and Accumulate Long.</right></line>
  <line><left><a href="saba_advsimd.xml">SABA</a>: Signed Absolute </left><right>difference and Accumulate.</right></line>
  <line><left><a href="uaba_advsimd.xml">UABA</a>: Unsigned Absolute </left><right>difference and Accumulate.</right></line>
  <line><left><a href="sabdl_advsimd.xml">SABDL, SABDL2</a>: Signed Absolute </left><right>Difference Long.</right></line>
  <line><left><a href="uabdl_advsimd.xml">UABDL, UABDL2</a>: Unsigned Absolute </left><right>Difference Long.</right></line>
  <line><left><a href="sabd_advsimd.xml">SABD</a>: Signed Absolute </left><right>Difference.</right></line>
  <line><left><a href="fdiv_float.xml">FDIV (scalar)</a>: Floating-point </left><right>Divide (scalar).</right></line>
  <line><left><a href="fdiv_advsimd.xml">FDIV (vector)</a>: Floating-point </left><right>Divide (vector).</right></line>
  <line><left><a href="sdiv.xml">SDIV</a>: Signed </left><right>Divide.</right></line>
  <line><left><a href="udiv.xml">UDIV</a>: Unsigned </left><right>Divide.</right></line>
  <line><left></left><right><a href="dmb.xml">DMB</a>: Data Memory Barrier.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on word or </left><right>doubleword in memory, without return.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: Compare and Swap word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic add on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit set on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, SWPAL, SWPL</a>: Swap word or </left><right>doubleword in memory.</right></line>
  <line><left><a href="rev64_advsimd.xml">REV64</a>: Reverse elements in 64-bit </left><right>doublewords (vector).</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and Swap Pair of words or </left><right>doublewords in memory.</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding </left><right>Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding </left><right>Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed saturating </left><right>Doubling Multiply Long (by element).</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: Signed saturating </left><right>Doubling Multiply Long.</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating </left><right>Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding </left><right>Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating </left><right>Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding </left><right>Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding </left><right>Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding </left><right>Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating </left><right>Doubling Multiply-Add Long (by element).</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed saturating </left><right>Doubling Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating </left><right>Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed saturating </left><right>Doubling Multiply-Subtract Long.</right></line>
  <line><left></left><right><a href="drps.xml">DRPS</a>: Debug restore process state.</right></line>
  <line><left></left><right><a href="dsb.xml">DSB</a>: Data Synchronization Barrier.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to scalar: an alias of </left><right>DUP (element).</right></line>
  <line><left></left><right><a href="dup_advsimd_elt.xml">DUP (element)</a>: Duplicate vector element to vector or scalar.</right></line>
  <line><left></left><right><a href="dup_advsimd_gen.xml">DUP (general)</a>: Duplicate general-purpose register to vector.</right></line>
  <line><left><a href="dup_advsimd_gen.xml">DUP (general)</a>: </left><right>Duplicate general-purpose register to vector.</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (element)</a>: </left><right>Duplicate vector element to vector or scalar.</right></line>
  <line initialtag="E"><left><a href="dcps1.xml">DCPS1</a>: Debug Change PE State to </left><right>EL1..</right></line>
  <line><left><a href="dcps2.xml">DCPS2</a>: Debug Change PE State to </left><right>EL2..</right></line>
  <line><left><a href="dcps3.xml">DCPS3</a>: Debug Change PE State to </left><right>EL3.</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert vector </left><right>element from another vector element.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (general)</a>: Insert vector </left><right>element from general-purpose register.</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, SHLL2</a>: Shift Left Long (by </left><right>element size).</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-</left><right>element structure and Replicate to all lanes (of one register).</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-</left><right>element structure from one lane of one register.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-</left><right>element structure to one lane of one register.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-</left><right>element structures from one, two, three, or four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-</left><right>element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector </left><right>element to another vector element: an alias of INS (element).</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: Signed Move vector </left><right>element to general-purpose register.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: Unsigned Move vector </left><right>element to general-purpose register.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector </left><right>element to general-purpose register: an alias of UMOV.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector </left><right>element to scalar: an alias of DUP (element).</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (element)</a>: Duplicate vector </left><right>element to vector or scalar.</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point fused Multiply-Add to accumulator (by </left><right>element).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point fused Multiply-Subtract from accumulator (by </left><right>element).</right></line>
  <line><left><a href="fmul_advsimd_elt.xml">FMUL (by element)</a>: Floating-point Multiply (by </left><right>element).</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: Floating-point Multiply extended (by </left><right>element).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by element)</a>: Multiply-Add to accumulator (vector, by </left><right>element).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by element)</a>: Multiply-Subtract from accumulator (vector, by </left><right>element).</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector element: an alias of INS (</left><right>element).</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to scalar: an alias of DUP (</left><right>element).</right></line>
  <line><left><a href="mul_advsimd_elt.xml">MUL (by element)</a>: Multiply (vector, by </left><right>element).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed Multiply-Add Long (vector, by </left><right>element).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed Multiply-Subtract Long (vector, by </left><right>element).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: Signed Multiply Long (vector, by </left><right>element).</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating Doubling Multiply-Add Long (by </left><right>element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating Doubling Multiply-Subtract Long (by </left><right>element).</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling Multiply returning High half (by </left><right>element).</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed saturating Doubling Multiply Long (by </left><right>element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by </left><right>element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by </left><right>element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling Multiply returning High half (by </left><right>element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned Multiply-Add Long (vector, by </left><right>element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned Multiply-Subtract Long (vector, by </left><right>element).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: Unsigned Multiply Long (vector, by </left><right>element).</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (</a></left><right><a href="dup_advsimd_elt.xml">element)</a>: Duplicate vector element to vector or scalar.</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by </a></left><right><a href="fmla_advsimd_elt.xml">element)</a>: Floating-point fused Multiply-Add to accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by </a></left><right><a href="fmls_advsimd_elt.xml">element)</a>: Floating-point fused Multiply-Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmul_advsimd_elt.xml">FMUL (by </a></left><right><a href="fmul_advsimd_elt.xml">element)</a>: Floating-point Multiply (by element).</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by </a></left><right><a href="fmulx_advsimd_elt.xml">element)</a>: Floating-point Multiply extended (by element).</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (</a></left><right><a href="ins_advsimd_elt.xml">element)</a>: Insert vector element from another vector element.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (</a></left><right><a href="mov_ins_advsimd_elt.xml">element)</a>: Move vector element to another vector element: an alias of INS (element).</right></line>
  <line><left><a href="mul_advsimd_elt.xml">MUL (by </a></left><right><a href="mul_advsimd_elt.xml">element)</a>: Multiply (vector, by element).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by </a></left><right><a href="mla_advsimd_elt.xml">element)</a>: Multiply-Add to accumulator (vector, by element).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by </a></left><right><a href="mls_advsimd_elt.xml">element)</a>: Multiply-Subtract from accumulator (vector, by element).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by </a></left><right><a href="smull_advsimd_elt.xml">element)</a>: Signed Multiply Long (vector, by element).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by </a></left><right><a href="smlal_advsimd_elt.xml">element)</a>: Signed Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by </a></left><right><a href="smlsl_advsimd_elt.xml">element)</a>: Signed Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by </a></left><right><a href="sqdmull_advsimd_elt.xml">element)</a>: Signed saturating Doubling Multiply Long (by element).</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by </a></left><right><a href="sqdmulh_advsimd_elt.xml">element)</a>: Signed saturating Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by </a></left><right><a href="sqdmlal_advsimd_elt.xml">element)</a>: Signed saturating Doubling Multiply-Add Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by </a></left><right><a href="sqdmlsl_advsimd_elt.xml">element)</a>: Signed saturating Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by </a></left><right><a href="sqrdmlah_advsimd_elt.xml">element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by </a></left><right><a href="sqrdmulh_advsimd_elt.xml">element)</a>: Signed saturating Rounding Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by </a></left><right><a href="sqrdmlsh_advsimd_elt.xml">element)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by </a></left><right><a href="umull_advsimd_elt.xml">element)</a>: Unsigned Multiply Long (vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by </a></left><right><a href="umlal_advsimd_elt.xml">element)</a>: Unsigned Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by </a></left><right><a href="umlsl_advsimd_elt.xml">element)</a>: Unsigned Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert vector element from another vector </left><right>element.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector </left><right>element: an alias of INS (element).</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector </left><right>element: an alias of INS (general).</right></line>
  <line><left><a href="addp_advsimd_pair.xml">ADDP (scalar)</a>: Add Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-point Add Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point Maximum Number of Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-point Maximum of Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point Minimum Number of Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-point Minimum of Pair of </left><right>elements (scalar).</right></line>
  <line><left><a href="rev16_advsimd.xml">REV16 (vector)</a>: Reverse </left><right>elements in 16-bit halfwords (vector).</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (vector)</a>: Reverse </left><right>elements in 32-bit words (vector).</right></line>
  <line><left><a href="rev64_advsimd.xml">REV64</a>: Reverse </left><right>elements in 64-bit doublewords (vector).</right></line>
  <line><left><a href="aese_advsimd.xml">AESE</a>: AES single round </left><right>encryption.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at low </left><right>end: an alias of BFM.</right></line>
  <line><left></left><right><a href="eon.xml">EON (shifted register)</a>: Bitwise Exclusive OR NOT (shifted register).</right></line>
  <line><left></left><right><a href="eor_log_imm.xml">EOR (immediate)</a>: Bitwise Exclusive OR (immediate).</right></line>
  <line><left></left><right><a href="eor_log_shift.xml">EOR (shifted register)</a>: Bitwise Exclusive OR (shifted register).</right></line>
  <line><left></left><right><a href="eor_advsimd.xml">EOR (vector)</a>: Bitwise Exclusive OR (vector).</right></line>
  <line><left><a href="cmeq_advsimd_reg.xml">CMEQ (register)</a>: Compare bitwise </left><right>Equal (vector).</right></line>
  <line><left><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: Compare signed Greater than or </left><right>Equal (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-point Absolute Compare Greater than or </left><right>Equal (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: Floating-point Compare </left><right>Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-point Compare Greater than or </left><right>Equal (vector).</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: Compare bitwise </left><right>Equal to zero (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare signed Greater than or </left><right>Equal to zero (vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare signed Less than or </left><right>Equal to zero (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-point Compare </left><right>Equal to zero (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point Compare Greater than or </left><right>Equal to zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point Compare Less than or </left><right>Equal to zero (vector).</right></line>
  <line><left></left><right><a href="eret.xml">ERET</a>: Exception Return.</right></line>
  <line><left><a href="esb.xml">ESB</a>: </left><right>Error Synchronization Barrier.</right></line>
  <line><left></left><right><a href="esb.xml">ESB</a>: Error Synchronization Barrier.</right></line>
  <line><left><a href="frecpe_advsimd.xml">FRECPE</a>: Floating-point Reciprocal </left><right>Estimate.</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-point Reciprocal Square Root </left><right>Estimate.</right></line>
  <line><left><a href="urecpe_advsimd.xml">URECPE</a>: Unsigned Reciprocal </left><right>Estimate.</right></line>
  <line><left><a href="ursqrte_advsimd.xml">URSQRTE</a>: Unsigned Reciprocal Square Root </left><right>Estimate.</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to </left><right>even (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to </left><right>even (scalar).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to Integral, to nearest with ties to </left><right>even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to </left><right>even (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to </left><right>even (vector).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to Integral, to nearest with ties to </left><right>even (vector).</right></line>
  <line><left><a href="sevl.xml">SEVL</a>: Send </left><right>Event Local.</right></line>
  <line><left><a href="sev.xml">SEV</a>: Send </left><right>Event.</right></line>
  <line><left><a href="wfe.xml">WFE</a>: Wait For </left><right>Event.</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral </left><right>exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral </left><right>exact, using current rounding mode (vector).</right></line>
  <line><left><a href="eret.xml">ERET</a>: </left><right>Exception Return.</right></line>
  <line><left><a href="eor_log_imm.xml">EOR (immediate)</a>: Bitwise </left><right>Exclusive OR (immediate).</right></line>
  <line><left><a href="eor_log_shift.xml">EOR (shifted register)</a>: Bitwise </left><right>Exclusive OR (shifted register).</right></line>
  <line><left><a href="eor_advsimd.xml">EOR (vector)</a>: Bitwise </left><right>Exclusive OR (vector).</right></line>
  <line><left><a href="eon.xml">EON (shifted register)</a>: Bitwise </left><right>Exclusive OR NOT (shifted register).</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic </left><right>exclusive OR on byte in memory, without return.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic </left><right>exclusive OR on byte in memory.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic </left><right>exclusive OR on halfword in memory, without return.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic </left><right>exclusive OR on halfword in memory.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic </left><right>exclusive OR on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic </left><right>exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="ldaxp.xml">LDAXP</a>: Load-Acquire </left><right>Exclusive Pair of Registers.</right></line>
  <line><left><a href="ldxp.xml">LDXP</a>: Load </left><right>Exclusive Pair of Registers.</right></line>
  <line><left><a href="stlxp.xml">STLXP</a>: Store-Release </left><right>Exclusive Pair of registers.</right></line>
  <line><left><a href="stxp.xml">STXP</a>: Store </left><right>Exclusive Pair of registers.</right></line>
  <line><left><a href="ldaxrb.xml">LDAXRB</a>: Load-Acquire </left><right>Exclusive Register Byte.</right></line>
  <line><left><a href="ldxrb.xml">LDXRB</a>: Load </left><right>Exclusive Register Byte.</right></line>
  <line><left><a href="stlxrb.xml">STLXRB</a>: Store-Release </left><right>Exclusive Register Byte.</right></line>
  <line><left><a href="stxrb.xml">STXRB</a>: Store </left><right>Exclusive Register Byte.</right></line>
  <line><left><a href="ldaxrh.xml">LDAXRH</a>: Load-Acquire </left><right>Exclusive Register Halfword.</right></line>
  <line><left><a href="ldxrh.xml">LDXRH</a>: Load </left><right>Exclusive Register Halfword.</right></line>
  <line><left><a href="stlxrh.xml">STLXRH</a>: Store-Release </left><right>Exclusive Register Halfword.</right></line>
  <line><left><a href="stxrh.xml">STXRH</a>: Store </left><right>Exclusive Register Halfword.</right></line>
  <line><left><a href="ldaxr.xml">LDAXR</a>: Load-Acquire </left><right>Exclusive Register.</right></line>
  <line><left><a href="ldxr.xml">LDXR</a>: Load </left><right>Exclusive Register.</right></line>
  <line><left><a href="stlxr.xml">STLXR</a>: Store-Release </left><right>Exclusive Register.</right></line>
  <line><left><a href="stxr.xml">STXR</a>: Store </left><right>Exclusive Register.</right></line>
  <line><left><a href="clrex.xml">CLREX</a>: Clear </left><right>Exclusive.</right></line>
  <line><left><a href="frecpx_advsimd.xml">FRECPX</a>: Floating-point Reciprocal </left><right>exponent (scalar).</right></line>
  <line><left></left><right><a href="ext_advsimd.xml">EXT</a>: Extract vector from pair of vectors.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: Signed </left><right>Extend Byte: an alias of SBFM.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned </left><right>Extend Byte: an alias of UBFM.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: Sign </left><right>Extend Halfword: an alias of SBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: Unsigned </left><right>Extend Halfword: an alias of UBFM.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed </left><right>extend Long: an alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned </left><right>extend Long: an alias of USHLL, USHLL2.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: Sign </left><right>Extend Word: an alias of SBFM.</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: Floating-point Multiply </left><right>extended (by element).</right></line>
  <line><left><a href="adds_addsub_ext.xml">ADDS (extended register)</a>: Add (</left><right>extended register), setting flags.</right></line>
  <line><left><a href="subs_addsub_ext.xml">SUBS (extended register)</a>: Subtract (</left><right>extended register), setting flags.</right></line>
  <line><left><a href="add_addsub_ext.xml">ADD (extended register)</a>: Add (</left><right>extended register).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (extended register): an alias of ADDS (</left><right>extended register).</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (extended register): an alias of SUBS (</left><right>extended register).</right></line>
  <line><left><a href="sub_addsub_ext.xml">SUB (extended register)</a>: Subtract (</left><right>extended register).</right></line>
  <line><left><a href="adds_addsub_ext.xml">ADDS (</a></left><right><a href="adds_addsub_ext.xml">extended register)</a>: Add (extended register), setting flags.</right></line>
  <line><left><a href="add_addsub_ext.xml">ADD (</a></left><right><a href="add_addsub_ext.xml">extended register)</a>: Add (extended register).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare Negative (</left><right>extended register): an alias of ADDS (extended register).</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (</left><right>extended register): an alias of SUBS (extended register).</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (</a></left><right><a href="cmp_subs_addsub_ext.xml">extended register)</a>: Compare (extended register): an alias of SUBS (extended register).</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (</a></left><right><a href="cmn_adds_addsub_ext.xml">extended register)</a>: Compare Negative (extended register): an alias of ADDS (extended register).</right></line>
  <line><left><a href="subs_addsub_ext.xml">SUBS (</a></left><right><a href="subs_addsub_ext.xml">extended register)</a>: Subtract (extended register), setting flags.</right></line>
  <line><left><a href="sub_addsub_ext.xml">SUB (</a></left><right><a href="sub_addsub_ext.xml">extended register)</a>: Subtract (extended register).</right></line>
  <line><left><a href="fmulx_advsimd_vec.xml">FMULX</a>: Floating-point Multiply </left><right>extended.</right></line>
  <line><left><a href="tbx_advsimd.xml">TBX</a>: Table vector lookup </left><right>extension.</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: Rotate right (immediate): an alias of </left><right>EXTR.</right></line>
  <line><left></left><right><a href="extr.xml">EXTR</a>: Extract register.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield </left><right>extract and insert at low end: an alias of BFM.</right></line>
  <line><left><a href="sqxtn_advsimd.xml">SQXTN, SQXTN2</a>: Signed saturating </left><right>extract Narrow.</right></line>
  <line><left><a href="uqxtn_advsimd.xml">UQXTN, UQXTN2</a>: Unsigned saturating </left><right>extract Narrow.</right></line>
  <line><left><a href="xtn_advsimd.xml">XTN, XTN2</a>: </left><right>Extract Narrow.</right></line>
  <line><left><a href="extr.xml">EXTR</a>: </left><right>Extract register.</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: Signed saturating </left><right>extract Unsigned Narrow.</right></line>
  <line><left><a href="ext_advsimd.xml">EXT</a>: </left><right>Extract vector from pair of vectors.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: Signed Bitfield </left><right>Extract: an alias of SBFM.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned Bitfield </left><right>Extract: an alias of UBFM.</right></line>
  <line initialtag="F"><left></left><right><a href="fabd_advsimd.xml">FABD</a>: Floating-point Absolute Difference (vector).</right></line>
  <line><left></left><right><a href="fabs_float.xml">FABS (scalar)</a>: Floating-point Absolute value (scalar).</right></line>
  <line><left></left><right><a href="fabs_advsimd.xml">FABS (vector)</a>: Floating-point Absolute value (vector).</right></line>
  <line><left></left><right><a href="facge_advsimd.xml">FACGE</a>: Floating-point Absolute Compare Greater than or Equal (vector).</right></line>
  <line><left></left><right><a href="facgt_advsimd.xml">FACGT</a>: Floating-point Absolute Compare Greater than (vector).</right></line>
  <line><left></left><right><a href="fadd_float.xml">FADD (scalar)</a>: Floating-point Add (scalar).</right></line>
  <line><left></left><right><a href="fadd_advsimd.xml">FADD (vector)</a>: Floating-point Add (vector).</right></line>
  <line><left></left><right><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-point Add Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: Floating-point Add Pairwise (vector).</right></line>
  <line><left><a href="bif_advsimd.xml">BIF</a>: Bitwise Insert if </left><right>False.</right></line>
  <line><left></left><right><a href="fccmp_float.xml">FCCMP</a>: Floating-point Conditional quiet Compare (scalar).</right></line>
  <line><left></left><right><a href="fccmpe_float.xml">FCCMPE</a>: Floating-point Conditional signaling Compare (scalar).</right></line>
  <line><left></left><right><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: Floating-point Compare Equal (vector).</right></line>
  <line><left></left><right><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-point Compare Equal to zero (vector).</right></line>
  <line><left></left><right><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-point Compare Greater than or Equal (vector).</right></line>
  <line><left></left><right><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point Compare Greater than or Equal to zero (vector).</right></line>
  <line><left></left><right><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: Floating-point Compare Greater than (vector).</right></line>
  <line><left></left><right><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-point Compare Greater than zero (vector).</right></line>
  <line><left></left><right><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point Compare Less than or Equal to zero (vector).</right></line>
  <line><left></left><right><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-point Compare Less than zero (vector).</right></line>
  <line><left></left><right><a href="fcmp_float.xml">FCMP</a>: Floating-point quiet Compare (scalar).</right></line>
  <line><left></left><right><a href="fcmpe_float.xml">FCMPE</a>: Floating-point signaling Compare (scalar).</right></line>
  <line><left></left><right><a href="fcsel_float.xml">FCSEL</a>: Floating-point Conditional Select (scalar).</right></line>
  <line><left></left><right><a href="fcvt_float.xml">FCVT</a>: Floating-point Convert precision (scalar).</right></line>
  <line><left></left><right><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left></left><right><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left></left><right><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left></left><right><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left></left><right><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point Convert to higher precision Long (vector).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, </a></left><right><a href="fcvtl_advsimd.xml">FCVTL2</a>: Floating-point Convert to higher precision Long (vector).</right></line>
  <line><left></left><right><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left></left><right><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left></left><right><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left></left><right><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left></left><right><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point Convert to lower precision Narrow (vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, </a></left><right><a href="fcvtn_advsimd.xml">FCVTN2</a>: Floating-point Convert to lower precision Narrow (vector).</right></line>
  <line><left></left><right><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left></left><right><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left></left><right><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left></left><right><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left></left><right><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left></left><right><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left></left><right><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left></left><right><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left></left><right><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, </a></left><right><a href="fcvtxn_advsimd.xml">FCVTXN2</a>: Floating-point Convert to lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left></left><right><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left></left><right><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left></left><right><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left></left><right><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left></left><right><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left></left><right><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left></left><right><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left></left><right><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left></left><right><a href="fdiv_float.xml">FDIV (scalar)</a>: Floating-point Divide (scalar).</right></line>
  <line><left></left><right><a href="fdiv_advsimd.xml">FDIV (vector)</a>: Floating-point Divide (vector).</right></line>
  <line><left><a href="sha1h_advsimd.xml">SHA1H</a>: SHA1 </left><right>fixed rotate.</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed </left><right>fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned </left><right>fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed </left><right>fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned </left><right>fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, </a></left><right><a href="fcvtzs_float_fix.xml">fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, </a></left><right><a href="fcvtzs_advsimd_fix.xml">fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, </a></left><right><a href="fcvtzu_float_fix.xml">fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, </a></left><right><a href="fcvtzu_advsimd_fix.xml">fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, </a></left><right><a href="scvtf_float_fix.xml">fixed-point)</a>: Signed fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, </a></left><right><a href="scvtf_advsimd_fix.xml">fixed-point)</a>: Signed fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, </a></left><right><a href="ucvtf_float_fix.xml">fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, </a></left><right><a href="ucvtf_advsimd_fix.xml">fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed </left><right>fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned </left><right>fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed </left><right>fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned </left><right>fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="adcs.xml">ADCS</a>: Add with Carry, setting </left><right>flags.</right></line>
  <line><left><a href="adds_addsub_ext.xml">ADDS (extended register)</a>: Add (extended register), setting </left><right>flags.</right></line>
  <line><left><a href="adds_addsub_imm.xml">ADDS (immediate)</a>: Add (immediate), setting </left><right>flags.</right></line>
  <line><left><a href="adds_addsub_shift.xml">ADDS (shifted register)</a>: Add (shifted register), setting </left><right>flags.</right></line>
  <line><left><a href="ands_log_imm.xml">ANDS (immediate)</a>: Bitwise AND (immediate), setting </left><right>flags.</right></line>
  <line><left><a href="ands_log_shift.xml">ANDS (shifted register)</a>: Bitwise AND (shifted register), setting </left><right>flags.</right></line>
  <line><left><a href="bics.xml">BICS (shifted register)</a>: Bitwise Bit Clear (shifted register), setting </left><right>flags.</right></line>
  <line><left><a href="sbcs.xml">SBCS</a>: Subtract with Carry, setting </left><right>flags.</right></line>
  <line><left><a href="subs_addsub_ext.xml">SUBS (extended register)</a>: Subtract (extended register), setting </left><right>flags.</right></line>
  <line><left><a href="subs_addsub_imm.xml">SUBS (immediate)</a>: Subtract (immediate), setting </left><right>flags.</right></line>
  <line><left><a href="subs_addsub_shift.xml">SUBS (shifted register)</a>: Subtract (shifted register), setting </left><right>flags.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: Negate with Carry, setting </left><right>flags: an alias of SBCS.</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting </left><right>flags: an alias of SUBS (shifted register).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-point Convert to </left><right>Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed integer Convert to </left><right>Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-point Convert to </left><right>Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned integer Convert to </left><right>Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-point Convert to </left><right>Floating-point (vector).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed integer Convert to </left><right>Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-point Convert to </left><right>Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned integer Convert to </left><right>Floating-point (vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: </left><right>Floating-point Absolute Compare Greater than (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: </left><right>Floating-point Absolute Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fabd_advsimd.xml">FABD</a>: </left><right>Floating-point Absolute Difference (vector).</right></line>
  <line><left><a href="fabs_float.xml">FABS (scalar)</a>: </left><right>Floating-point Absolute value (scalar).</right></line>
  <line><left><a href="fabs_advsimd.xml">FABS (vector)</a>: </left><right>Floating-point Absolute value (vector).</right></line>
  <line><left><a href="fadd_float.xml">FADD (scalar)</a>: </left><right>Floating-point Add (scalar).</right></line>
  <line><left><a href="fadd_advsimd.xml">FADD (vector)</a>: </left><right>Floating-point Add (vector).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: </left><right>Floating-point Add Pair of elements (scalar).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: </left><right>Floating-point Add Pairwise (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: </left><right>Floating-point Compare Equal (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: </left><right>Floating-point Compare Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: </left><right>Floating-point Compare Greater than (vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: </left><right>Floating-point Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: </left><right>Floating-point Compare Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: </left><right>Floating-point Compare Greater than zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: </left><right>Floating-point Compare Less than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: </left><right>Floating-point Compare Less than zero (vector).</right></line>
  <line><left><a href="fccmp_float.xml">FCCMP</a>: </left><right>Floating-point Conditional quiet Compare (scalar).</right></line>
  <line><left><a href="fcsel_float.xml">FCSEL</a>: </left><right>Floating-point Conditional Select (scalar).</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: </left><right>Floating-point Conditional signaling Compare (scalar).</right></line>
  <line><left><a href="fcvt_float.xml">FCVT</a>: </left><right>Floating-point Convert precision (scalar).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: </left><right>Floating-point Convert to higher precision Long (vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: </left><right>Floating-point Convert to lower precision Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: </left><right>Floating-point Convert to lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: </left><right>Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: </left><right>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: </left><right>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: </left><right>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: </left><right>Floating-point Convert to Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: </left><right>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: </left><right>Floating-point Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: </left><right>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: </left><right>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: </left><right>Floating-point Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fdiv_float.xml">FDIV (scalar)</a>: </left><right>Floating-point Divide (scalar).</right></line>
  <line><left><a href="fdiv_advsimd.xml">FDIV (vector)</a>: </left><right>Floating-point Divide (vector).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: </left><right>Floating-point fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: </left><right>Floating-point fused Multiply-Add to accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: </left><right>Floating-point fused Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: </left><right>Floating-point Fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: </left><right>Floating-point fused Multiply-Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: </left><right>Floating-point fused Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="fmax_float.xml">FMAX (scalar)</a>: </left><right>Floating-point Maximum (scalar).</right></line>
  <line><left><a href="fmax_advsimd.xml">FMAX (vector)</a>: </left><right>Floating-point Maximum (vector).</right></line>
  <line><left><a href="fmaxv_advsimd.xml">FMAXV</a>: </left><right>Floating-point Maximum across Vector.</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: </left><right>Floating-point Maximum Number (scalar).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: </left><right>Floating-point Maximum Number (vector).</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: </left><right>Floating-point Maximum Number across Vector.</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: </left><right>Floating-point Maximum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: </left><right>Floating-point Maximum Number Pairwise (vector).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: </left><right>Floating-point Maximum of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: </left><right>Floating-point Maximum Pairwise (vector).</right></line>
  <line><left><a href="fmin_float.xml">FMIN (scalar)</a>: </left><right>Floating-point Minimum (scalar).</right></line>
  <line><left><a href="fmin_advsimd.xml">FMIN (vector)</a>: </left><right>Floating-point minimum (vector).</right></line>
  <line><left><a href="fminv_advsimd.xml">FMINV</a>: </left><right>Floating-point Minimum across Vector.</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (scalar)</a>: </left><right>Floating-point Minimum Number (scalar).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: </left><right>Floating-point Minimum Number (vector).</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: </left><right>Floating-point Minimum Number across Vector.</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: </left><right>Floating-point Minimum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: </left><right>Floating-point Minimum Number Pairwise (vector).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: </left><right>Floating-point Minimum of Pair of elements (scalar).</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: </left><right>Floating-point Minimum Pairwise (vector).</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: </left><right>Floating-point move immediate (scalar).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: </left><right>Floating-point move immediate (vector).</right></line>
  <line><left><a href="fmov_float.xml">FMOV (register)</a>: </left><right>Floating-point Move register without conversion.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: </left><right>Floating-point Move to or from general-purpose register without conversion.</right></line>
  <line><left><a href="fmul_advsimd_elt.xml">FMUL (by element)</a>: </left><right>Floating-point Multiply (by element).</right></line>
  <line><left><a href="fmul_float.xml">FMUL (scalar)</a>: </left><right>Floating-point Multiply (scalar).</right></line>
  <line><left><a href="fmul_advsimd_vec.xml">FMUL (vector)</a>: </left><right>Floating-point Multiply (vector).</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: </left><right>Floating-point Multiply extended (by element).</right></line>
  <line><left><a href="fmulx_advsimd_vec.xml">FMULX</a>: </left><right>Floating-point Multiply extended.</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (scalar)</a>: </left><right>Floating-point Multiply-Negate (scalar).</right></line>
  <line><left><a href="fneg_float.xml">FNEG (scalar)</a>: </left><right>Floating-point Negate (scalar).</right></line>
  <line><left><a href="fneg_advsimd.xml">FNEG (vector)</a>: </left><right>Floating-point Negate (vector).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: </left><right>Floating-point Negated fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: </left><right>Floating-point Negated fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fcmp_float.xml">FCMP</a>: </left><right>Floating-point quiet Compare (scalar).</right></line>
  <line><left><a href="frecpe_advsimd.xml">FRECPE</a>: </left><right>Floating-point Reciprocal Estimate.</right></line>
  <line><left><a href="frecpx_advsimd.xml">FRECPX</a>: </left><right>Floating-point Reciprocal exponent (scalar).</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: </left><right>Floating-point Reciprocal Square Root Estimate.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: </left><right>Floating-point Reciprocal Square Root Step.</right></line>
  <line><left><a href="frecps_advsimd.xml">FRECPS</a>: </left><right>Floating-point Reciprocal Step.</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: </left><right>Floating-point Round to Integral exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: </left><right>Floating-point Round to Integral exact, using current rounding mode (vector).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: </left><right>Floating-point Round to Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: </left><right>Floating-point Round to Integral, to nearest with ties to Away (vector).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: </left><right>Floating-point Round to Integral, to nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: </left><right>Floating-point Round to Integral, to nearest with ties to even (vector).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: </left><right>Floating-point Round to Integral, toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: </left><right>Floating-point Round to Integral, toward Minus infinity (vector).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: </left><right>Floating-point Round to Integral, toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: </left><right>Floating-point Round to Integral, toward Plus infinity (vector).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: </left><right>Floating-point Round to Integral, toward Zero (scalar).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: </left><right>Floating-point Round to Integral, toward Zero (vector).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: </left><right>Floating-point Round to Integral, using current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: </left><right>Floating-point Round to Integral, using current rounding mode (vector).</right></line>
  <line><left><a href="fcmpe_float.xml">FCMPE</a>: </left><right>Floating-point signaling Compare (scalar).</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (scalar)</a>: </left><right>Floating-point Square Root (scalar).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: </left><right>Floating-point Square Root (vector).</right></line>
  <line><left><a href="fsub_float.xml">FSUB (scalar)</a>: </left><right>Floating-point Subtract (scalar).</right></line>
  <line><left><a href="fsub_advsimd.xml">FSUB (vector)</a>: </left><right>Floating-point Subtract (vector).</right></line>
  <line><left></left><right><a href="fmadd_float.xml">FMADD</a>: Floating-point fused Multiply-Add (scalar).</right></line>
  <line><left></left><right><a href="fmax_float.xml">FMAX (scalar)</a>: Floating-point Maximum (scalar).</right></line>
  <line><left></left><right><a href="fmax_advsimd.xml">FMAX (vector)</a>: Floating-point Maximum (vector).</right></line>
  <line><left></left><right><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: Floating-point Maximum Number (scalar).</right></line>
  <line><left></left><right><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: Floating-point Maximum Number (vector).</right></line>
  <line><left></left><right><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point Maximum Number of Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-point Maximum Number Pairwise (vector).</right></line>
  <line><left></left><right><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-point Maximum Number across Vector.</right></line>
  <line><left></left><right><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-point Maximum of Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: Floating-point Maximum Pairwise (vector).</right></line>
  <line><left></left><right><a href="fmaxv_advsimd.xml">FMAXV</a>: Floating-point Maximum across Vector.</right></line>
  <line><left></left><right><a href="fmin_float.xml">FMIN (scalar)</a>: Floating-point Minimum (scalar).</right></line>
  <line><left></left><right><a href="fmin_advsimd.xml">FMIN (vector)</a>: Floating-point minimum (vector).</right></line>
  <line><left></left><right><a href="fminnm_float.xml">FMINNM (scalar)</a>: Floating-point Minimum Number (scalar).</right></line>
  <line><left></left><right><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: Floating-point Minimum Number (vector).</right></line>
  <line><left></left><right><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point Minimum Number of Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-point Minimum Number Pairwise (vector).</right></line>
  <line><left></left><right><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-point Minimum Number across Vector.</right></line>
  <line><left></left><right><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-point Minimum of Pair of elements (scalar).</right></line>
  <line><left></left><right><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: Floating-point Minimum Pairwise (vector).</right></line>
  <line><left></left><right><a href="fminv_advsimd.xml">FMINV</a>: Floating-point Minimum across Vector.</right></line>
  <line><left></left><right><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point fused Multiply-Add to accumulator (by element).</right></line>
  <line><left></left><right><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point fused Multiply-Add to accumulator (vector).</right></line>
  <line><left></left><right><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point fused Multiply-Subtract from accumulator (by element).</right></line>
  <line><left></left><right><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point fused Multiply-Subtract from accumulator (vector).</right></line>
  <line><left></left><right><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point Move to or from general-purpose register without conversion.</right></line>
  <line><left></left><right><a href="fmov_float.xml">FMOV (register)</a>: Floating-point Move register without conversion.</right></line>
  <line><left></left><right><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: Floating-point move immediate (scalar).</right></line>
  <line><left></left><right><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: Floating-point move immediate (vector).</right></line>
  <line><left></left><right><a href="fmsub_float.xml">FMSUB</a>: Floating-point Fused Multiply-Subtract (scalar).</right></line>
  <line><left></left><right><a href="fmul_advsimd_elt.xml">FMUL (by element)</a>: Floating-point Multiply (by element).</right></line>
  <line><left></left><right><a href="fmul_float.xml">FMUL (scalar)</a>: Floating-point Multiply (scalar).</right></line>
  <line><left></left><right><a href="fmul_advsimd_vec.xml">FMUL (vector)</a>: Floating-point Multiply (vector).</right></line>
  <line><left></left><right><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: Floating-point Multiply extended (by element).</right></line>
  <line><left></left><right><a href="fmulx_advsimd_vec.xml">FMULX</a>: Floating-point Multiply extended.</right></line>
  <line><left></left><right><a href="fneg_float.xml">FNEG (scalar)</a>: Floating-point Negate (scalar).</right></line>
  <line><left></left><right><a href="fneg_advsimd.xml">FNEG (vector)</a>: Floating-point Negate (vector).</right></line>
  <line><left></left><right><a href="fnmadd_float.xml">FNMADD</a>: Floating-point Negated fused Multiply-Add (scalar).</right></line>
  <line><left></left><right><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point Negated fused Multiply-Subtract (scalar).</right></line>
  <line><left></left><right><a href="fnmul_float.xml">FNMUL (scalar)</a>: Floating-point Multiply-Negate (scalar).</right></line>
  <line><left><a href="wfe.xml">WFE</a>: Wait </left><right>For Event.</right></line>
  <line><left><a href="wfi.xml">WFI</a>: Wait </left><right>For Interrupt.</right></line>
  <line><left><a href="adrp.xml">ADRP</a>: </left><right>Form PC-relative address to 4KB page.</right></line>
  <line><left><a href="adr.xml">ADR</a>: </left><right>Form PC-relative address.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element structures to one, two, three, or </left><right>four registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: Load multiple 4-element structures to </left><right>four registers.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single 4-element structure to one lane of </left><right>four registers.</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element structure and Replicate to all lanes of </left><right>four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element structures from one, two, three, or </left><right>four registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: Store multiple 4-element structures from </left><right>four registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single 4-element structure from one lane of </left><right>four registers.</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load SIMD&amp;</left><right>FP Register (immediate offset).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: Store SIMD&amp;</left><right>FP register (immediate offset).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load SIMD&amp;</left><right>FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: Load SIMD&amp;</left><right>FP Register (register offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;FP)</a>: Store SIMD&amp;</left><right>FP register (register offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load SIMD&amp;</left><right>FP Register (unscaled offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: Store SIMD&amp;</left><right>FP register (unscaled offset).</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;</left><right>FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;</left><right>FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;</left><right>FP registers.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;</left><right>FP registers.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;</a></left><right><a href="ldnp_fpsimd.xml">FP)</a>: Load Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (SIMD&amp;</a></left><right><a href="ldp_fpsimd.xml">FP)</a>: Load Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;</a></left><right><a href="ldr_imm_fpsimd.xml">FP)</a>: Load SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;</a></left><right><a href="ldr_lit_fpsimd.xml">FP)</a>: Load SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;</a></left><right><a href="ldr_reg_fpsimd.xml">FP)</a>: Load SIMD&amp;FP Register (register offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;</a></left><right><a href="ldur_fpsimd.xml">FP)</a>: Load SIMD&amp;FP Register (unscaled offset).</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;</a></left><right><a href="stnp_fpsimd.xml">FP)</a>: Store Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (SIMD&amp;</a></left><right><a href="stp_fpsimd.xml">FP)</a>: Store Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;</a></left><right><a href="str_imm_fpsimd.xml">FP)</a>: Store SIMD&amp;FP register (immediate offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;</a></left><right><a href="str_reg_fpsimd.xml">FP)</a>: Store SIMD&amp;FP register (register offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;</a></left><right><a href="stur_fpsimd.xml">FP)</a>: Store SIMD&amp;FP register (unscaled offset).</right></line>
  <line><left></left><right><a href="frecpe_advsimd.xml">FRECPE</a>: Floating-point Reciprocal Estimate.</right></line>
  <line><left></left><right><a href="frecps_advsimd.xml">FRECPS</a>: Floating-point Reciprocal Step.</right></line>
  <line><left></left><right><a href="frecpx_advsimd.xml">FRECPX</a>: Floating-point Reciprocal exponent (scalar).</right></line>
  <line><left></left><right><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left></left><right><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to Integral, to nearest with ties to Away (vector).</right></line>
  <line><left></left><right><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, using current rounding mode (scalar).</right></line>
  <line><left></left><right><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, using current rounding mode (vector).</right></line>
  <line><left></left><right><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to Integral, toward Minus infinity (scalar).</right></line>
  <line><left></left><right><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to Integral, toward Minus infinity (vector).</right></line>
  <line><left></left><right><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to Integral, to nearest with ties to even (scalar).</right></line>
  <line><left></left><right><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to Integral, to nearest with ties to even (vector).</right></line>
  <line><left></left><right><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to Integral, toward Plus infinity (scalar).</right></line>
  <line><left></left><right><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to Integral, toward Plus infinity (vector).</right></line>
  <line><left></left><right><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, using current rounding mode (scalar).</right></line>
  <line><left></left><right><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, using current rounding mode (vector).</right></line>
  <line><left></left><right><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point Round to Integral, toward Zero (scalar).</right></line>
  <line><left></left><right><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point Round to Integral, toward Zero (vector).</right></line>
  <line><left></left><right><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-point Reciprocal Square Root Estimate.</right></line>
  <line><left></left><right><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-point Reciprocal Square Root Step.</right></line>
  <line><left></left><right><a href="fsqrt_float.xml">FSQRT (scalar)</a>: Floating-point Square Root (scalar).</right></line>
  <line><left></left><right><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: Floating-point Square Root (vector).</right></line>
  <line><left></left><right><a href="fsub_float.xml">FSUB (scalar)</a>: Floating-point Subtract (scalar).</right></line>
  <line><left></left><right><a href="fsub_advsimd.xml">FSUB (vector)</a>: Floating-point Subtract (vector).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: Floating-point </left><right>fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-point Negated </left><right>fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point </left><right>fused Multiply-Add to accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point </left><right>fused Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: Floating-point </left><right>Fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point Negated </left><right>fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point </left><right>fused Multiply-Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point </left><right>fused Multiply-Subtract from accumulator (vector).</right></line>
  <line initialtag="G"><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector element: an alias of INS (</left><right>general).</right></line>
  <line><left><a href="dup_advsimd_gen.xml">DUP (</a></left><right><a href="dup_advsimd_gen.xml">general)</a>: Duplicate general-purpose register to vector.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (</a></left><right><a href="fmov_float_gen.xml">general)</a>: Floating-point Move to or from general-purpose register without conversion.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (</a></left><right><a href="ins_advsimd_gen.xml">general)</a>: Insert vector element from general-purpose register.</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from </a></left><right><a href="mov_ins_advsimd_gen.xml">general)</a>: Move general-purpose register to a vector element: an alias of INS (general).</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to </a></left><right><a href="mov_umov_advsimd.xml">general)</a>: Move vector element to general-purpose register: an alias of UMOV.</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move </left><right>general-purpose register to a vector element: an alias of INS (general).</right></line>
  <line><left><a href="msr_reg.xml">MSR (register)</a>: Move </left><right>general-purpose register to System Register.</right></line>
  <line><left><a href="dup_advsimd_gen.xml">DUP (general)</a>: Duplicate </left><right>general-purpose register to vector.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point Move to or from </left><right>general-purpose register without conversion.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (general)</a>: Insert vector element from </left><right>general-purpose register.</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: Signed Move vector element to </left><right>general-purpose register.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: Unsigned Move vector element to </left><right>general-purpose register.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to </left><right>general-purpose register: an alias of UMOV.</right></line>
  <line><left><a href="cmgt_advsimd_reg.xml">CMGT (register)</a>: Compare signed </left><right>Greater than (vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: Floating-point Absolute Compare </left><right>Greater than (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: Floating-point Compare </left><right>Greater than (vector).</right></line>
  <line><left><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: Compare signed </left><right>Greater than or Equal (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-point Absolute Compare </left><right>Greater than or Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-point Compare </left><right>Greater than or Equal (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare signed </left><right>Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point Compare </left><right>Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: Compare signed </left><right>Greater than zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-point Compare </left><right>Greater than zero (vector).</right></line>
  <line initialtag="H"><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling Multiply returning High </left><right>half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High </left><right>Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High </left><right>Half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling Multiply returning High </left><right>half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High </left><right>Half (vector).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High </left><right>Half (vector).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating Doubling Multiply returning High </left><right>half.</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding Doubling Multiply returning High </left><right>half.</right></line>
  <line><left><a href="ldrh_imm.xml">LDRH (immediate)</a>: Load Register </left><right>Halfword (immediate).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: Load Register Signed </left><right>Halfword (immediate).</right></line>
  <line><left><a href="strh_imm.xml">STRH (immediate)</a>: Store Register </left><right>Halfword (immediate).</right></line>
  <line><left><a href="ldrh_reg.xml">LDRH (register)</a>: Load Register </left><right>Halfword (register).</right></line>
  <line><left><a href="ldrsh_reg.xml">LDRSH (register)</a>: Load Register Signed </left><right>Halfword (register).</right></line>
  <line><left><a href="strh_reg.xml">STRH (register)</a>: Store Register </left><right>Halfword (register).</right></line>
  <line><left><a href="ldtrh.xml">LDTRH</a>: Load Register </left><right>Halfword (unprivileged).</right></line>
  <line><left><a href="ldtrsh.xml">LDTRSH</a>: Load Register Signed </left><right>Halfword (unprivileged).</right></line>
  <line><left><a href="sttrh.xml">STTRH</a>: Store Register </left><right>Halfword (unprivileged).</right></line>
  <line><left><a href="ldurh.xml">LDURH</a>: Load Register </left><right>Halfword (unscaled).</right></line>
  <line><left><a href="ldursh.xml">LDURSH</a>: Load Register Signed </left><right>Halfword (unscaled).</right></line>
  <line><left><a href="sturh.xml">STURH</a>: Store Register </left><right>Halfword (unscaled).</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum on </left><right>halfword in memory, without return.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, CASALH, CASLH</a>: Compare and Swap </left><right>halfword in memory.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: Atomic add on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit clear on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive OR on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit set on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed minimum on </left><right>halfword in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum on </left><right>halfword in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum on </left><right>halfword in memory.</right></line>
  <line><left><a href="swph.xml">SWPH, SWPAH, SWPALH, SWPLH</a>: Swap </left><right>halfword in memory.</right></line>
  <line><left><a href="ldarh.xml">LDARH</a>: Load-Acquire Register </left><right>Halfword.</right></line>
  <line><left><a href="ldaxrh.xml">LDAXRH</a>: Load-Acquire Exclusive Register </left><right>Halfword.</right></line>
  <line><left><a href="ldlarh.xml">LDLARH</a>: Load LOAcquire Register </left><right>Halfword.</right></line>
  <line><left><a href="ldxrh.xml">LDXRH</a>: Load Exclusive Register </left><right>Halfword.</right></line>
  <line><left><a href="stllrh.xml">STLLRH</a>: Store LORelease Register </left><right>Halfword.</right></line>
  <line><left><a href="stlrh.xml">STLRH</a>: Store-Release Register </left><right>Halfword.</right></line>
  <line><left><a href="stlxrh.xml">STLXRH</a>: Store-Release Exclusive Register </left><right>Halfword.</right></line>
  <line><left><a href="stxrh.xml">STXRH</a>: Store Exclusive Register </left><right>Halfword.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: Sign Extend </left><right>Halfword: an alias of SBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: Unsigned Extend </left><right>Halfword: an alias of UBFM.</right></line>
  <line><left><a href="rev16_advsimd.xml">REV16 (vector)</a>: Reverse elements in 16-bit </left><right>halfwords (vector).</right></line>
  <line><left><a href="rev16_int.xml">REV16</a>: Reverse bytes in 16-bit </left><right>halfwords.</right></line>
  <line><left><a href="hlt.xml">HLT</a>: </left><right>Halt instruction.</right></line>
  <line><left><a href="shadd_advsimd.xml">SHADD</a>: Signed </left><right>Halving Add.</right></line>
  <line><left><a href="srhadd_advsimd.xml">SRHADD</a>: Signed Rounding </left><right>Halving Add.</right></line>
  <line><left><a href="uhadd_advsimd.xml">UHADD</a>: Unsigned </left><right>Halving Add.</right></line>
  <line><left><a href="urhadd_advsimd.xml">URHADD</a>: Unsigned Rounding </left><right>Halving Add.</right></line>
  <line><left><a href="shsub_advsimd.xml">SHSUB</a>: Signed </left><right>Halving Subtract.</right></line>
  <line><left><a href="uhsub_advsimd.xml">UHSUB</a>: Unsigned </left><right>Halving Subtract.</right></line>
  <line><left><a href="sha1c_advsimd.xml">SHA1C</a>: SHA1 </left><right>hash update (choose).</right></line>
  <line><left><a href="sha1m_advsimd.xml">SHA1M</a>: SHA1 </left><right>hash update (majority).</right></line>
  <line><left><a href="sha1p_advsimd.xml">SHA1P</a>: SHA1 </left><right>hash update (parity).</right></line>
  <line><left><a href="sha256h_advsimd.xml">SHA256H</a>: SHA256 </left><right>hash update (part 1).</right></line>
  <line><left><a href="sha256h2_advsimd.xml">SHA256H2</a>: SHA256 </left><right>hash update (part 2).</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling Multiply returning </left><right>High half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning </left><right>High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning </left><right>High Half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling Multiply returning </left><right>High half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning </left><right>High Half (vector).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning </left><right>High Half (vector).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating Doubling Multiply returning </left><right>High half.</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding Doubling Multiply returning </left><right>High half.</right></line>
  <line><left><a href="addhn_advsimd.xml">ADDHN, ADDHN2</a>: Add returning </left><right>High Narrow.</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: Rounding Add returning </left><right>High Narrow.</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: Rounding Subtract returning </left><right>High Narrow.</right></line>
  <line><left><a href="subhn_advsimd.xml">SUBHN, SUBHN2</a>: Subtract returning </left><right>High Narrow.</right></line>
  <line><left><a href="smulh.xml">SMULH</a>: Signed Multiply </left><right>High.</right></line>
  <line><left><a href="umulh.xml">UMULH</a>: Unsigned Multiply </left><right>High.</right></line>
  <line><left><a href="cmhi_advsimd.xml">CMHI (register)</a>: Compare unsigned </left><right>Higher (vector).</right></line>
  <line><left><a href="cmhs_advsimd.xml">CMHS (register)</a>: Compare unsigned </left><right>Higher or Same (vector).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point Convert to </left><right>higher precision Long (vector).</right></line>
  <line><left><a href="hint.xml">HINT</a>: </left><right>Hint instruction.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers, with Non-temporal </left><right>hint.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: Load Pair of Registers, with non-temporal </left><right>hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers, with Non-temporal </left><right>hint.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: Store Pair of Registers, with non-temporal </left><right>hint.</right></line>
  <line><left></left><right><a href="hint.xml">HINT</a>: Hint instruction.</right></line>
  <line><left></left><right><a href="hlt.xml">HLT</a>: Halt instruction.</right></line>
  <line><left></left><right><a href="hvc.xml">HVC</a>: Hypervisor Call.</right></line>
  <line><left><a href="hvc.xml">HVC</a>: </left><right>Hypervisor Call.</right></line>
  <line initialtag="I"><left></left><right><a href="ic_sys.xml">IC</a>: Instruction Cache operation: an alias of SYS.</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: Floating-point move </left><right>immediate (scalar).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: Floating-point move </left><right>immediate (vector).</right></line>
  <line><left><a href="movi_advsimd.xml">MOVI</a>: Move </left><right>Immediate (vector).</right></line>
  <line><left><a href="mvni_advsimd.xml">MVNI</a>: Move inverted </left><right>Immediate (vector).</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (</left><right>immediate offset).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (</left><right>immediate offset).</right></line>
  <line><left><a href="msr_imm.xml">MSR (immediate)</a>: Move </left><right>immediate value to Special Register.</right></line>
  <line><left><a href="adds_addsub_imm.xml">ADDS (immediate)</a>: Add (</left><right>immediate), setting flags.</right></line>
  <line><left><a href="ands_log_imm.xml">ANDS (immediate)</a>: Bitwise AND (</left><right>immediate), setting flags.</right></line>
  <line><left><a href="subs_addsub_imm.xml">SUBS (immediate)</a>: Subtract (</left><right>immediate), setting flags.</right></line>
  <line><left><a href="add_addsub_imm.xml">ADD (immediate)</a>: Add (</left><right>immediate).</right></line>
  <line><left><a href="and_log_imm.xml">AND (immediate)</a>: Bitwise AND (</left><right>immediate).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: Bitwise bit Clear (vector, </left><right>immediate).</right></line>
  <line><left><a href="ccmn_imm.xml">CCMN (immediate)</a>: Conditional Compare Negative (</left><right>immediate).</right></line>
  <line><left><a href="ccmp_imm.xml">CCMP (immediate)</a>: Conditional Compare (</left><right>immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (immediate): an alias of ADDS (</left><right>immediate).</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (immediate): an alias of SUBS (</left><right>immediate).</right></line>
  <line><left><a href="eor_log_imm.xml">EOR (immediate)</a>: Bitwise Exclusive OR (</left><right>immediate).</right></line>
  <line><left><a href="ldr_imm_gen.xml">LDR (immediate)</a>: Load Register (</left><right>immediate).</right></line>
  <line><left><a href="ldrb_imm.xml">LDRB (immediate)</a>: Load Register Byte (</left><right>immediate).</right></line>
  <line><left><a href="ldrh_imm.xml">LDRH (immediate)</a>: Load Register Halfword (</left><right>immediate).</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: Load Register Signed Byte (</left><right>immediate).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: Load Register Signed Halfword (</left><right>immediate).</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: Load Register Signed Word (</left><right>immediate).</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask immediate): an alias of ORR (</left><right>immediate).</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack pointer: an alias of ADD (</left><right>immediate).</right></line>
  <line><left><a href="orr_log_imm.xml">ORR (immediate)</a>: Bitwise OR (</left><right>immediate).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: Bitwise inclusive OR (vector, </left><right>immediate).</right></line>
  <line><left><a href="prfm_imm.xml">PRFM (immediate)</a>: Prefetch Memory (</left><right>immediate).</right></line>
  <line><left><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: Rounding Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="shl_advsimd.xml">SHL</a>: Shift Left (</left><right>immediate).</right></line>
  <line><left><a href="shrn_advsimd.xml">SHRN, SHRN2</a>: Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="sli_advsimd.xml">SLI</a>: Shift Left and Insert (</left><right>immediate).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating Rounded Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded Shift Right Unsigned Narrow (</left><right>immediate).</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: Signed saturating Shift Left (</left><right>immediate).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed saturating Shift Left Unsigned (</left><right>immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed saturating Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating Shift Right Unsigned Narrow (</left><right>immediate).</right></line>
  <line><left><a href="sri_advsimd.xml">SRI</a>: Shift Right and Insert (</left><right>immediate).</right></line>
  <line><left><a href="srshr_advsimd.xml">SRSHR</a>: Signed Rounding Shift Right (</left><right>immediate).</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: Signed Rounding Shift Right and Accumulate (</left><right>immediate).</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: Signed Shift Left Long (</left><right>immediate).</right></line>
  <line><left><a href="sshr_advsimd.xml">SSHR</a>: Signed Shift Right (</left><right>immediate).</right></line>
  <line><left><a href="ssra_advsimd.xml">SSRA</a>: Signed Shift Right and Accumulate (</left><right>immediate).</right></line>
  <line><left><a href="str_imm_gen.xml">STR (immediate)</a>: Store Register (</left><right>immediate).</right></line>
  <line><left><a href="strb_imm.xml">STRB (immediate)</a>: Store Register Byte (</left><right>immediate).</right></line>
  <line><left><a href="strh_imm.xml">STRH (immediate)</a>: Store Register Halfword (</left><right>immediate).</right></line>
  <line><left><a href="sub_addsub_imm.xml">SUB (immediate)</a>: Subtract (</left><right>immediate).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (immediate): an alias of ANDS (</left><right>immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating Rounded Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: Unsigned saturating Shift Left (</left><right>immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned saturating Shift Right Narrow (</left><right>immediate).</right></line>
  <line><left><a href="urshr_advsimd.xml">URSHR</a>: Unsigned Rounding Shift Right (</left><right>immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: Unsigned Rounding Shift Right and Accumulate (</left><right>immediate).</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: Unsigned Shift Left Long (</left><right>immediate).</right></line>
  <line><left><a href="ushr_advsimd.xml">USHR</a>: Unsigned Shift Right (</left><right>immediate).</right></line>
  <line><left><a href="usra_advsimd.xml">USRA</a>: Unsigned Shift Right and Accumulate (</left><right>immediate).</right></line>
  <line><left><a href="adds_addsub_imm.xml">ADDS (</a></left><right><a href="adds_addsub_imm.xml">immediate)</a>: Add (immediate), setting flags.</right></line>
  <line><left><a href="add_addsub_imm.xml">ADD (</a></left><right><a href="add_addsub_imm.xml">immediate)</a>: Add (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare Negative (</left><right>immediate): an alias of ADDS (immediate).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (</left><right>immediate): an alias of ANDS (immediate).</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: Rotate right (</left><right>immediate): an alias of EXTR.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted wide </left><right>immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (wide </left><right>immediate): an alias of MOVZ.</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask </left><right>immediate): an alias of ORR (immediate).</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift Right (</left><right>immediate): an alias of SBFM.</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (</left><right>immediate): an alias of SUBS (immediate).</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift Left (</left><right>immediate): an alias of UBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift Right (</left><right>immediate): an alias of UBFM.</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (</a></left><right><a href="asr_sbfm.xml">immediate)</a>: Arithmetic Shift Right (immediate): an alias of SBFM.</right></line>
  <line><left><a href="ands_log_imm.xml">ANDS (</a></left><right><a href="ands_log_imm.xml">immediate)</a>: Bitwise AND (immediate), setting flags.</right></line>
  <line><left><a href="and_log_imm.xml">AND (</a></left><right><a href="and_log_imm.xml">immediate)</a>: Bitwise AND (immediate).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, </a></left><right><a href="bic_advsimd_imm.xml">immediate)</a>: Bitwise bit Clear (vector, immediate).</right></line>
  <line><left><a href="eor_log_imm.xml">EOR (</a></left><right><a href="eor_log_imm.xml">immediate)</a>: Bitwise Exclusive OR (immediate).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, </a></left><right><a href="orr_advsimd_imm.xml">immediate)</a>: Bitwise inclusive OR (vector, immediate).</right></line>
  <line><left><a href="orr_log_imm.xml">ORR (</a></left><right><a href="orr_log_imm.xml">immediate)</a>: Bitwise OR (immediate).</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (</a></left><right><a href="cmp_subs_addsub_imm.xml">immediate)</a>: Compare (immediate): an alias of SUBS (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (</a></left><right><a href="cmn_adds_addsub_imm.xml">immediate)</a>: Compare Negative (immediate): an alias of ADDS (immediate).</right></line>
  <line><left><a href="ccmp_imm.xml">CCMP (</a></left><right><a href="ccmp_imm.xml">immediate)</a>: Conditional Compare (immediate).</right></line>
  <line><left><a href="ccmn_imm.xml">CCMN (</a></left><right><a href="ccmn_imm.xml">immediate)</a>: Conditional Compare Negative (immediate).</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, </a></left><right><a href="fmov_float_imm.xml">immediate)</a>: Floating-point move immediate (scalar).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, </a></left><right><a href="fmov_advsimd.xml">immediate)</a>: Floating-point move immediate (vector).</right></line>
  <line><left><a href="ldr_imm_gen.xml">LDR (</a></left><right><a href="ldr_imm_gen.xml">immediate)</a>: Load Register (immediate).</right></line>
  <line><left><a href="ldrb_imm.xml">LDRB (</a></left><right><a href="ldrb_imm.xml">immediate)</a>: Load Register Byte (immediate).</right></line>
  <line><left><a href="ldrh_imm.xml">LDRH (</a></left><right><a href="ldrh_imm.xml">immediate)</a>: Load Register Halfword (immediate).</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (</a></left><right><a href="ldrsb_imm.xml">immediate)</a>: Load Register Signed Byte (immediate).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (</a></left><right><a href="ldrsh_imm.xml">immediate)</a>: Load Register Signed Halfword (immediate).</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (</a></left><right><a href="ldrsw_imm.xml">immediate)</a>: Load Register Signed Word (immediate).</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (</a></left><right><a href="lsl_ubfm.xml">immediate)</a>: Logical Shift Left (immediate): an alias of UBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (</a></left><right><a href="lsr_ubfm.xml">immediate)</a>: Logical Shift Right (immediate): an alias of UBFM.</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask </a></left><right><a href="mov_orr_log_imm.xml">immediate)</a>: Move (bitmask immediate): an alias of ORR (immediate).</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide </a></left><right><a href="mov_movn.xml">immediate)</a>: Move (inverted wide immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide </a></left><right><a href="mov_movz.xml">immediate)</a>: Move (wide immediate): an alias of MOVZ.</right></line>
  <line><left><a href="msr_imm.xml">MSR (</a></left><right><a href="msr_imm.xml">immediate)</a>: Move immediate value to Special Register.</right></line>
  <line><left><a href="prfm_imm.xml">PRFM (</a></left><right><a href="prfm_imm.xml">immediate)</a>: Prefetch Memory (immediate).</right></line>
  <line><left><a href="ror_extr.xml">ROR (</a></left><right><a href="ror_extr.xml">immediate)</a>: Rotate right (immediate): an alias of EXTR.</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (</a></left><right><a href="sqshl_advsimd_imm.xml">immediate)</a>: Signed saturating Shift Left (immediate).</right></line>
  <line><left><a href="str_imm_gen.xml">STR (</a></left><right><a href="str_imm_gen.xml">immediate)</a>: Store Register (immediate).</right></line>
  <line><left><a href="strb_imm.xml">STRB (</a></left><right><a href="strb_imm.xml">immediate)</a>: Store Register Byte (immediate).</right></line>
  <line><left><a href="strh_imm.xml">STRH (</a></left><right><a href="strh_imm.xml">immediate)</a>: Store Register Halfword (immediate).</right></line>
  <line><left><a href="subs_addsub_imm.xml">SUBS (</a></left><right><a href="subs_addsub_imm.xml">immediate)</a>: Subtract (immediate), setting flags.</right></line>
  <line><left><a href="sub_addsub_imm.xml">SUB (</a></left><right><a href="sub_addsub_imm.xml">immediate)</a>: Subtract (immediate).</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (</a></left><right><a href="tst_ands_log_imm.xml">immediate)</a>: Test bits (immediate): an alias of ANDS (immediate).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (</a></left><right><a href="uqshl_advsimd_imm.xml">immediate)</a>: Unsigned saturating Shift Left (immediate).</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (</a></left><right><a href="ldr_imm_fpsimd.xml">immediate, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (</a></left><right><a href="str_imm_fpsimd.xml">immediate, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (immediate offset).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: Bitwise </left><right>inclusive OR (vector, immediate).</right></line>
  <line><left><a href="orr_advsimd_reg.xml">ORR (vector, register)</a>: Bitwise </left><right>inclusive OR (vector, register).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (vector)</a>: Bitwise </left><right>inclusive OR NOT (vector).</right></line>
  <line><left><a href="csinc.xml">CSINC</a>: Conditional Select </left><right>Increment.</right></line>
  <line><left><a href="cinc_csinc.xml">CINC</a>: Conditional </left><right>Increment: an alias of CSINC.</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Minus </left><right>infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus </left><right>infinity (scalar).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Plus </left><right>infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus </left><right>infinity (scalar).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to Integral, toward Minus </left><right>infinity (scalar).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to Integral, toward Plus </left><right>infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Minus </left><right>infinity (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus </left><right>infinity (vector).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Plus </left><right>infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus </left><right>infinity (vector).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to Integral, toward Minus </left><right>infinity (vector).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to Integral, toward Plus </left><right>infinity (vector).</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector element: an alias of </left><right>INS (element).</right></line>
  <line><left></left><right><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert vector element from another vector element.</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector element: an alias of </left><right>INS (general).</right></line>
  <line><left></left><right><a href="ins_advsimd_gen.xml">INS (general)</a>: Insert vector element from general-purpose register.</right></line>
  <line><left><a href="sli_advsimd.xml">SLI</a>: Shift Left and </left><right>Insert (immediate).</right></line>
  <line><left><a href="sri_advsimd.xml">SRI</a>: Shift Right and </left><right>Insert (immediate).</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and </left><right>insert at low end: an alias of BFM.</right></line>
  <line><left><a href="bif_advsimd.xml">BIF</a>: Bitwise </left><right>Insert if False.</right></line>
  <line><left><a href="bit_advsimd.xml">BIT</a>: Bitwise </left><right>Insert if True.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield </left><right>Insert in Zero: an alias of SBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield </left><right>Insert in Zero: an alias of UBFM.</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: </left><right>Insert vector element from another vector element.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (general)</a>: </left><right>Insert vector element from general-purpose register.</right></line>
  <line><left><a href="bfi_bfm.xml">BFI</a>: Bitfield </left><right>Insert: an alias of BFM.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: </left><right>Instruction Cache operation: an alias of SYS.</right></line>
  <line><left><a href="isb.xml">ISB</a>: </left><right>Instruction Synchronization Barrier.</right></line>
  <line><left><a href="sysl.xml">SYSL</a>: System </left><right>instruction with result.</right></line>
  <line><left><a href="brk.xml">BRK</a>: Breakpoint </left><right>instruction.</right></line>
  <line><left><a href="hint.xml">HINT</a>: Hint </left><right>instruction.</right></line>
  <line><left><a href="hlt.xml">HLT</a>: Halt </left><right>instruction.</right></line>
  <line><left><a href="sys.xml">SYS</a>: System </left><right>instruction.</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed </left><right>integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned </left><right>integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed </left><right>integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned </left><right>integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, </a></left><right><a href="fcvtzs_float_int.xml">integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, </a></left><right><a href="fcvtzs_advsimd_int.xml">integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, </a></left><right><a href="fcvtzu_float_int.xml">integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, </a></left><right><a href="fcvtzu_advsimd_int.xml">integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, </a></left><right><a href="scvtf_float_int.xml">integer)</a>: Signed integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, </a></left><right><a href="scvtf_advsimd_int.xml">integer)</a>: Signed integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, </a></left><right><a href="ucvtf_float_int.xml">integer)</a>: Unsigned integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, </a></left><right><a href="ucvtf_advsimd_int.xml">integer)</a>: Unsigned integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed </left><right>integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed </left><right>integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed </left><right>integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed </left><right>integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed </left><right>integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned </left><right>integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to </left><right>Integral exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to </left><right>Integral exact, using current rounding mode (vector).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to </left><right>Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to </left><right>Integral, to nearest with ties to Away (vector).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to </left><right>Integral, to nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to </left><right>Integral, to nearest with ties to even (vector).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to </left><right>Integral, toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to </left><right>Integral, toward Minus infinity (vector).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to </left><right>Integral, toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to </left><right>Integral, toward Plus infinity (vector).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point Round to </left><right>Integral, toward Zero (scalar).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point Round to </left><right>Integral, toward Zero (vector).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to </left><right>Integral, using current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to </left><right>Integral, using current rounding mode (vector).</right></line>
  <line><left><a href="wfi.xml">WFI</a>: Wait For </left><right>Interrupt.</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: TLB </left><right>Invalidate operation: an alias of SYS.</right></line>
  <line><left><a href="aesimc_advsimd.xml">AESIMC</a>: AES </left><right>inverse mix columns.</right></line>
  <line><left><a href="csinv.xml">CSINV</a>: Conditional Select </left><right>Invert.</right></line>
  <line><left><a href="cinv_csinv.xml">CINV</a>: Conditional </left><right>Invert: an alias of CSINV.</right></line>
  <line><left><a href="mvni_advsimd.xml">MVNI</a>: Move </left><right>inverted Immediate (vector).</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (</left><right>inverted wide immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_movn.xml">MOV (</a></left><right><a href="mov_movn.xml">inverted wide immediate)</a>: Move (inverted wide immediate): an alias of MOVN.</right></line>
  <line><left></left><right><a href="isb.xml">ISB</a>: Instruction Synchronization Barrier.</right></line>
  <line initialtag="K"><left><a href="adrp.xml">ADRP</a>: Form PC-relative address to 4</left><right>KB page.</right></line>
  <line><left><a href="movk.xml">MOVK</a>: Move wide with </left><right>keep.</right></line>
  <line initialtag="L"><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single 4-element structure to one </left><right>lane of four registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single 4-element structure from one </left><right>lane of four registers.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-element structure to one </left><right>lane of one register.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-element structure from one </left><right>lane of one register.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single 3-element structure to one </left><right>lane of three registers).</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single 3-element structure from one </left><right>lane of three registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single 2-element structure to one </left><right>lane of two registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single 2-element structure from one </left><right>lane of two registers.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element structure and Replicate to all </left><right>lanes (of one register).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element structure and Replicate to all </left><right>lanes of four registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element structure and Replicate to all </left><right>lanes of three registers.</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element structure and Replicate to all </left><right>lanes of two registers.</right></line>
  <line><left></left><right><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element structures to one, two, three, or four registers.</right></line>
  <line><left></left><right><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-element structure to one lane of one register.</right></line>
  <line><left></left><right><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element structure and Replicate to all lanes (of one register).</right></line>
  <line><left></left><right><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: Load multiple 2-element structures to two registers.</right></line>
  <line><left></left><right><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single 2-element structure to one lane of two registers.</right></line>
  <line><left></left><right><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element structure and Replicate to all lanes of two registers.</right></line>
  <line><left></left><right><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: Load multiple 3-element structures to three registers.</right></line>
  <line><left></left><right><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single 3-element structure to one lane of three registers).</right></line>
  <line><left></left><right><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element structure and Replicate to all lanes of three registers.</right></line>
  <line><left></left><right><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: Load multiple 4-element structures to four registers.</right></line>
  <line><left></left><right><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single 4-element structure to one lane of four registers.</right></line>
  <line><left></left><right><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element structure and Replicate to all lanes of four registers.</right></line>
  <line><left></left><right><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic add on word or doubleword in memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, </a></left><right><a href="ldadd.xml">LDADDA, LDADDAL, LDADDL</a>: Atomic add on word or doubleword in memory.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, </a></left><right><a href="ldaddb.xml">LDADDAB, LDADDALB, LDADDLB</a>: Atomic add on byte in memory.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, </a></left><right><a href="ldaddh.xml">LDADDAH, LDADDALH, LDADDLH</a>: Atomic add on halfword in memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, </a></left><right><a href="ldadd.xml">LDADDAL, LDADDL</a>: Atomic add on word or doubleword in memory.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, </a></left><right><a href="ldaddb.xml">LDADDALB, LDADDLB</a>: Atomic add on byte in memory.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, </a></left><right><a href="ldaddh.xml">LDADDALH, LDADDLH</a>: Atomic add on halfword in memory.</right></line>
  <line><left></left><right><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: Atomic add on byte in memory.</right></line>
  <line><left></left><right><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: Atomic add on halfword in memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, </a></left><right><a href="ldadd.xml">LDADDL</a>: Atomic add on word or doubleword in memory.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, </a></left><right><a href="ldaddb.xml">LDADDLB</a>: Atomic add on byte in memory.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, </a></left><right><a href="ldaddh.xml">LDADDLH</a>: Atomic add on halfword in memory.</right></line>
  <line><left></left><right><a href="ldar.xml">LDAR</a>: Load-Acquire Register.</right></line>
  <line><left></left><right><a href="ldarb.xml">LDARB</a>: Load-Acquire Register Byte.</right></line>
  <line><left></left><right><a href="ldarh.xml">LDARH</a>: Load-Acquire Register Halfword.</right></line>
  <line><left></left><right><a href="ldaxp.xml">LDAXP</a>: Load-Acquire Exclusive Pair of Registers.</right></line>
  <line><left></left><right><a href="ldaxr.xml">LDAXR</a>: Load-Acquire Exclusive Register.</right></line>
  <line><left></left><right><a href="ldaxrb.xml">LDAXRB</a>: Load-Acquire Exclusive Register Byte.</right></line>
  <line><left></left><right><a href="ldaxrh.xml">LDAXRH</a>: Load-Acquire Exclusive Register Halfword.</right></line>
  <line><left></left><right><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, </a></left><right><a href="ldclr.xml">LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, </a></left><right><a href="ldclrb.xml">LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit clear on byte in memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, </a></left><right><a href="ldclrh.xml">LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit clear on halfword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, </a></left><right><a href="ldclr.xml">LDCLRAL, LDCLRL</a>: Atomic bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, </a></left><right><a href="ldclrb.xml">LDCLRALB, LDCLRLB</a>: Atomic bit clear on byte in memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, </a></left><right><a href="ldclrh.xml">LDCLRALH, LDCLRLH</a>: Atomic bit clear on halfword in memory.</right></line>
  <line><left></left><right><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit clear on byte in memory.</right></line>
  <line><left></left><right><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit clear on halfword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, </a></left><right><a href="ldclr.xml">LDCLRL</a>: Atomic bit clear on word or doubleword in memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, </a></left><right><a href="ldclrb.xml">LDCLRLB</a>: Atomic bit clear on byte in memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, </a></left><right><a href="ldclrh.xml">LDCLRLH</a>: Atomic bit clear on halfword in memory.</right></line>
  <line><left></left><right><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, </a></left><right><a href="ldeor.xml">LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, </a></left><right><a href="ldeorb.xml">LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive OR on byte in memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, </a></left><right><a href="ldeorh.xml">LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive OR on halfword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, </a></left><right><a href="ldeor.xml">LDEORAL, LDEORL</a>: Atomic exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, </a></left><right><a href="ldeorb.xml">LDEORALB, LDEORLB</a>: Atomic exclusive OR on byte in memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, </a></left><right><a href="ldeorh.xml">LDEORALH, LDEORLH</a>: Atomic exclusive OR on halfword in memory.</right></line>
  <line><left></left><right><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive OR on byte in memory.</right></line>
  <line><left></left><right><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive OR on halfword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, </a></left><right><a href="ldeor.xml">LDEORL</a>: Atomic exclusive OR on word or doubleword in memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, </a></left><right><a href="ldeorb.xml">LDEORLB</a>: Atomic exclusive OR on byte in memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, </a></left><right><a href="ldeorh.xml">LDEORLH</a>: Atomic exclusive OR on halfword in memory.</right></line>
  <line><left></left><right><a href="ldlar.xml">LDLAR</a>: Load LOAcquire Register.</right></line>
  <line><left></left><right><a href="ldlarb.xml">LDLARB</a>: Load LOAcquire Register Byte.</right></line>
  <line><left></left><right><a href="ldlarh.xml">LDLARH</a>: Load LOAcquire Register Halfword.</right></line>
  <line><left></left><right><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left></left><right><a href="ldnp_gen.xml">LDNP</a>: Load Pair of Registers, with non-temporal hint.</right></line>
  <line><left></left><right><a href="ldp_fpsimd.xml">LDP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers.</right></line>
  <line><left></left><right><a href="ldp_gen.xml">LDP</a>: Load Pair of Registers.</right></line>
  <line><left></left><right><a href="ldpsw.xml">LDPSW</a>: Load Pair of Registers Signed Word.</right></line>
  <line><left></left><right><a href="ldr_imm_gen.xml">LDR (immediate)</a>: Load Register (immediate).</right></line>
  <line><left></left><right><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left></left><right><a href="ldr_lit_gen.xml">LDR (literal)</a>: Load Register (literal).</right></line>
  <line><left></left><right><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left></left><right><a href="ldr_reg_gen.xml">LDR (register)</a>: Load Register (register).</right></line>
  <line><left></left><right><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (register offset).</right></line>
  <line><left></left><right><a href="ldrb_imm.xml">LDRB (immediate)</a>: Load Register Byte (immediate).</right></line>
  <line><left></left><right><a href="ldrb_reg.xml">LDRB (register)</a>: Load Register Byte (register).</right></line>
  <line><left></left><right><a href="ldrh_imm.xml">LDRH (immediate)</a>: Load Register Halfword (immediate).</right></line>
  <line><left></left><right><a href="ldrh_reg.xml">LDRH (register)</a>: Load Register Halfword (register).</right></line>
  <line><left></left><right><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: Load Register Signed Byte (immediate).</right></line>
  <line><left></left><right><a href="ldrsb_reg.xml">LDRSB (register)</a>: Load Register Signed Byte (register).</right></line>
  <line><left></left><right><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: Load Register Signed Halfword (immediate).</right></line>
  <line><left></left><right><a href="ldrsh_reg.xml">LDRSH (register)</a>: Load Register Signed Halfword (register).</right></line>
  <line><left></left><right><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: Load Register Signed Word (immediate).</right></line>
  <line><left></left><right><a href="ldrsw_lit.xml">LDRSW (literal)</a>: Load Register Signed Word (literal).</right></line>
  <line><left></left><right><a href="ldrsw_reg.xml">LDRSW (register)</a>: Load Register Signed Word (register).</right></line>
  <line><left></left><right><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit set on word or doubleword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, </a></left><right><a href="ldset.xml">LDSETA, LDSETAL, LDSETL</a>: Atomic bit set on word or doubleword in memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, </a></left><right><a href="ldsetb.xml">LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit set on byte in memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, </a></left><right><a href="ldseth.xml">LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit set on halfword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, </a></left><right><a href="ldset.xml">LDSETAL, LDSETL</a>: Atomic bit set on word or doubleword in memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, </a></left><right><a href="ldsetb.xml">LDSETALB, LDSETLB</a>: Atomic bit set on byte in memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, </a></left><right><a href="ldseth.xml">LDSETALH, LDSETLH</a>: Atomic bit set on halfword in memory.</right></line>
  <line><left></left><right><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit set on byte in memory.</right></line>
  <line><left></left><right><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit set on halfword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, </a></left><right><a href="ldset.xml">LDSETL</a>: Atomic bit set on word or doubleword in memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, </a></left><right><a href="ldsetb.xml">LDSETLB</a>: Atomic bit set on byte in memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, </a></left><right><a href="ldseth.xml">LDSETLH</a>: Atomic bit set on halfword in memory.</right></line>
  <line><left></left><right><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, </a></left><right><a href="ldsmax.xml">LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, </a></left><right><a href="ldsmaxb.xml">LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum on byte in memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, </a></left><right><a href="ldsmaxh.xml">LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum on halfword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, </a></left><right><a href="ldsmax.xml">LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, </a></left><right><a href="ldsmaxb.xml">LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum on byte in memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, </a></left><right><a href="ldsmaxh.xml">LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum on byte in memory.</right></line>
  <line><left></left><right><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum on halfword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, </a></left><right><a href="ldsmax.xml">LDSMAXL</a>: Atomic signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, </a></left><right><a href="ldsmaxb.xml">LDSMAXLB</a>: Atomic signed maximum on byte in memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, </a></left><right><a href="ldsmaxh.xml">LDSMAXLH</a>: Atomic signed maximum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, </a></left><right><a href="ldsmin.xml">LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, </a></left><right><a href="ldsminb.xml">LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed minimum on byte in memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, </a></left><right><a href="ldsminh.xml">LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed minimum on halfword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, </a></left><right><a href="ldsmin.xml">LDSMINAL, LDSMINL</a>: Atomic signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, </a></left><right><a href="ldsminb.xml">LDSMINALB, LDSMINLB</a>: Atomic signed minimum on byte in memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, </a></left><right><a href="ldsminh.xml">LDSMINALH, LDSMINLH</a>: Atomic signed minimum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed minimum on byte in memory.</right></line>
  <line><left></left><right><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed minimum on halfword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, </a></left><right><a href="ldsmin.xml">LDSMINL</a>: Atomic signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, </a></left><right><a href="ldsminb.xml">LDSMINLB</a>: Atomic signed minimum on byte in memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, </a></left><right><a href="ldsminh.xml">LDSMINLH</a>: Atomic signed minimum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldtr.xml">LDTR</a>: Load Register (unprivileged).</right></line>
  <line><left></left><right><a href="ldtrb.xml">LDTRB</a>: Load Register Byte (unprivileged).</right></line>
  <line><left></left><right><a href="ldtrh.xml">LDTRH</a>: Load Register Halfword (unprivileged).</right></line>
  <line><left></left><right><a href="ldtrsb.xml">LDTRSB</a>: Load Register Signed Byte (unprivileged).</right></line>
  <line><left></left><right><a href="ldtrsh.xml">LDTRSH</a>: Load Register Signed Halfword (unprivileged).</right></line>
  <line><left></left><right><a href="ldtrsw.xml">LDTRSW</a>: Load Register Signed Word (unprivileged).</right></line>
  <line><left></left><right><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, </a></left><right><a href="ldumax.xml">LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, </a></left><right><a href="ldumaxb.xml">LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum on byte in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, </a></left><right><a href="ldumaxh.xml">LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum on halfword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, </a></left><right><a href="ldumax.xml">LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, </a></left><right><a href="ldumaxb.xml">LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum on byte in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, </a></left><right><a href="ldumaxh.xml">LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum on byte in memory.</right></line>
  <line><left></left><right><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum on halfword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, </a></left><right><a href="ldumax.xml">LDUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, </a></left><right><a href="ldumaxb.xml">LDUMAXLB</a>: Atomic unsigned maximum on byte in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, </a></left><right><a href="ldumaxh.xml">LDUMAXLH</a>: Atomic unsigned maximum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, </a></left><right><a href="ldumin.xml">LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, </a></left><right><a href="lduminb.xml">LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum on byte in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, </a></left><right><a href="lduminh.xml">LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum on halfword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, </a></left><right><a href="ldumin.xml">LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, </a></left><right><a href="lduminb.xml">LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum on byte in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, </a></left><right><a href="lduminh.xml">LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum on halfword in memory.</right></line>
  <line><left></left><right><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum on byte in memory.</right></line>
  <line><left></left><right><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum on halfword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, </a></left><right><a href="ldumin.xml">LDUMINL</a>: Atomic unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, </a></left><right><a href="lduminb.xml">LDUMINLB</a>: Atomic unsigned minimum on byte in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, </a></left><right><a href="lduminh.xml">LDUMINLH</a>: Atomic unsigned minimum on halfword in memory.</right></line>
  <line><left></left><right><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (unscaled offset).</right></line>
  <line><left></left><right><a href="ldur_gen.xml">LDUR</a>: Load Register (unscaled).</right></line>
  <line><left></left><right><a href="ldurb.xml">LDURB</a>: Load Register Byte (unscaled).</right></line>
  <line><left></left><right><a href="ldurh.xml">LDURH</a>: Load Register Halfword (unscaled).</right></line>
  <line><left></left><right><a href="ldursb.xml">LDURSB</a>: Load Register Signed Byte (unscaled).</right></line>
  <line><left></left><right><a href="ldursh.xml">LDURSH</a>: Load Register Signed Halfword (unscaled).</right></line>
  <line><left></left><right><a href="ldursw.xml">LDURSW</a>: Load Register Signed Word (unscaled).</right></line>
  <line><left></left><right><a href="ldxp.xml">LDXP</a>: Load Exclusive Pair of Registers.</right></line>
  <line><left></left><right><a href="ldxr.xml">LDXR</a>: Load Exclusive Register.</right></line>
  <line><left></left><right><a href="ldxrb.xml">LDXRB</a>: Load Exclusive Register Byte.</right></line>
  <line><left></left><right><a href="ldxrh.xml">LDXRH</a>: Load Exclusive Register Halfword.</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (vector)</a>: Count </left><right>Leading Sign bits (vector).</right></line>
  <line><left><a href="cls_int.xml">CLS</a>: Count </left><right>leading sign bits.</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (vector)</a>: Count </left><right>Leading Zero bits (vector).</right></line>
  <line><left><a href="clz_int.xml">CLZ</a>: Count </left><right>leading zero bits.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, </left><right>leaving other bits unchanged: an alias of BFM.</right></line>
  <line><left><a href="shl_advsimd.xml">SHL</a>: Shift </left><right>Left (immediate).</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: Signed saturating Shift </left><right>Left (immediate).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: Unsigned saturating Shift </left><right>Left (immediate).</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift </left><right>Left (immediate): an alias of UBFM.</right></line>
  <line><left><a href="sqrshl_advsimd.xml">SQRSHL</a>: Signed saturating Rounding Shift </left><right>Left (register).</right></line>
  <line><left><a href="sqshl_advsimd_reg.xml">SQSHL (register)</a>: Signed saturating Shift </left><right>Left (register).</right></line>
  <line><left><a href="srshl_advsimd.xml">SRSHL</a>: Signed Rounding Shift </left><right>Left (register).</right></line>
  <line><left><a href="sshl_advsimd.xml">SSHL</a>: Signed Shift </left><right>Left (register).</right></line>
  <line><left><a href="uqrshl_advsimd.xml">UQRSHL</a>: Unsigned saturating Rounding Shift </left><right>Left (register).</right></line>
  <line><left><a href="uqshl_advsimd_reg.xml">UQSHL (register)</a>: Unsigned saturating Shift </left><right>Left (register).</right></line>
  <line><left><a href="urshl_advsimd.xml">URSHL</a>: Unsigned Rounding Shift </left><right>Left (register).</right></line>
  <line><left><a href="ushl_advsimd.xml">USHL</a>: Unsigned Shift </left><right>Left (register).</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: Logical Shift </left><right>Left (register): an alias of LSLV.</right></line>
  <line><left><a href="sli_advsimd.xml">SLI</a>: Shift </left><right>Left and Insert (immediate).</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, SHLL2</a>: Shift </left><right>Left Long (by element size).</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: Signed Shift </left><right>Left Long (immediate).</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: Unsigned Shift </left><right>Left Long (immediate).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed saturating Shift </left><right>Left Unsigned (immediate).</right></line>
  <line><left><a href="lslv.xml">LSLV</a>: Logical Shift </left><right>Left Variable.</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare signed </left><right>Less than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point Compare </left><right>Less than or Equal to zero (vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (zero)</a>: Compare signed </left><right>Less than zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-point Compare </left><right>Less than zero (vector).</right></line>
  <line><left><a href="blr.xml">BLR</a>: Branch with </left><right>Link to Register.</right></line>
  <line><left><a href="bl.xml">BL</a>: Branch with </left><right>Link.</right></line>
  <line><left><a href="ldr_lit_gen.xml">LDR (literal)</a>: Load Register (</left><right>literal).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (PC-relative </left><right>literal).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (literal)</a>: Load Register Signed Word (</left><right>literal).</right></line>
  <line><left><a href="prfm_lit.xml">PRFM (literal)</a>: Prefetch Memory (</left><right>literal).</right></line>
  <line><left><a href="ldr_lit_gen.xml">LDR (</a></left><right><a href="ldr_lit_gen.xml">literal)</a>: Load Register (literal).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (</a></left><right><a href="ldrsw_lit.xml">literal)</a>: Load Register Signed Word (literal).</right></line>
  <line><left><a href="prfm_lit.xml">PRFM (</a></left><right><a href="prfm_lit.xml">literal)</a>: Prefetch Memory (literal).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (</a></left><right><a href="ldr_lit_fpsimd.xml">literal, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldxp.xml">LDXP</a>: </left><right>Load Exclusive Pair of Registers.</right></line>
  <line><left><a href="ldxrb.xml">LDXRB</a>: </left><right>Load Exclusive Register Byte.</right></line>
  <line><left><a href="ldxrh.xml">LDXRH</a>: </left><right>Load Exclusive Register Halfword.</right></line>
  <line><left><a href="ldxr.xml">LDXR</a>: </left><right>Load Exclusive Register.</right></line>
  <line><left><a href="ldlarb.xml">LDLARB</a>: </left><right>Load LOAcquire Register Byte.</right></line>
  <line><left><a href="ldlarh.xml">LDLARH</a>: </left><right>Load LOAcquire Register Halfword.</right></line>
  <line><left><a href="ldlar.xml">LDLAR</a>: </left><right>Load LOAcquire Register.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: </left><right>Load multiple 2-element structures to two registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: </left><right>Load multiple 3-element structures to three registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: </left><right>Load multiple 4-element structures to four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: </left><right>Load multiple single-element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: </left><right>Load one single-element structure and Replicate to all lanes (of one register).</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: </left><right>Load one single-element structure to one lane of one register.</right></line>
  <line><left><a href="ldpsw.xml">LDPSW</a>: </left><right>Load Pair of Registers Signed Word.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: </left><right>Load Pair of Registers, with non-temporal hint.</right></line>
  <line><left><a href="ldp_gen.xml">LDP</a>: </left><right>Load Pair of Registers.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: </left><right>Load Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (SIMD&amp;FP)</a>: </left><right>Load Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="ldr_imm_gen.xml">LDR (immediate)</a>: </left><right>Load Register (immediate).</right></line>
  <line><left><a href="ldr_lit_gen.xml">LDR (literal)</a>: </left><right>Load Register (literal).</right></line>
  <line><left><a href="ldr_reg_gen.xml">LDR (register)</a>: </left><right>Load Register (register).</right></line>
  <line><left><a href="ldtr.xml">LDTR</a>: </left><right>Load Register (unprivileged).</right></line>
  <line><left><a href="ldur_gen.xml">LDUR</a>: </left><right>Load Register (unscaled).</right></line>
  <line><left><a href="ldrb_imm.xml">LDRB (immediate)</a>: </left><right>Load Register Byte (immediate).</right></line>
  <line><left><a href="ldrb_reg.xml">LDRB (register)</a>: </left><right>Load Register Byte (register).</right></line>
  <line><left><a href="ldtrb.xml">LDTRB</a>: </left><right>Load Register Byte (unprivileged).</right></line>
  <line><left><a href="ldurb.xml">LDURB</a>: </left><right>Load Register Byte (unscaled).</right></line>
  <line><left><a href="ldrh_imm.xml">LDRH (immediate)</a>: </left><right>Load Register Halfword (immediate).</right></line>
  <line><left><a href="ldrh_reg.xml">LDRH (register)</a>: </left><right>Load Register Halfword (register).</right></line>
  <line><left><a href="ldtrh.xml">LDTRH</a>: </left><right>Load Register Halfword (unprivileged).</right></line>
  <line><left><a href="ldurh.xml">LDURH</a>: </left><right>Load Register Halfword (unscaled).</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: </left><right>Load Register Signed Byte (immediate).</right></line>
  <line><left><a href="ldrsb_reg.xml">LDRSB (register)</a>: </left><right>Load Register Signed Byte (register).</right></line>
  <line><left><a href="ldtrsb.xml">LDTRSB</a>: </left><right>Load Register Signed Byte (unprivileged).</right></line>
  <line><left><a href="ldursb.xml">LDURSB</a>: </left><right>Load Register Signed Byte (unscaled).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: </left><right>Load Register Signed Halfword (immediate).</right></line>
  <line><left><a href="ldrsh_reg.xml">LDRSH (register)</a>: </left><right>Load Register Signed Halfword (register).</right></line>
  <line><left><a href="ldtrsh.xml">LDTRSH</a>: </left><right>Load Register Signed Halfword (unprivileged).</right></line>
  <line><left><a href="ldursh.xml">LDURSH</a>: </left><right>Load Register Signed Halfword (unscaled).</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: </left><right>Load Register Signed Word (immediate).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (literal)</a>: </left><right>Load Register Signed Word (literal).</right></line>
  <line><left><a href="ldrsw_reg.xml">LDRSW (register)</a>: </left><right>Load Register Signed Word (register).</right></line>
  <line><left><a href="ldtrsw.xml">LDTRSW</a>: </left><right>Load Register Signed Word (unprivileged).</right></line>
  <line><left><a href="ldursw.xml">LDURSW</a>: </left><right>Load Register Signed Word (unscaled).</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: </left><right>Load SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: </left><right>Load SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: </left><right>Load SIMD&amp;FP Register (register offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: </left><right>Load SIMD&amp;FP Register (unscaled offset).</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: </left><right>Load single 2-element structure and Replicate to all lanes of two registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: </left><right>Load single 2-element structure to one lane of two registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: </left><right>Load single 3-element structure and Replicate to all lanes of three registers.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: </left><right>Load single 3-element structure to one lane of three registers).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: </left><right>Load single 4-element structure and Replicate to all lanes of four registers.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: </left><right>Load single 4-element structure to one lane of four registers.</right></line>
  <line><left><a href="ldaxp.xml">LDAXP</a>: </left><right>Load-Acquire Exclusive Pair of Registers.</right></line>
  <line><left><a href="ldaxrb.xml">LDAXRB</a>: </left><right>Load-Acquire Exclusive Register Byte.</right></line>
  <line><left><a href="ldaxrh.xml">LDAXRH</a>: </left><right>Load-Acquire Exclusive Register Halfword.</right></line>
  <line><left><a href="ldaxr.xml">LDAXR</a>: </left><right>Load-Acquire Exclusive Register.</right></line>
  <line><left><a href="ldarb.xml">LDARB</a>: </left><right>Load-Acquire Register Byte.</right></line>
  <line><left><a href="ldarh.xml">LDARH</a>: </left><right>Load-Acquire Register Halfword.</right></line>
  <line><left><a href="ldar.xml">LDAR</a>: </left><right>Load-Acquire Register.</right></line>
  <line><left><a href="sevl.xml">SEVL</a>: Send Event </left><right>Local.</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: </left><right>Logical Shift Left (immediate): an alias of UBFM.</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: </left><right>Logical Shift Left (register): an alias of LSLV.</right></line>
  <line><left><a href="lslv.xml">LSLV</a>: </left><right>Logical Shift Left Variable.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: </left><right>Logical Shift Right (immediate): an alias of UBFM.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: </left><right>Logical Shift Right (register): an alias of LSRV.</right></line>
  <line><left><a href="lsrv.xml">LSRV</a>: </left><right>Logical Shift Right Variable.</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, SHLL2</a>: Shift Left </left><right>Long (by element size).</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating Doubling Multiply-Add </left><right>Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating Doubling Multiply-Subtract </left><right>Long (by element).</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed saturating Doubling Multiply </left><right>Long (by element).</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: Signed Shift Left </left><right>Long (immediate).</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: Unsigned Shift Left </left><right>Long (immediate).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point Convert to higher precision </left><right>Long (vector).</right></line>
  <line><left><a href="saddl_advsimd.xml">SADDL, SADDL2</a>: Signed Add </left><right>Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: Signed Multiply-Add </left><right>Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: Signed Multiply-Subtract </left><right>Long (vector).</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (vector)</a>: Signed Multiply </left><right>Long (vector).</right></line>
  <line><left><a href="uaddl_advsimd.xml">UADDL, UADDL2</a>: Unsigned Add </left><right>Long (vector).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: Unsigned Multiply-Add </left><right>Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: Unsigned Multiply-Subtract </left><right>Long (vector).</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (vector)</a>: Unsigned Multiply </left><right>long (vector).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed Multiply-Add </left><right>Long (vector, by element).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed Multiply-Subtract </left><right>Long (vector, by element).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: Signed Multiply </left><right>Long (vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned Multiply-Add </left><right>Long (vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned Multiply-Subtract </left><right>Long (vector, by element).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: Unsigned Multiply </left><right>Long (vector, by element).</right></line>
  <line><left><a href="saddlv_advsimd.xml">SADDLV</a>: Signed Add </left><right>Long across Vector.</right></line>
  <line><left><a href="uaddlv_advsimd.xml">UADDLV</a>: Unsigned sum </left><right>Long across Vector.</right></line>
  <line><left><a href="sadalp_advsimd.xml">SADALP</a>: Signed Add and Accumulate </left><right>Long Pairwise.</right></line>
  <line><left><a href="saddlp_advsimd.xml">SADDLP</a>: Signed Add </left><right>Long Pairwise.</right></line>
  <line><left><a href="uadalp_advsimd.xml">UADALP</a>: Unsigned Add and Accumulate </left><right>Long Pairwise.</right></line>
  <line><left><a href="uaddlp_advsimd.xml">UADDLP</a>: Unsigned Add </left><right>Long Pairwise.</right></line>
  <line><left><a href="pmull_advsimd.xml">PMULL, PMULL2</a>: Polynomial Multiply </left><right>Long.</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: Signed Absolute difference and Accumulate </left><right>Long.</right></line>
  <line><left><a href="sabdl_advsimd.xml">SABDL, SABDL2</a>: Signed Absolute Difference </left><right>Long.</right></line>
  <line><left><a href="smaddl.xml">SMADDL</a>: Signed Multiply-Add </left><right>Long.</right></line>
  <line><left><a href="smsubl.xml">SMSUBL</a>: Signed Multiply-Subtract </left><right>Long.</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed saturating Doubling Multiply-Add </left><right>Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed saturating Doubling Multiply-Subtract </left><right>Long.</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: Signed saturating Doubling Multiply </left><right>Long.</right></line>
  <line><left><a href="ssubl_advsimd.xml">SSUBL, SSUBL2</a>: Signed Subtract </left><right>Long.</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: Unsigned Absolute difference and Accumulate </left><right>Long.</right></line>
  <line><left><a href="uabdl_advsimd.xml">UABDL, UABDL2</a>: Unsigned Absolute Difference </left><right>Long.</right></line>
  <line><left><a href="umaddl.xml">UMADDL</a>: Unsigned Multiply-Add </left><right>Long.</right></line>
  <line><left><a href="umsubl.xml">UMSUBL</a>: Unsigned Multiply-Subtract </left><right>Long.</right></line>
  <line><left><a href="usubl_advsimd.xml">USUBL, USUBL2</a>: Unsigned Subtract </left><right>Long.</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: Signed Multiply </left><right>Long: an alias of SMADDL.</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-Negate </left><right>Long: an alias of SMSUBL.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend </left><right>Long: an alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: Unsigned Multiply </left><right>Long: an alias of UMADDL.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-Negate </left><right>Long: an alias of UMSUBL.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend </left><right>Long: an alias of USHLL, USHLL2.</right></line>
  <line><left><a href="tbx_advsimd.xml">TBX</a>: Table vector </left><right>lookup extension.</right></line>
  <line><left><a href="tbl_advsimd.xml">TBL</a>: Table vector </left><right>Lookup.</right></line>
  <line><left><a href="bfxil_bfm.xml">BFXIL</a>: Bitfield extract and insert at </left><right>low end: an alias of BFM.</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point Convert to </left><right>lower precision Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to </left><right>lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left></left><right><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift Left (immediate): an alias of UBFM.</right></line>
  <line><left></left><right><a href="lsl_lslv.xml">LSL (register)</a>: Logical Shift Left (register): an alias of LSLV.</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: Logical Shift Left (register): an alias of </left><right>LSLV.</right></line>
  <line><left></left><right><a href="lslv.xml">LSLV</a>: Logical Shift Left Variable.</right></line>
  <line><left></left><right><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift Right (immediate): an alias of UBFM.</right></line>
  <line><left></left><right><a href="lsr_lsrv.xml">LSR (register)</a>: Logical Shift Right (register): an alias of LSRV.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: Logical Shift Right (register): an alias of </left><right>LSRV.</right></line>
  <line><left></left><right><a href="lsrv.xml">LSRV</a>: Logical Shift Right Variable.</right></line>
  <line initialtag="M"><left><a href="mul_madd.xml">MUL</a>: Multiply: an alias of </left><right>MADD.</right></line>
  <line><left></left><right><a href="madd.xml">MADD</a>: Multiply-Add.</right></line>
  <line><left><a href="sha1m_advsimd.xml">SHA1M</a>: SHA1 hash update (</left><right>majority).</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: Conditional Set </left><right>Mask: an alias of CSINV.</right></line>
  <line><left><a href="fmax_float.xml">FMAX (scalar)</a>: Floating-point </left><right>Maximum (scalar).</right></line>
  <line><left><a href="fmax_advsimd.xml">FMAX (vector)</a>: Floating-point </left><right>Maximum (vector).</right></line>
  <line><left><a href="smax_advsimd.xml">SMAX</a>: Signed </left><right>Maximum (vector).</right></line>
  <line><left><a href="umax_advsimd.xml">UMAX</a>: Unsigned </left><right>Maximum (vector).</right></line>
  <line><left><a href="fmaxv_advsimd.xml">FMAXV</a>: Floating-point </left><right>Maximum across Vector.</right></line>
  <line><left><a href="smaxv_advsimd.xml">SMAXV</a>: Signed </left><right>Maximum across Vector.</right></line>
  <line><left><a href="umaxv_advsimd.xml">UMAXV</a>: Unsigned </left><right>Maximum across Vector.</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: Floating-point </left><right>Maximum Number (scalar).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: Floating-point </left><right>Maximum Number (vector).</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-point </left><right>Maximum Number across Vector.</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point </left><right>Maximum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-point </left><right>Maximum Number Pairwise (vector).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-point </left><right>Maximum of Pair of elements (scalar).</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed </left><right>maximum on byte in memory, without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned </left><right>maximum on byte in memory, without return.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed </left><right>maximum on byte in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned </left><right>maximum on byte in memory.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed </left><right>maximum on halfword in memory, without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned </left><right>maximum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed </left><right>maximum on halfword in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned </left><right>maximum on halfword in memory.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed </left><right>maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned </left><right>maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed </left><right>maximum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned </left><right>maximum on word or doubleword in memory.</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: Floating-point </left><right>Maximum Pairwise (vector).</right></line>
  <line><left><a href="smaxp_advsimd.xml">SMAXP</a>: Signed </left><right>Maximum Pairwise.</right></line>
  <line><left><a href="umaxp_advsimd.xml">UMAXP</a>: Unsigned </left><right>Maximum Pairwise.</right></line>
  <line><left><a href="prfm_imm.xml">PRFM (immediate)</a>: Prefetch </left><right>Memory (immediate).</right></line>
  <line><left><a href="prfm_lit.xml">PRFM (literal)</a>: Prefetch </left><right>Memory (literal).</right></line>
  <line><left><a href="prfm_reg.xml">PRFM (register)</a>: Prefetch </left><right>Memory (register).</right></line>
  <line><left><a href="prfum.xml">PRFM (unscaled offset)</a>: Prefetch </left><right>Memory (unscaled offset).</right></line>
  <line><left><a href="dmb.xml">DMB</a>: Data </left><right>Memory Barrier.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on word or doubleword in </left><right>memory, without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum on byte in </left><right>memory, without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum on halfword in </left><right>memory, without return.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: Compare and Swap word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, CASALB, CASLB</a>: Compare and Swap byte in </left><right>memory.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, CASALH, CASLH</a>: Compare and Swap halfword in </left><right>memory.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and Swap Pair of words or doublewords in </left><right>memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic add on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: Atomic add on byte in </left><right>memory.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: Atomic add on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit clear on byte in </left><right>memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit clear on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive OR on byte in </left><right>memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive OR on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit set on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit set on byte in </left><right>memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit set on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum on byte in </left><right>memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed minimum on byte in </left><right>memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed minimum on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum on byte in </left><right>memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum on halfword in </left><right>memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum on byte in </left><right>memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum on halfword in </left><right>memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, SWPAL, SWPL</a>: Swap word or doubleword in </left><right>memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, SWPAB, SWPALB, SWPLB</a>: Swap byte in </left><right>memory.</right></line>
  <line><left><a href="swph.xml">SWPH, SWPAH, SWPALH, SWPLH</a>: Swap halfword in </left><right>memory.</right></line>
  <line><left><a href="fmin_float.xml">FMIN (scalar)</a>: Floating-point </left><right>Minimum (scalar).</right></line>
  <line><left><a href="fmin_advsimd.xml">FMIN (vector)</a>: Floating-point </left><right>minimum (vector).</right></line>
  <line><left><a href="smin_advsimd.xml">SMIN</a>: Signed </left><right>Minimum (vector).</right></line>
  <line><left><a href="umin_advsimd.xml">UMIN</a>: Unsigned </left><right>Minimum (vector).</right></line>
  <line><left><a href="fminv_advsimd.xml">FMINV</a>: Floating-point </left><right>Minimum across Vector.</right></line>
  <line><left><a href="sminv_advsimd.xml">SMINV</a>: Signed </left><right>Minimum across Vector.</right></line>
  <line><left><a href="uminv_advsimd.xml">UMINV</a>: Unsigned </left><right>Minimum across Vector.</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (scalar)</a>: Floating-point </left><right>Minimum Number (scalar).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: Floating-point </left><right>Minimum Number (vector).</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-point </left><right>Minimum Number across Vector.</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point </left><right>Minimum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-point </left><right>Minimum Number Pairwise (vector).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-point </left><right>Minimum of Pair of elements (scalar).</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed </left><right>minimum on byte in memory, without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned </left><right>minimum on byte in memory, without return.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed </left><right>minimum on byte in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned </left><right>minimum on byte in memory.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed </left><right>minimum on halfword in memory, without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned </left><right>minimum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed </left><right>minimum on halfword in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned </left><right>minimum on halfword in memory.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed </left><right>minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned </left><right>minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed </left><right>minimum on word or doubleword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned </left><right>minimum on word or doubleword in memory.</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: Floating-point </left><right>Minimum Pairwise (vector).</right></line>
  <line><left><a href="sminp_advsimd.xml">SMINP</a>: Signed </left><right>Minimum Pairwise.</right></line>
  <line><left><a href="uminp_advsimd.xml">UMINP</a>: Unsigned </left><right>Minimum Pairwise.</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to Integral, toward </left><right>Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Minus infinity (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Minus infinity (vector).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to Integral, toward </left><right>Minus infinity (vector).</right></line>
  <line><left><a href="aesimc_advsimd.xml">AESIMC</a>: AES inverse </left><right>mix columns.</right></line>
  <line><left><a href="aesmc_advsimd.xml">AESMC</a>: AES </left><right>mix columns.</right></line>
  <line><left></left><right><a href="mla_advsimd_elt.xml">MLA (by element)</a>: Multiply-Add to accumulator (vector, by element).</right></line>
  <line><left></left><right><a href="mla_advsimd_vec.xml">MLA (vector)</a>: Multiply-Add to accumulator (vector).</right></line>
  <line><left></left><right><a href="mls_advsimd_elt.xml">MLS (by element)</a>: Multiply-Subtract from accumulator (vector, by element).</right></line>
  <line><left></left><right><a href="mls_advsimd_vec.xml">MLS (vector)</a>: Multiply-Subtract from accumulator (vector).</right></line>
  <line><left></left><right><a href="mneg_msub.xml">MNEG</a>: Multiply-Negate: an alias of MSUB.</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, using current rounding </left><right>mode (scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, using current rounding </left><right>mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, using current rounding </left><right>mode (vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, using current rounding </left><right>mode (vector).</right></line>
  <line><left><a href="smc.xml">SMC</a>: Secure </left><right>Monitor Call.</right></line>
  <line><left></left><right><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask immediate): an alias of ORR (immediate).</right></line>
  <line><left></left><right><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another vector element: an alias of INS (element).</right></line>
  <line><left></left><right><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a vector element: an alias of INS (general).</right></line>
  <line><left></left><right><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted wide immediate): an alias of MOVN.</right></line>
  <line><left></left><right><a href="mov_orr_log_shift.xml">MOV (register)</a>: Move (register): an alias of ORR (shifted register).</right></line>
  <line><left></left><right><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to scalar: an alias of DUP (element).</right></line>
  <line><left></left><right><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to general-purpose register: an alias of UMOV.</right></line>
  <line><left></left><right><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack pointer: an alias of ADD (immediate).</right></line>
  <line><left></left><right><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move vector: an alias of ORR (vector, register).</right></line>
  <line><left></left><right><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (wide immediate): an alias of MOVZ.</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: </left><right>Move (bitmask immediate): an alias of ORR (immediate).</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: </left><right>Move (inverted wide immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_orr_log_shift.xml">MOV (register)</a>: </left><right>Move (register): an alias of ORR (shifted register).</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: </left><right>Move (wide immediate): an alias of MOVZ.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: </left><right>Move between register and stack pointer: an alias of ADD (immediate).</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: </left><right>Move general-purpose register to a vector element: an alias of INS (general).</right></line>
  <line><left><a href="msr_reg.xml">MSR (register)</a>: </left><right>Move general-purpose register to System Register.</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: Floating-point </left><right>move immediate (scalar).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: Floating-point </left><right>move immediate (vector).</right></line>
  <line><left><a href="movi_advsimd.xml">MOVI</a>: </left><right>Move Immediate (vector).</right></line>
  <line><left><a href="msr_imm.xml">MSR (immediate)</a>: </left><right>Move immediate value to Special Register.</right></line>
  <line><left><a href="mvni_advsimd.xml">MVNI</a>: </left><right>Move inverted Immediate (vector).</right></line>
  <line><left><a href="fmov_float.xml">FMOV (register)</a>: Floating-point </left><right>Move register without conversion.</right></line>
  <line><left><a href="mrs.xml">MRS</a>: </left><right>Move System Register.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point </left><right>Move to or from general-purpose register without conversion.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: </left><right>Move vector element to another vector element: an alias of INS (element).</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: Signed </left><right>Move vector element to general-purpose register.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: Unsigned </left><right>Move vector element to general-purpose register.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: </left><right>Move vector element to general-purpose register: an alias of UMOV.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: </left><right>Move vector element to scalar: an alias of DUP (element).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: </left><right>Move vector: an alias of ORR (vector, register).</right></line>
  <line><left><a href="movk.xml">MOVK</a>: </left><right>Move wide with keep.</right></line>
  <line><left><a href="movn.xml">MOVN</a>: </left><right>Move wide with NOT.</right></line>
  <line><left><a href="movz.xml">MOVZ</a>: </left><right>Move wide with zero.</right></line>
  <line><left><a href="bfm.xml">BFM</a>: Bitfield </left><right>Move.</right></line>
  <line><left><a href="sbfm.xml">SBFM</a>: Signed Bitfield </left><right>Move.</right></line>
  <line><left><a href="ubfm.xml">UBFM</a>: Unsigned Bitfield </left><right>Move.</right></line>
  <line><left></left><right><a href="movi_advsimd.xml">MOVI</a>: Move Immediate (vector).</right></line>
  <line><left></left><right><a href="movk.xml">MOVK</a>: Move wide with keep.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted wide immediate): an alias of </left><right>MOVN.</right></line>
  <line><left></left><right><a href="movn.xml">MOVN</a>: Move wide with NOT.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (wide immediate): an alias of </left><right>MOVZ.</right></line>
  <line><left></left><right><a href="movz.xml">MOVZ</a>: Move wide with zero.</right></line>
  <line><left></left><right><a href="mrs.xml">MRS</a>: Move System Register.</right></line>
  <line><left></left><right><a href="msr_imm.xml">MSR (immediate)</a>: Move immediate value to Special Register.</right></line>
  <line><left></left><right><a href="msr_reg.xml">MSR (register)</a>: Move general-purpose register to System Register.</right></line>
  <line><left><a href="mneg_msub.xml">MNEG</a>: Multiply-Negate: an alias of </left><right>MSUB.</right></line>
  <line><left></left><right><a href="msub.xml">MSUB</a>: Multiply-Subtract.</right></line>
  <line><left></left><right><a href="mul_advsimd_elt.xml">MUL (by element)</a>: Multiply (vector, by element).</right></line>
  <line><left></left><right><a href="mul_advsimd_vec.xml">MUL (vector)</a>: Multiply (vector).</right></line>
  <line><left></left><right><a href="mul_madd.xml">MUL</a>: Multiply: an alias of MADD.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: Store </left><right>multiple 2-element structures from two registers.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: Load </left><right>multiple 2-element structures to two registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: Store </left><right>multiple 3-element structures from three registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: Load </left><right>multiple 3-element structures to three registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: Store </left><right>multiple 4-element structures from four registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: Load </left><right>multiple 4-element structures to four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store </left><right>multiple single-element structures from one, two, three, or four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load </left><right>multiple single-element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (</a></left><right><a href="ld2_advsimd_mult.xml">multiple structures)</a>: Load multiple 2-element structures to two registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (</a></left><right><a href="ld3_advsimd_mult.xml">multiple structures)</a>: Load multiple 3-element structures to three registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (</a></left><right><a href="ld4_advsimd_mult.xml">multiple structures)</a>: Load multiple 4-element structures to four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (</a></left><right><a href="ld1_advsimd_mult.xml">multiple structures)</a>: Load multiple single-element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (</a></left><right><a href="st2_advsimd_mult.xml">multiple structures)</a>: Store multiple 2-element structures from two registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (</a></left><right><a href="st3_advsimd_mult.xml">multiple structures)</a>: Store multiple 3-element structures from three registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (</a></left><right><a href="st4_advsimd_mult.xml">multiple structures)</a>: Store multiple 4-element structures from four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (</a></left><right><a href="st1_advsimd_mult.xml">multiple structures)</a>: Store multiple single-element structures from one, two, three, or four registers.</right></line>
  <line><left><a href="fmul_advsimd_elt.xml">FMUL (by element)</a>: Floating-point </left><right>Multiply (by element).</right></line>
  <line><left><a href="fmul_float.xml">FMUL (scalar)</a>: Floating-point </left><right>Multiply (scalar).</right></line>
  <line><left><a href="fmul_advsimd_vec.xml">FMUL (vector)</a>: Floating-point </left><right>Multiply (vector).</right></line>
  <line><left><a href="mul_advsimd_vec.xml">MUL (vector)</a>: </left><right>Multiply (vector).</right></line>
  <line><left><a href="mul_advsimd_elt.xml">MUL (by element)</a>: </left><right>Multiply (vector, by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling </left><right>Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling </left><right>Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: Floating-point </left><right>Multiply extended (by element).</right></line>
  <line><left><a href="fmulx_advsimd_vec.xml">FMULX</a>: Floating-point </left><right>Multiply extended.</right></line>
  <line><left><a href="smulh.xml">SMULH</a>: Signed </left><right>Multiply High.</right></line>
  <line><left><a href="umulh.xml">UMULH</a>: Unsigned </left><right>Multiply High.</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed saturating Doubling </left><right>Multiply Long (by element).</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (vector)</a>: Signed </left><right>Multiply Long (vector).</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (vector)</a>: Unsigned </left><right>Multiply long (vector).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: Signed </left><right>Multiply Long (vector, by element).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: Unsigned </left><right>Multiply Long (vector, by element).</right></line>
  <line><left><a href="pmull_advsimd.xml">PMULL, PMULL2</a>: Polynomial </left><right>Multiply Long.</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: Signed saturating Doubling </left><right>Multiply Long.</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: Signed </left><right>Multiply Long: an alias of SMADDL.</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: Unsigned </left><right>Multiply Long: an alias of UMADDL.</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling </left><right>Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling </left><right>Multiply returning High half (by element).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating Doubling </left><right>Multiply returning High half.</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding Doubling </left><right>Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling </left><right>Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling </left><right>Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: Floating-point fused </left><right>Multiply-Add (scalar).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-point Negated fused </left><right>Multiply-Add (scalar).</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating Doubling </left><right>Multiply-Add Long (by element).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: Signed </left><right>Multiply-Add Long (vector).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: Unsigned </left><right>Multiply-Add Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed </left><right>Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned </left><right>Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="smaddl.xml">SMADDL</a>: Signed </left><right>Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed saturating Doubling </left><right>Multiply-Add Long.</right></line>
  <line><left><a href="umaddl.xml">UMADDL</a>: Unsigned </left><right>Multiply-Add Long.</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-point fused </left><right>Multiply-Add to accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point fused </left><right>Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_vec.xml">MLA (vector)</a>: </left><right>Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by element)</a>: </left><right>Multiply-Add to accumulator (vector, by element).</right></line>
  <line><left><a href="madd.xml">MADD</a>: </left><right>Multiply-Add.</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (scalar)</a>: Floating-point </left><right>Multiply-Negate (scalar).</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed </left><right>Multiply-Negate Long: an alias of SMSUBL.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned </left><right>Multiply-Negate Long: an alias of UMSUBL.</right></line>
  <line><left><a href="mneg_msub.xml">MNEG</a>: </left><right>Multiply-Negate: an alias of MSUB.</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: Floating-point Fused </left><right>Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point Negated fused </left><right>Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point fused </left><right>Multiply-Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point fused </left><right>Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_vec.xml">MLS (vector)</a>: </left><right>Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by element)</a>: </left><right>Multiply-Subtract from accumulator (vector, by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating Doubling </left><right>Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: Signed </left><right>Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: Unsigned </left><right>Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed </left><right>Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned </left><right>Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="smsubl.xml">SMSUBL</a>: Signed </left><right>Multiply-Subtract Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed saturating Doubling </left><right>Multiply-Subtract Long.</right></line>
  <line><left><a href="umsubl.xml">UMSUBL</a>: Unsigned </left><right>Multiply-Subtract Long.</right></line>
  <line><left><a href="msub.xml">MSUB</a>: </left><right>Multiply-Subtract.</right></line>
  <line><left><a href="pmul_advsimd.xml">PMUL</a>: Polynomial </left><right>Multiply.</right></line>
  <line><left><a href="mul_madd.xml">MUL</a>: </left><right>Multiply: an alias of MADD.</right></line>
  <line><left></left><right><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise NOT (vector): an alias of NOT.</right></line>
  <line><left></left><right><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise NOT: an alias of ORN (shifted register).</right></line>
  <line><left></left><right><a href="mvni_advsimd.xml">MVNI</a>: Move inverted Immediate (vector).</right></line>
  <line initialtag="N"><left><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: Rounding Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="shrn_advsimd.xml">SHRN, SHRN2</a>: Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating Rounded Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded Shift Right Unsigned </left><right>Narrow (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed saturating Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating Shift Right Unsigned </left><right>Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating Rounded Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned saturating Shift Right </left><right>Narrow (immediate).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point Convert to lower precision </left><right>Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower precision </left><right>Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="addhn_advsimd.xml">ADDHN, ADDHN2</a>: Add returning High </left><right>Narrow.</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: Rounding Add returning High </left><right>Narrow.</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: Rounding Subtract returning High </left><right>Narrow.</right></line>
  <line><left><a href="sqxtn_advsimd.xml">SQXTN, SQXTN2</a>: Signed saturating extract </left><right>Narrow.</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: Signed saturating extract Unsigned </left><right>Narrow.</right></line>
  <line><left><a href="subhn_advsimd.xml">SUBHN, SUBHN2</a>: Subtract returning High </left><right>Narrow.</right></line>
  <line><left><a href="uqxtn_advsimd.xml">UQXTN, UQXTN2</a>: Unsigned saturating extract </left><right>Narrow.</right></line>
  <line><left><a href="xtn_advsimd.xml">XTN, XTN2</a>: Extract </left><right>Narrow.</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, rounding to </left><right>nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to </left><right>nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to Integral, to </left><right>nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, rounding to </left><right>nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to </left><right>nearest with ties to Away (vector).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to Integral, to </left><right>nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, rounding to </left><right>nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to </left><right>nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to Integral, to </left><right>nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, rounding to </left><right>nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to </left><right>nearest with ties to even (vector).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to Integral, to </left><right>nearest with ties to even (vector).</right></line>
  <line><left></left><right><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (shifted register): an alias of SUB (shifted register).</right></line>
  <line><left></left><right><a href="neg_advsimd.xml">NEG (vector)</a>: Negate (vector).</right></line>
  <line><left><a href="fneg_float.xml">FNEG (scalar)</a>: Floating-point </left><right>Negate (scalar).</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (scalar)</a>: Floating-point Multiply-</left><right>Negate (scalar).</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: </left><right>Negate (shifted register): an alias of SUB (shifted register).</right></line>
  <line><left><a href="fneg_advsimd.xml">FNEG (vector)</a>: Floating-point </left><right>Negate (vector).</right></line>
  <line><left><a href="neg_advsimd.xml">NEG (vector)</a>: </left><right>Negate (vector).</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-</left><right>Negate Long: an alias of SMSUBL.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-</left><right>Negate Long: an alias of UMSUBL.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: </left><right>Negate with Carry, setting flags: an alias of SBCS.</right></line>
  <line><left><a href="ngc_sbc.xml">NGC</a>: </left><right>Negate with Carry: an alias of SBC.</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: </left><right>Negate, setting flags: an alias of SUBS (shifted register).</right></line>
  <line><left><a href="sqneg_advsimd.xml">SQNEG</a>: Signed saturating </left><right>Negate.</right></line>
  <line><left><a href="cneg_csneg.xml">CNEG</a>: Conditional </left><right>Negate: an alias of CSNEG.</right></line>
  <line><left><a href="mneg_msub.xml">MNEG</a>: Multiply-</left><right>Negate: an alias of MSUB.</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-point </left><right>Negated fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point </left><right>Negated fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="csneg.xml">CSNEG</a>: Conditional Select </left><right>Negation.</right></line>
  <line><left><a href="cmn_adds_addsub_ext.xml">CMN (extended register)</a>: Compare </left><right>Negative (extended register): an alias of ADDS (extended register).</right></line>
  <line><left><a href="ccmn_imm.xml">CCMN (immediate)</a>: Conditional Compare </left><right>Negative (immediate).</right></line>
  <line><left><a href="cmn_adds_addsub_imm.xml">CMN (immediate)</a>: Compare </left><right>Negative (immediate): an alias of ADDS (immediate).</right></line>
  <line><left><a href="ccmn_reg.xml">CCMN (register)</a>: Conditional Compare </left><right>Negative (register).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare </left><right>Negative (shifted register): an alias of ADDS (shifted register).</right></line>
  <line><left></left><right><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting flags: an alias of SUBS (shifted register).</right></line>
  <line><left></left><right><a href="ngc_sbc.xml">NGC</a>: Negate with Carry: an alias of SBC.</right></line>
  <line><left></left><right><a href="ngcs_sbcs.xml">NGCS</a>: Negate with Carry, setting flags: an alias of SBCS.</right></line>
  <line><left><a href="nop.xml">NOP</a>: </left><right>No Operation.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers, with </left><right>Non-temporal hint.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: Load Pair of Registers, with </left><right>non-temporal hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers, with </left><right>Non-temporal hint.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: Store Pair of Registers, with </left><right>non-temporal hint.</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: Compare bitwise Test bits </left><right>nonzero (vector).</right></line>
  <line><left><a href="cbnz.xml">CBNZ</a>: Compare and Branch on </left><right>Nonzero.</right></line>
  <line><left><a href="tbnz.xml">TBNZ</a>: Test bit and Branch if </left><right>Nonzero.</right></line>
  <line><left></left><right><a href="nop.xml">NOP</a>: No Operation.</right></line>
  <line><left><a href="eon.xml">EON (shifted register)</a>: Bitwise Exclusive OR </left><right>NOT (shifted register).</right></line>
  <line><left><a href="orn_log_shift.xml">ORN (shifted register)</a>: Bitwise OR </left><right>NOT (shifted register).</right></line>
  <line><left><a href="not_advsimd.xml">NOT</a>: Bitwise </left><right>NOT (vector).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (vector)</a>: Bitwise inclusive OR </left><right>NOT (vector).</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise </left><right>NOT (vector): an alias of NOT.</right></line>
  <line><left><a href="movn.xml">MOVN</a>: Move wide with </left><right>NOT.</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise NOT (vector): an alias of </left><right>NOT.</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise </left><right>NOT: an alias of ORN (shifted register).</right></line>
  <line><left></left><right><a href="not_advsimd.xml">NOT</a>: Bitwise NOT (vector).</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: Floating-point Maximum </left><right>Number (scalar).</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (scalar)</a>: Floating-point Minimum </left><right>Number (scalar).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: Floating-point Maximum </left><right>Number (vector).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: Floating-point Minimum </left><right>Number (vector).</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-point Maximum </left><right>Number across Vector.</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-point Minimum </left><right>Number across Vector.</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point Maximum </left><right>Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point Minimum </left><right>Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-point Maximum </left><right>Number Pairwise (vector).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-point Minimum </left><right>Number Pairwise (vector).</right></line>
  <line initialtag="O"><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower precision Narrow, rounding to </left><right>odd (vector).</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (immediate </left><right>offset).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (register </left><right>offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (unscaled </left><right>offset).</right></line>
  <line><left><a href="prfum.xml">PRFM (unscaled offset)</a>: Prefetch Memory (unscaled </left><right>offset).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (immediate </left><right>offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (register </left><right>offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: Store SIMD&amp;FP register (unscaled </left><right>offset).</right></line>
  <line><left><a href="prfum.xml">PRFM (unscaled </a></left><right><a href="prfum.xml">offset)</a>: Prefetch Memory (unscaled offset).</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum </left><right>on byte in memory, without return.</right></line>
  <line><left><a href="ldaddb.xml">LDADDB, LDADDAB, LDADDALB, LDADDLB</a>: Atomic add </left><right>on byte in memory.</right></line>
  <line><left><a href="ldclrb.xml">LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB</a>: Atomic bit clear </left><right>on byte in memory.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive OR </left><right>on byte in memory.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit set </left><right>on byte in memory.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic signed maximum </left><right>on byte in memory.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic signed minimum </left><right>on byte in memory.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic unsigned maximum </left><right>on byte in memory.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic unsigned minimum </left><right>on byte in memory.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum </left><right>on halfword in memory, without return.</right></line>
  <line><left><a href="ldaddh.xml">LDADDH, LDADDAH, LDADDALH, LDADDLH</a>: Atomic add </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldclrh.xml">LDCLRH, LDCLRAH, LDCLRALH, LDCLRLH</a>: Atomic bit clear </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive OR </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit set </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic signed maximum </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic signed minimum </left><right>on halfword in memory.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic unsigned maximum </left><right>on halfword in memory.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic unsigned minimum </left><right>on halfword in memory.</right></line>
  <line><left><a href="cbnz.xml">CBNZ</a>: Compare and Branch </left><right>on Nonzero.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum </left><right>on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic add </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit set </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum </left><right>on word or doubleword in memory.</right></line>
  <line><left><a href="cbz.xml">CBZ</a>: Compare and Branch </left><right>on Zero.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single 4-element structure to </left><right>one lane of four registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single 4-element structure from </left><right>one lane of four registers.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-element structure to </left><right>one lane of one register.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-element structure from </left><right>one lane of one register.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single 3-element structure to </left><right>one lane of three registers).</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single 3-element structure from </left><right>one lane of three registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single 2-element structure to </left><right>one lane of two registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single 2-element structure from </left><right>one lane of two registers.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element structure and Replicate to all lanes (of </left><right>one register).</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-element structure to one lane of </left><right>one register.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-element structure from one lane of </left><right>one register.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load </left><right>one single-element structure and Replicate to all lanes (of one register).</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load </left><right>one single-element structure to one lane of one register.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element structures to </left><right>one, two, three, or four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element structures from </left><right>one, two, three, or four registers.</right></line>
  <line><left><a href="nop.xml">NOP</a>: No </left><right>Operation.</right></line>
  <line><left><a href="dc_sys.xml">DC</a>: Data Cache </left><right>operation: an alias of SYS.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: Instruction Cache </left><right>operation: an alias of SYS.</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: TLB Invalidate </left><right>operation: an alias of SYS.</right></line>
  <line><left><a href="eor_log_imm.xml">EOR (immediate)</a>: Bitwise Exclusive </left><right>OR (immediate).</right></line>
  <line><left><a href="orr_log_imm.xml">ORR (immediate)</a>: Bitwise </left><right>OR (immediate).</right></line>
  <line><left><a href="eor_log_shift.xml">EOR (shifted register)</a>: Bitwise Exclusive </left><right>OR (shifted register).</right></line>
  <line><left><a href="orr_log_shift.xml">ORR (shifted register)</a>: Bitwise </left><right>OR (shifted register).</right></line>
  <line><left><a href="eor_advsimd.xml">EOR (vector)</a>: Bitwise Exclusive </left><right>OR (vector).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: Bitwise inclusive </left><right>OR (vector, immediate).</right></line>
  <line><left><a href="orr_advsimd_reg.xml">ORR (vector, register)</a>: Bitwise inclusive </left><right>OR (vector, register).</right></line>
  <line><left><a href="eon.xml">EON (shifted register)</a>: Bitwise Exclusive </left><right>OR NOT (shifted register).</right></line>
  <line><left><a href="orn_log_shift.xml">ORN (shifted register)</a>: Bitwise </left><right>OR NOT (shifted register).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (vector)</a>: Bitwise inclusive </left><right>OR NOT (vector).</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive </left><right>OR on byte in memory, without return.</right></line>
  <line><left><a href="ldeorb.xml">LDEORB, LDEORAB, LDEORALB, LDEORLB</a>: Atomic exclusive </left><right>OR on byte in memory.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive </left><right>OR on halfword in memory, without return.</right></line>
  <line><left><a href="ldeorh.xml">LDEORH, LDEORAH, LDEORALH, LDEORLH</a>: Atomic exclusive </left><right>OR on halfword in memory.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive </left><right>OR on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive </left><right>OR on word or doubleword in memory.</right></line>
  <line><left><a href="rbit_advsimd.xml">RBIT (vector)</a>: Reverse Bit </left><right>order (vector).</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise NOT: an alias of </left><right>ORN (shifted register).</right></line>
  <line><left></left><right><a href="orn_log_shift.xml">ORN (shifted register)</a>: Bitwise OR NOT (shifted register).</right></line>
  <line><left></left><right><a href="orn_advsimd.xml">ORN (vector)</a>: Bitwise inclusive OR NOT (vector).</right></line>
  <line><left><a href="mov_orr_log_imm.xml">MOV (bitmask immediate)</a>: Move (bitmask immediate): an alias of </left><right>ORR (immediate).</right></line>
  <line><left></left><right><a href="orr_log_imm.xml">ORR (immediate)</a>: Bitwise OR (immediate).</right></line>
  <line><left><a href="mov_orr_log_shift.xml">MOV (register)</a>: Move (register): an alias of </left><right>ORR (shifted register).</right></line>
  <line><left></left><right><a href="orr_log_shift.xml">ORR (shifted register)</a>: Bitwise OR (shifted register).</right></line>
  <line><left></left><right><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: Bitwise inclusive OR (vector, immediate).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move vector: an alias of </left><right>ORR (vector, register).</right></line>
  <line><left></left><right><a href="orr_advsimd_reg.xml">ORR (vector, register)</a>: Bitwise inclusive OR (vector, register).</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving </left><right>other bits unchanged: an alias of BFM.</right></line>
  <line initialtag="P"><left><a href="adrp.xml">ADRP</a>: Form PC-relative address to 4KB </left><right>page.</right></line>
  <line><left><a href="addp_advsimd_pair.xml">ADDP (scalar)</a>: Add </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-point Add </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point Maximum Number of </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-point Maximum of </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point Minimum Number of </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-point Minimum of </left><right>Pair of elements (scalar).</right></line>
  <line><left><a href="ldpsw.xml">LDPSW</a>: Load </left><right>Pair of Registers Signed Word.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: Load </left><right>Pair of Registers, with non-temporal hint.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: Store </left><right>Pair of Registers, with non-temporal hint.</right></line>
  <line><left><a href="ldaxp.xml">LDAXP</a>: Load-Acquire Exclusive </left><right>Pair of Registers.</right></line>
  <line><left><a href="ldp_gen.xml">LDP</a>: Load </left><right>Pair of Registers.</right></line>
  <line><left><a href="ldxp.xml">LDXP</a>: Load Exclusive </left><right>Pair of Registers.</right></line>
  <line><left><a href="stlxp.xml">STLXP</a>: Store-Release Exclusive </left><right>Pair of registers.</right></line>
  <line><left><a href="stp_gen.xml">STP</a>: Store </left><right>Pair of Registers.</right></line>
  <line><left><a href="stxp.xml">STXP</a>: Store Exclusive </left><right>Pair of registers.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load </left><right>Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store </left><right>Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (SIMD&amp;FP)</a>: Load </left><right>Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (SIMD&amp;FP)</a>: Store </left><right>Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="ext_advsimd.xml">EXT</a>: Extract vector from </left><right>pair of vectors.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and Swap </left><right>Pair of words or doublewords in memory.</right></line>
  <line><left><a href="addp_advsimd_vec.xml">ADDP (vector)</a>: Add </left><right>Pairwise (vector).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: Floating-point Add </left><right>Pairwise (vector).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-point Maximum Number </left><right>Pairwise (vector).</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: Floating-point Maximum </left><right>Pairwise (vector).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-point Minimum Number </left><right>Pairwise (vector).</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: Floating-point Minimum </left><right>Pairwise (vector).</right></line>
  <line><left><a href="sadalp_advsimd.xml">SADALP</a>: Signed Add and Accumulate Long </left><right>Pairwise.</right></line>
  <line><left><a href="saddlp_advsimd.xml">SADDLP</a>: Signed Add Long </left><right>Pairwise.</right></line>
  <line><left><a href="smaxp_advsimd.xml">SMAXP</a>: Signed Maximum </left><right>Pairwise.</right></line>
  <line><left><a href="sminp_advsimd.xml">SMINP</a>: Signed Minimum </left><right>Pairwise.</right></line>
  <line><left><a href="uadalp_advsimd.xml">UADALP</a>: Unsigned Add and Accumulate Long </left><right>Pairwise.</right></line>
  <line><left><a href="uaddlp_advsimd.xml">UADDLP</a>: Unsigned Add Long </left><right>Pairwise.</right></line>
  <line><left><a href="umaxp_advsimd.xml">UMAXP</a>: Unsigned Maximum </left><right>Pairwise.</right></line>
  <line><left><a href="uminp_advsimd.xml">UMINP</a>: Unsigned Minimum </left><right>Pairwise.</right></line>
  <line><left><a href="sha1p_advsimd.xml">SHA1P</a>: SHA1 hash update (</left><right>parity).</right></line>
  <line><left><a href="sha256h_advsimd.xml">SHA256H</a>: SHA256 hash update (</left><right>part 1).</right></line>
  <line><left><a href="sha256h2_advsimd.xml">SHA256H2</a>: SHA256 hash update (</left><right>part 2).</right></line>
  <line><left><a href="adrp.xml">ADRP</a>: Form </left><right>PC-relative address to 4KB page.</right></line>
  <line><left><a href="adr.xml">ADR</a>: Form </left><right>PC-relative address.</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (</left><right>PC-relative literal).</right></line>
  <line><left><a href="dcps1.xml">DCPS1</a>: Debug Change </left><right>PE State to EL1..</right></line>
  <line><left><a href="dcps2.xml">DCPS2</a>: Debug Change </left><right>PE State to EL2..</right></line>
  <line><left><a href="dcps3.xml">DCPS3</a>: Debug Change </left><right>PE State to EL3.</right></line>
  <line><left><a href="cnt_advsimd.xml">CNT</a>: Population Count </left><right>per byte.</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to Integral, toward </left><right>Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Plus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Plus infinity (vector).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to Integral, toward </left><right>Plus infinity (vector).</right></line>
  <line><left></left><right><a href="pmul_advsimd.xml">PMUL</a>: Polynomial Multiply.</right></line>
  <line><left></left><right><a href="pmull_advsimd.xml">PMULL, PMULL2</a>: Polynomial Multiply Long.</right></line>
  <line><left><a href="pmull_advsimd.xml">PMULL, </a></left><right><a href="pmull_advsimd.xml">PMULL2</a>: Polynomial Multiply Long.</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-point Convert to Floating-</left><right>point (scalar).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed integer Convert to Floating-</left><right>point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-point Convert to Floating-</left><right>point (scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned integer Convert to Floating-</left><right>point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-point Convert to Floating-</left><right>point (vector).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed integer Convert to Floating-</left><right>point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-point Convert to Floating-</left><right>point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned integer Convert to Floating-</left><right>point (vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: Floating-</left><right>point Absolute Compare Greater than (vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-</left><right>point Absolute Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fabd_advsimd.xml">FABD</a>: Floating-</left><right>point Absolute Difference (vector).</right></line>
  <line><left><a href="fabs_float.xml">FABS (scalar)</a>: Floating-</left><right>point Absolute value (scalar).</right></line>
  <line><left><a href="fabs_advsimd.xml">FABS (vector)</a>: Floating-</left><right>point Absolute value (vector).</right></line>
  <line><left><a href="fadd_float.xml">FADD (scalar)</a>: Floating-</left><right>point Add (scalar).</right></line>
  <line><left><a href="fadd_advsimd.xml">FADD (vector)</a>: Floating-</left><right>point Add (vector).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-</left><right>point Add Pair of elements (scalar).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: Floating-</left><right>point Add Pairwise (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: Floating-</left><right>point Compare Equal (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-</left><right>point Compare Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: Floating-</left><right>point Compare Greater than (vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-</left><right>point Compare Greater than or Equal (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-</left><right>point Compare Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-</left><right>point Compare Greater than zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-</left><right>point Compare Less than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-</left><right>point Compare Less than zero (vector).</right></line>
  <line><left><a href="fccmp_float.xml">FCCMP</a>: Floating-</left><right>point Conditional quiet Compare (scalar).</right></line>
  <line><left><a href="fcsel_float.xml">FCSEL</a>: Floating-</left><right>point Conditional Select (scalar).</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: Floating-</left><right>point Conditional signaling Compare (scalar).</right></line>
  <line><left><a href="fcvt_float.xml">FCVT</a>: Floating-</left><right>point Convert precision (scalar).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-</left><right>point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-</left><right>point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-</left><right>point Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-</left><right>point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-</left><right>point Convert to higher precision Long (vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-</left><right>point Convert to lower precision Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-</left><right>point Convert to lower precision Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-</left><right>point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-</left><right>point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-</left><right>point Convert to Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-</left><right>point Convert to Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-</left><right>point Convert to Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-</left><right>point Convert to Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-</left><right>point Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-</left><right>point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-</left><right>point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-</left><right>point Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fdiv_float.xml">FDIV (scalar)</a>: Floating-</left><right>point Divide (scalar).</right></line>
  <line><left><a href="fdiv_advsimd.xml">FDIV (vector)</a>: Floating-</left><right>point Divide (vector).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: Floating-</left><right>point fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fmla_advsimd_elt.xml">FMLA (by element)</a>: Floating-</left><right>point fused Multiply-Add to accumulator (by element).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-</left><right>point fused Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: Floating-</left><right>point Fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-</left><right>point fused Multiply-Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-</left><right>point fused Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="fmax_float.xml">FMAX (scalar)</a>: Floating-</left><right>point Maximum (scalar).</right></line>
  <line><left><a href="fmax_advsimd.xml">FMAX (vector)</a>: Floating-</left><right>point Maximum (vector).</right></line>
  <line><left><a href="fmaxv_advsimd.xml">FMAXV</a>: Floating-</left><right>point Maximum across Vector.</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: Floating-</left><right>point Maximum Number (scalar).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: Floating-</left><right>point Maximum Number (vector).</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-</left><right>point Maximum Number across Vector.</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-</left><right>point Maximum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-</left><right>point Maximum Number Pairwise (vector).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-</left><right>point Maximum of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: Floating-</left><right>point Maximum Pairwise (vector).</right></line>
  <line><left><a href="fmin_float.xml">FMIN (scalar)</a>: Floating-</left><right>point Minimum (scalar).</right></line>
  <line><left><a href="fmin_advsimd.xml">FMIN (vector)</a>: Floating-</left><right>point minimum (vector).</right></line>
  <line><left><a href="fminv_advsimd.xml">FMINV</a>: Floating-</left><right>point Minimum across Vector.</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (scalar)</a>: Floating-</left><right>point Minimum Number (scalar).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: Floating-</left><right>point Minimum Number (vector).</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-</left><right>point Minimum Number across Vector.</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-</left><right>point Minimum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-</left><right>point Minimum Number Pairwise (vector).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-</left><right>point Minimum of Pair of elements (scalar).</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: Floating-</left><right>point Minimum Pairwise (vector).</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: Floating-</left><right>point move immediate (scalar).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: Floating-</left><right>point move immediate (vector).</right></line>
  <line><left><a href="fmov_float.xml">FMOV (register)</a>: Floating-</left><right>point Move register without conversion.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-</left><right>point Move to or from general-purpose register without conversion.</right></line>
  <line><left><a href="fmul_advsimd_elt.xml">FMUL (by element)</a>: Floating-</left><right>point Multiply (by element).</right></line>
  <line><left><a href="fmul_float.xml">FMUL (scalar)</a>: Floating-</left><right>point Multiply (scalar).</right></line>
  <line><left><a href="fmul_advsimd_vec.xml">FMUL (vector)</a>: Floating-</left><right>point Multiply (vector).</right></line>
  <line><left><a href="fmulx_advsimd_elt.xml">FMULX (by element)</a>: Floating-</left><right>point Multiply extended (by element).</right></line>
  <line><left><a href="fmulx_advsimd_vec.xml">FMULX</a>: Floating-</left><right>point Multiply extended.</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (scalar)</a>: Floating-</left><right>point Multiply-Negate (scalar).</right></line>
  <line><left><a href="fneg_float.xml">FNEG (scalar)</a>: Floating-</left><right>point Negate (scalar).</right></line>
  <line><left><a href="fneg_advsimd.xml">FNEG (vector)</a>: Floating-</left><right>point Negate (vector).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-</left><right>point Negated fused Multiply-Add (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-</left><right>point Negated fused Multiply-Subtract (scalar).</right></line>
  <line><left><a href="fcmp_float.xml">FCMP</a>: Floating-</left><right>point quiet Compare (scalar).</right></line>
  <line><left><a href="frecpe_advsimd.xml">FRECPE</a>: Floating-</left><right>point Reciprocal Estimate.</right></line>
  <line><left><a href="frecpx_advsimd.xml">FRECPX</a>: Floating-</left><right>point Reciprocal exponent (scalar).</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-</left><right>point Reciprocal Square Root Estimate.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-</left><right>point Reciprocal Square Root Step.</right></line>
  <line><left><a href="frecps_advsimd.xml">FRECPS</a>: Floating-</left><right>point Reciprocal Step.</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-</left><right>point Round to Integral exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-</left><right>point Round to Integral exact, using current rounding mode (vector).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-</left><right>point Round to Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-</left><right>point Round to Integral, to nearest with ties to Away (vector).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-</left><right>point Round to Integral, to nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-</left><right>point Round to Integral, to nearest with ties to even (vector).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-</left><right>point Round to Integral, toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-</left><right>point Round to Integral, toward Minus infinity (vector).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-</left><right>point Round to Integral, toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-</left><right>point Round to Integral, toward Plus infinity (vector).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-</left><right>point Round to Integral, toward Zero (scalar).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-</left><right>point Round to Integral, toward Zero (vector).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-</left><right>point Round to Integral, using current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-</left><right>point Round to Integral, using current rounding mode (vector).</right></line>
  <line><left><a href="fcmpe_float.xml">FCMPE</a>: Floating-</left><right>point signaling Compare (scalar).</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (scalar)</a>: Floating-</left><right>point Square Root (scalar).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: Floating-</left><right>point Square Root (vector).</right></line>
  <line><left><a href="fsub_float.xml">FSUB (scalar)</a>: Floating-</left><right>point Subtract (scalar).</right></line>
  <line><left><a href="fsub_advsimd.xml">FSUB (vector)</a>: Floating-</left><right>point Subtract (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-</a></left><right><a href="fcvtzs_float_fix.xml">point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-</a></left><right><a href="fcvtzs_advsimd_fix.xml">point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-</a></left><right><a href="fcvtzu_float_fix.xml">point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-</a></left><right><a href="fcvtzu_advsimd_fix.xml">point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-</a></left><right><a href="scvtf_float_fix.xml">point)</a>: Signed fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-</a></left><right><a href="scvtf_advsimd_fix.xml">point)</a>: Signed fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-</a></left><right><a href="ucvtf_float_fix.xml">point)</a>: Unsigned fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-</a></left><right><a href="ucvtf_advsimd_fix.xml">point)</a>: Unsigned fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-</left><right>point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-</left><right>point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-</left><right>point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-</left><right>point, rounding toward Zero (vector).</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and stack </left><right>pointer: an alias of ADD (immediate).</right></line>
  <line><left><a href="pmull_advsimd.xml">PMULL, PMULL2</a>: </left><right>Polynomial Multiply Long.</right></line>
  <line><left><a href="pmul_advsimd.xml">PMUL</a>: </left><right>Polynomial Multiply.</right></line>
  <line><left><a href="cnt_advsimd.xml">CNT</a>: </left><right>Population Count per byte.</right></line>
  <line><left><a href="fcvt_float.xml">FCVT</a>: Floating-point Convert </left><right>precision (scalar).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point Convert to higher </left><right>precision Long (vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point Convert to lower </left><right>precision Narrow (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower </left><right>precision Narrow, rounding to odd (vector).</right></line>
  <line><left><a href="prfm_imm.xml">PRFM (immediate)</a>: </left><right>Prefetch Memory (immediate).</right></line>
  <line><left><a href="prfm_lit.xml">PRFM (literal)</a>: </left><right>Prefetch Memory (literal).</right></line>
  <line><left><a href="prfm_reg.xml">PRFM (register)</a>: </left><right>Prefetch Memory (register).</right></line>
  <line><left><a href="prfum.xml">PRFM (unscaled offset)</a>: </left><right>Prefetch Memory (unscaled offset).</right></line>
  <line><left></left><right><a href="prfm_imm.xml">PRFM (immediate)</a>: Prefetch Memory (immediate).</right></line>
  <line><left></left><right><a href="prfm_lit.xml">PRFM (literal)</a>: Prefetch Memory (literal).</right></line>
  <line><left></left><right><a href="prfm_reg.xml">PRFM (register)</a>: Prefetch Memory (register).</right></line>
  <line><left></left><right><a href="prfum.xml">PRFM (unscaled offset)</a>: Prefetch Memory (unscaled offset).</right></line>
  <line><left><a href="trn1_advsimd.xml">TRN1</a>: Transpose vectors (</left><right>primary).</right></line>
  <line><left><a href="uzp1_advsimd.xml">UZP1</a>: Unzip vectors (</left><right>primary).</right></line>
  <line><left><a href="zip1_advsimd.xml">ZIP1</a>: Zip vectors (</left><right>primary).</right></line>
  <line><left><a href="drps.xml">DRPS</a>: Debug restore </left><right>process state.</right></line>
  <line><left><a href="psb.xml">PSB CSYNC</a>: </left><right>Profiling Synchronization Barrier.</right></line>
  <line><left></left><right><a href="psb.xml">PSB CSYNC</a>: Profiling Synchronization Barrier.</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-</left><right>purpose register to a vector element: an alias of INS (general).</right></line>
  <line><left><a href="msr_reg.xml">MSR (register)</a>: Move general-</left><right>purpose register to System Register.</right></line>
  <line><left><a href="dup_advsimd_gen.xml">DUP (general)</a>: Duplicate general-</left><right>purpose register to vector.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point Move to or from general-</left><right>purpose register without conversion.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (general)</a>: Insert vector element from general-</left><right>purpose register.</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: Signed Move vector element to general-</left><right>purpose register.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: Unsigned Move vector element to general-</left><right>purpose register.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to general-</left><right>purpose register: an alias of UMOV.</right></line>
  <line initialtag="Q"><left><a href="fccmp_float.xml">FCCMP</a>: Floating-point Conditional </left><right>quiet Compare (scalar).</right></line>
  <line><left><a href="fcmp_float.xml">FCMP</a>: Floating-point </left><right>quiet Compare (scalar).</right></line>
  <line initialtag="R"><left></left><right><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: Rounding Add returning High Narrow.</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, </a></left><right><a href="raddhn_advsimd.xml">RADDHN2</a>: Rounding Add returning High Narrow.</right></line>
  <line><left></left><right><a href="rbit_advsimd.xml">RBIT (vector)</a>: Reverse Bit order (vector).</right></line>
  <line><left></left><right><a href="rbit_int.xml">RBIT</a>: Reverse Bits.</right></line>
  <line><left><a href="frecpe_advsimd.xml">FRECPE</a>: Floating-point </left><right>Reciprocal Estimate.</right></line>
  <line><left><a href="urecpe_advsimd.xml">URECPE</a>: Unsigned </left><right>Reciprocal Estimate.</right></line>
  <line><left><a href="frecpx_advsimd.xml">FRECPX</a>: Floating-point </left><right>Reciprocal exponent (scalar).</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-point </left><right>Reciprocal Square Root Estimate.</right></line>
  <line><left><a href="ursqrte_advsimd.xml">URSQRTE</a>: Unsigned </left><right>Reciprocal Square Root Estimate.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-point </left><right>Reciprocal Square Root Step.</right></line>
  <line><left><a href="frecps_advsimd.xml">FRECPS</a>: Floating-point </left><right>Reciprocal Step.</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load SIMD&amp;FP </left><right>Register (immediate offset).</right></line>
  <line><left><a href="ldr_imm_gen.xml">LDR (immediate)</a>: Load </left><right>Register (immediate).</right></line>
  <line><left><a href="str_imm_gen.xml">STR (immediate)</a>: Store </left><right>Register (immediate).</right></line>
  <line><left><a href="ldr_lit_gen.xml">LDR (literal)</a>: Load </left><right>Register (literal).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load SIMD&amp;FP </left><right>Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: Load SIMD&amp;FP </left><right>Register (register offset).</right></line>
  <line><left><a href="ldr_reg_gen.xml">LDR (register)</a>: Load </left><right>Register (register).</right></line>
  <line><left><a href="str_reg_gen.xml">STR (register)</a>: Store </left><right>Register (register).</right></line>
  <line><left><a href="ldtr.xml">LDTR</a>: Load </left><right>Register (unprivileged).</right></line>
  <line><left><a href="sttr.xml">STTR</a>: Store </left><right>Register (unprivileged).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load SIMD&amp;FP </left><right>Register (unscaled offset).</right></line>
  <line><left><a href="ldur_gen.xml">LDUR</a>: Load </left><right>Register (unscaled).</right></line>
  <line><left><a href="stur_gen.xml">STUR</a>: Store </left><right>Register (unscaled).</right></line>
  <line><left><a href="ldrb_imm.xml">LDRB (immediate)</a>: Load </left><right>Register Byte (immediate).</right></line>
  <line><left><a href="strb_imm.xml">STRB (immediate)</a>: Store </left><right>Register Byte (immediate).</right></line>
  <line><left><a href="ldrb_reg.xml">LDRB (register)</a>: Load </left><right>Register Byte (register).</right></line>
  <line><left><a href="strb_reg.xml">STRB (register)</a>: Store </left><right>Register Byte (register).</right></line>
  <line><left><a href="ldtrb.xml">LDTRB</a>: Load </left><right>Register Byte (unprivileged).</right></line>
  <line><left><a href="sttrb.xml">STTRB</a>: Store </left><right>Register Byte (unprivileged).</right></line>
  <line><left><a href="ldurb.xml">LDURB</a>: Load </left><right>Register Byte (unscaled).</right></line>
  <line><left><a href="sturb.xml">STURB</a>: Store </left><right>Register Byte (unscaled).</right></line>
  <line><left><a href="ldarb.xml">LDARB</a>: Load-Acquire </left><right>Register Byte.</right></line>
  <line><left><a href="ldaxrb.xml">LDAXRB</a>: Load-Acquire Exclusive </left><right>Register Byte.</right></line>
  <line><left><a href="ldlarb.xml">LDLARB</a>: Load LOAcquire </left><right>Register Byte.</right></line>
  <line><left><a href="ldxrb.xml">LDXRB</a>: Load Exclusive </left><right>Register Byte.</right></line>
  <line><left><a href="stllrb.xml">STLLRB</a>: Store LORelease </left><right>Register Byte.</right></line>
  <line><left><a href="stlrb.xml">STLRB</a>: Store-Release </left><right>Register Byte.</right></line>
  <line><left><a href="stlxrb.xml">STLXRB</a>: Store-Release Exclusive </left><right>Register Byte.</right></line>
  <line><left><a href="stxrb.xml">STXRB</a>: Store Exclusive </left><right>Register Byte.</right></line>
  <line><left><a href="ldrh_imm.xml">LDRH (immediate)</a>: Load </left><right>Register Halfword (immediate).</right></line>
  <line><left><a href="strh_imm.xml">STRH (immediate)</a>: Store </left><right>Register Halfword (immediate).</right></line>
  <line><left><a href="ldrh_reg.xml">LDRH (register)</a>: Load </left><right>Register Halfword (register).</right></line>
  <line><left><a href="strh_reg.xml">STRH (register)</a>: Store </left><right>Register Halfword (register).</right></line>
  <line><left><a href="ldtrh.xml">LDTRH</a>: Load </left><right>Register Halfword (unprivileged).</right></line>
  <line><left><a href="sttrh.xml">STTRH</a>: Store </left><right>Register Halfword (unprivileged).</right></line>
  <line><left><a href="ldurh.xml">LDURH</a>: Load </left><right>Register Halfword (unscaled).</right></line>
  <line><left><a href="sturh.xml">STURH</a>: Store </left><right>Register Halfword (unscaled).</right></line>
  <line><left><a href="ldarh.xml">LDARH</a>: Load-Acquire </left><right>Register Halfword.</right></line>
  <line><left><a href="ldaxrh.xml">LDAXRH</a>: Load-Acquire Exclusive </left><right>Register Halfword.</right></line>
  <line><left><a href="ldlarh.xml">LDLARH</a>: Load LOAcquire </left><right>Register Halfword.</right></line>
  <line><left><a href="ldxrh.xml">LDXRH</a>: Load Exclusive </left><right>Register Halfword.</right></line>
  <line><left><a href="stllrh.xml">STLLRH</a>: Store LORelease </left><right>Register Halfword.</right></line>
  <line><left><a href="stlrh.xml">STLRH</a>: Store-Release </left><right>Register Halfword.</right></line>
  <line><left><a href="stlxrh.xml">STLXRH</a>: Store-Release Exclusive </left><right>Register Halfword.</right></line>
  <line><left><a href="stxrh.xml">STXRH</a>: Store Exclusive </left><right>Register Halfword.</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: Load </left><right>Register Signed Byte (immediate).</right></line>
  <line><left><a href="ldrsb_reg.xml">LDRSB (register)</a>: Load </left><right>Register Signed Byte (register).</right></line>
  <line><left><a href="ldtrsb.xml">LDTRSB</a>: Load </left><right>Register Signed Byte (unprivileged).</right></line>
  <line><left><a href="ldursb.xml">LDURSB</a>: Load </left><right>Register Signed Byte (unscaled).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: Load </left><right>Register Signed Halfword (immediate).</right></line>
  <line><left><a href="ldrsh_reg.xml">LDRSH (register)</a>: Load </left><right>Register Signed Halfword (register).</right></line>
  <line><left><a href="ldtrsh.xml">LDTRSH</a>: Load </left><right>Register Signed Halfword (unprivileged).</right></line>
  <line><left><a href="ldursh.xml">LDURSH</a>: Load </left><right>Register Signed Halfword (unscaled).</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: Load </left><right>Register Signed Word (immediate).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (literal)</a>: Load </left><right>Register Signed Word (literal).</right></line>
  <line><left><a href="ldrsw_reg.xml">LDRSW (register)</a>: Load </left><right>Register Signed Word (register).</right></line>
  <line><left><a href="ldtrsw.xml">LDTRSW</a>: Load </left><right>Register Signed Word (unprivileged).</right></line>
  <line><left><a href="ldursw.xml">LDURSW</a>: Load </left><right>Register Signed Word (unscaled).</right></line>
  <line><left><a href="blr.xml">BLR</a>: Branch with Link to </left><right>Register.</right></line>
  <line><left><a href="br.xml">BR</a>: Branch to </left><right>Register.</right></line>
  <line><left><a href="ldar.xml">LDAR</a>: Load-Acquire </left><right>Register.</right></line>
  <line><left><a href="ldaxr.xml">LDAXR</a>: Load-Acquire Exclusive </left><right>Register.</right></line>
  <line><left><a href="ldlar.xml">LDLAR</a>: Load LOAcquire </left><right>Register.</right></line>
  <line><left><a href="ldxr.xml">LDXR</a>: Load Exclusive </left><right>Register.</right></line>
  <line><left><a href="mrs.xml">MRS</a>: Move System </left><right>Register.</right></line>
  <line><left><a href="msr_imm.xml">MSR (immediate)</a>: Move immediate value to Special </left><right>Register.</right></line>
  <line><left><a href="msr_reg.xml">MSR (register)</a>: Move general-purpose register to System </left><right>Register.</right></line>
  <line><left><a href="stllr.xml">STLLR</a>: Store LORelease </left><right>Register.</right></line>
  <line><left><a href="stlr.xml">STLR</a>: Store-Release </left><right>Register.</right></line>
  <line><left><a href="stlxr.xml">STLXR</a>: Store-Release Exclusive </left><right>Register.</right></line>
  <line><left><a href="stxr.xml">STXR</a>: Store Exclusive </left><right>Register.</right></line>
  <line><left><a href="ldpsw.xml">LDPSW</a>: Load Pair of </left><right>Registers Signed Word.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: Load Pair of </left><right>Registers, with non-temporal hint.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: Store Pair of </left><right>Registers, with non-temporal hint.</right></line>
  <line><left><a href="ldaxp.xml">LDAXP</a>: Load-Acquire Exclusive Pair of </left><right>Registers.</right></line>
  <line><left><a href="ldp_gen.xml">LDP</a>: Load Pair of </left><right>Registers.</right></line>
  <line><left><a href="ldxp.xml">LDXP</a>: Load Exclusive Pair of </left><right>Registers.</right></line>
  <line><left><a href="stp_gen.xml">STP</a>: Store Pair of </left><right>Registers.</right></line>
  <line><left><a href="stlxp.xml">STLXP</a>: Store-</left><right>Release Exclusive Pair of registers.</right></line>
  <line><left><a href="stlxrb.xml">STLXRB</a>: Store-</left><right>Release Exclusive Register Byte.</right></line>
  <line><left><a href="stlxrh.xml">STLXRH</a>: Store-</left><right>Release Exclusive Register Halfword.</right></line>
  <line><left><a href="stlxr.xml">STLXR</a>: Store-</left><right>Release Exclusive Register.</right></line>
  <line><left><a href="stllrb.xml">STLLRB</a>: Store LO</left><right>Release Register Byte.</right></line>
  <line><left><a href="stlrb.xml">STLRB</a>: Store-</left><right>Release Register Byte.</right></line>
  <line><left><a href="stllrh.xml">STLLRH</a>: Store LO</left><right>Release Register Halfword.</right></line>
  <line><left><a href="stlrh.xml">STLRH</a>: Store-</left><right>Release Register Halfword.</right></line>
  <line><left><a href="stllr.xml">STLLR</a>: Store LO</left><right>Release Register.</right></line>
  <line><left><a href="stlr.xml">STLR</a>: Store-</left><right>Release Register.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element structure and </left><right>Replicate to all lanes (of one register).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element structure and </left><right>Replicate to all lanes of four registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element structure and </left><right>Replicate to all lanes of three registers.</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element structure and </left><right>Replicate to all lanes of two registers.</right></line>
  <line><left><a href="drps.xml">DRPS</a>: Debug </left><right>restore process state.</right></line>
  <line><left><a href="sysl.xml">SYSL</a>: System instruction with </left><right>result.</right></line>
  <line><left></left><right><a href="ret.xml">RET</a>: Return from subroutine.</right></line>
  <line><left><a href="ret.xml">RET</a>: </left><right>Return from subroutine.</right></line>
  <line><left><a href="eret.xml">ERET</a>: Exception </left><right>Return.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on word or doubleword in memory, without </left><right>return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum on byte in memory, without </left><right>return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum on halfword in memory, without </left><right>return.</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling Multiply </left><right>returning High half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate </left><right>returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply Subtract </left><right>returning High Half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling Multiply </left><right>returning High half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate </left><right>returning High Half (vector).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract </left><right>returning High Half (vector).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating Doubling Multiply </left><right>returning High half.</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding Doubling Multiply </left><right>returning High half.</right></line>
  <line><left><a href="addhn_advsimd.xml">ADDHN, ADDHN2</a>: Add </left><right>returning High Narrow.</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: Rounding Add </left><right>returning High Narrow.</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: Rounding Subtract </left><right>returning High Narrow.</right></line>
  <line><left><a href="subhn_advsimd.xml">SUBHN, SUBHN2</a>: Subtract </left><right>returning High Narrow.</right></line>
  <line><left><a href="rev64_rev.xml">REV64</a>: Reverse Bytes: an alias of </left><right>REV.</right></line>
  <line><left></left><right><a href="rev16_advsimd.xml">REV16 (vector)</a>: Reverse elements in 16-bit halfwords (vector).</right></line>
  <line><left></left><right><a href="rev16_int.xml">REV16</a>: Reverse bytes in 16-bit halfwords.</right></line>
  <line><left></left><right><a href="rev32_advsimd.xml">REV32 (vector)</a>: Reverse elements in 32-bit words (vector).</right></line>
  <line><left></left><right><a href="rev32_int.xml">REV32</a>: Reverse bytes in 32-bit words.</right></line>
  <line><left></left><right><a href="rev64_rev.xml">REV64</a>: Reverse Bytes: an alias of REV.</right></line>
  <line><left></left><right><a href="rev64_advsimd.xml">REV64</a>: Reverse elements in 64-bit doublewords (vector).</right></line>
  <line><left></left><right><a href="rev.xml">REV</a>: Reverse Bytes.</right></line>
  <line><left><a href="rbit_advsimd.xml">RBIT (vector)</a>: </left><right>Reverse Bit order (vector).</right></line>
  <line><left><a href="rbit_int.xml">RBIT</a>: </left><right>Reverse Bits.</right></line>
  <line><left><a href="rev16_int.xml">REV16</a>: </left><right>Reverse bytes in 16-bit halfwords.</right></line>
  <line><left><a href="rev32_int.xml">REV32</a>: </left><right>Reverse bytes in 32-bit words.</right></line>
  <line><left><a href="rev.xml">REV</a>: </left><right>Reverse Bytes.</right></line>
  <line><left><a href="rev64_rev.xml">REV64</a>: </left><right>Reverse Bytes: an alias of REV.</right></line>
  <line><left><a href="rev16_advsimd.xml">REV16 (vector)</a>: </left><right>Reverse elements in 16-bit halfwords (vector).</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (vector)</a>: </left><right>Reverse elements in 32-bit words (vector).</right></line>
  <line><left><a href="rev64_advsimd.xml">REV64</a>: </left><right>Reverse elements in 64-bit doublewords (vector).</right></line>
  <line><left><a href="srshr_advsimd.xml">SRSHR</a>: Signed Rounding Shift </left><right>Right (immediate).</right></line>
  <line><left><a href="sshr_advsimd.xml">SSHR</a>: Signed Shift </left><right>Right (immediate).</right></line>
  <line><left><a href="urshr_advsimd.xml">URSHR</a>: Unsigned Rounding Shift </left><right>Right (immediate).</right></line>
  <line><left><a href="ushr_advsimd.xml">USHR</a>: Unsigned Shift </left><right>Right (immediate).</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: Rotate </left><right>right (immediate): an alias of EXTR.</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift </left><right>Right (immediate): an alias of SBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift </left><right>Right (immediate): an alias of UBFM.</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic Shift </left><right>Right (register): an alias of ASRV.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: Logical Shift </left><right>Right (register): an alias of LSRV.</right></line>
  <line><left><a href="ror_rorv.xml">ROR (register)</a>: Rotate </left><right>Right (register): an alias of RORV.</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: Signed Rounding Shift </left><right>Right and Accumulate (immediate).</right></line>
  <line><left><a href="ssra_advsimd.xml">SSRA</a>: Signed Shift </left><right>Right and Accumulate (immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: Unsigned Rounding Shift </left><right>Right and Accumulate (immediate).</right></line>
  <line><left><a href="usra_advsimd.xml">USRA</a>: Unsigned Shift </left><right>Right and Accumulate (immediate).</right></line>
  <line><left><a href="sri_advsimd.xml">SRI</a>: Shift </left><right>Right and Insert (immediate).</right></line>
  <line><left><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: Rounding Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="shrn_advsimd.xml">SHRN, SHRN2</a>: Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating Rounded Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed saturating Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating Rounded Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned saturating Shift </left><right>Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded Shift </left><right>Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating Shift </left><right>Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="asrv.xml">ASRV</a>: Arithmetic Shift </left><right>Right Variable.</right></line>
  <line><left><a href="lsrv.xml">LSRV</a>: Logical Shift </left><right>Right Variable.</right></line>
  <line><left><a href="rorv.xml">RORV</a>: Rotate </left><right>Right Variable.</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (scalar)</a>: Floating-point Square </left><right>Root (scalar).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: Floating-point Square </left><right>Root (vector).</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-point Reciprocal Square </left><right>Root Estimate.</right></line>
  <line><left><a href="ursqrte_advsimd.xml">URSQRTE</a>: Unsigned Reciprocal Square </left><right>Root Estimate.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-point Reciprocal Square </left><right>Root Step.</right></line>
  <line><left></left><right><a href="ror_extr.xml">ROR (immediate)</a>: Rotate right (immediate): an alias of EXTR.</right></line>
  <line><left></left><right><a href="ror_rorv.xml">ROR (register)</a>: Rotate Right (register): an alias of RORV.</right></line>
  <line><left><a href="ror_rorv.xml">ROR (register)</a>: Rotate Right (register): an alias of </left><right>RORV.</right></line>
  <line><left></left><right><a href="rorv.xml">RORV</a>: Rotate Right Variable.</right></line>
  <line><left><a href="ror_extr.xml">ROR (immediate)</a>: </left><right>Rotate right (immediate): an alias of EXTR.</right></line>
  <line><left><a href="ror_rorv.xml">ROR (register)</a>: </left><right>Rotate Right (register): an alias of RORV.</right></line>
  <line><left><a href="rorv.xml">RORV</a>: </left><right>Rotate Right Variable.</right></line>
  <line><left><a href="sha1h_advsimd.xml">SHA1H</a>: SHA1 fixed </left><right>rotate.</right></line>
  <line><left><a href="aesd_advsimd.xml">AESD</a>: AES single </left><right>round decryption.</right></line>
  <line><left><a href="aese_advsimd.xml">AESE</a>: AES single </left><right>round encryption.</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point </left><right>Round to Integral exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point </left><right>Round to Integral exact, using current rounding mode (vector).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point </left><right>Round to Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point </left><right>Round to Integral, to nearest with ties to Away (vector).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point </left><right>Round to Integral, to nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point </left><right>Round to Integral, to nearest with ties to even (vector).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point </left><right>Round to Integral, toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point </left><right>Round to Integral, toward Minus infinity (vector).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point </left><right>Round to Integral, toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point </left><right>Round to Integral, toward Plus infinity (vector).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point </left><right>Round to Integral, toward Zero (scalar).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point </left><right>Round to Integral, toward Zero (vector).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point </left><right>Round to Integral, using current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point </left><right>Round to Integral, using current rounding mode (vector).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating </left><right>Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating </left><right>Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating </left><right>Rounded Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="raddhn_advsimd.xml">RADDHN, RADDHN2</a>: </left><right>Rounding Add returning High Narrow.</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating </left><right>Rounding Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating </left><right>Rounding Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating </left><right>Rounding Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating </left><right>Rounding Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating </left><right>Rounding Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating </left><right>Rounding Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="srhadd_advsimd.xml">SRHADD</a>: Signed </left><right>Rounding Halving Add.</right></line>
  <line><left><a href="urhadd_advsimd.xml">URHADD</a>: Unsigned </left><right>Rounding Halving Add.</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, using current </left><right>rounding mode (scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, using current </left><right>rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, using current </left><right>rounding mode (vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, using current </left><right>rounding mode (vector).</right></line>
  <line><left><a href="sqrshl_advsimd.xml">SQRSHL</a>: Signed saturating </left><right>Rounding Shift Left (register).</right></line>
  <line><left><a href="srshl_advsimd.xml">SRSHL</a>: Signed </left><right>Rounding Shift Left (register).</right></line>
  <line><left><a href="uqrshl_advsimd.xml">UQRSHL</a>: Unsigned saturating </left><right>Rounding Shift Left (register).</right></line>
  <line><left><a href="urshl_advsimd.xml">URSHL</a>: Unsigned </left><right>Rounding Shift Left (register).</right></line>
  <line><left><a href="srshr_advsimd.xml">SRSHR</a>: Signed </left><right>Rounding Shift Right (immediate).</right></line>
  <line><left><a href="urshr_advsimd.xml">URSHR</a>: Unsigned </left><right>Rounding Shift Right (immediate).</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: Signed </left><right>Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: Unsigned </left><right>Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: </left><right>Rounding Shift Right Narrow (immediate).</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: </left><right>Rounding Subtract returning High Narrow.</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, </left><right>rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, </left><right>rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, </left><right>rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, </left><right>rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower precision Narrow, </left><right>rounding to odd (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, </left><right>rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, </left><right>rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, </left><right>rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed integer, </left><right>rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, </left><right>rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned integer, </left><right>rounding toward Zero (vector).</right></line>
  <line><left></left><right><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: Rounding Shift Right Narrow (immediate).</right></line>
  <line><left><a href="rshrn_advsimd.xml">RSHRN, </a></left><right><a href="rshrn_advsimd.xml">RSHRN2</a>: Rounding Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: Rounding Subtract returning High Narrow.</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, </a></left><right><a href="rsubhn_advsimd.xml">RSUBHN2</a>: Rounding Subtract returning High Narrow.</right></line>
  <line initialtag="S"><left></left><right><a href="saba_advsimd.xml">SABA</a>: Signed Absolute difference and Accumulate.</right></line>
  <line><left></left><right><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: Signed Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, </a></left><right><a href="sabal_advsimd.xml">SABAL2</a>: Signed Absolute difference and Accumulate Long.</right></line>
  <line><left></left><right><a href="sabd_advsimd.xml">SABD</a>: Signed Absolute Difference.</right></line>
  <line><left></left><right><a href="sabdl_advsimd.xml">SABDL, SABDL2</a>: Signed Absolute Difference Long.</right></line>
  <line><left><a href="sabdl_advsimd.xml">SABDL, </a></left><right><a href="sabdl_advsimd.xml">SABDL2</a>: Signed Absolute Difference Long.</right></line>
  <line><left></left><right><a href="sadalp_advsimd.xml">SADALP</a>: Signed Add and Accumulate Long Pairwise.</right></line>
  <line><left></left><right><a href="saddl_advsimd.xml">SADDL, SADDL2</a>: Signed Add Long (vector).</right></line>
  <line><left><a href="saddl_advsimd.xml">SADDL, </a></left><right><a href="saddl_advsimd.xml">SADDL2</a>: Signed Add Long (vector).</right></line>
  <line><left></left><right><a href="saddlp_advsimd.xml">SADDLP</a>: Signed Add Long Pairwise.</right></line>
  <line><left></left><right><a href="saddlv_advsimd.xml">SADDLV</a>: Signed Add Long across Vector.</right></line>
  <line><left></left><right><a href="saddw_advsimd.xml">SADDW, SADDW2</a>: Signed Add Wide.</right></line>
  <line><left><a href="saddw_advsimd.xml">SADDW, </a></left><right><a href="saddw_advsimd.xml">SADDW2</a>: Signed Add Wide.</right></line>
  <line><left><a href="cmhs_advsimd.xml">CMHS (register)</a>: Compare unsigned Higher or </left><right>Same (vector).</right></line>
  <line><left><a href="sqabs_advsimd.xml">SQABS</a>: Signed </left><right>saturating Absolute value.</right></line>
  <line><left><a href="usqadd_advsimd.xml">USQADD</a>: Unsigned </left><right>saturating Accumulate of Signed value.</right></line>
  <line><left><a href="suqadd_advsimd.xml">SUQADD</a>: Signed </left><right>saturating Accumulate of Unsigned value.</right></line>
  <line><left><a href="sqadd_advsimd.xml">SQADD</a>: Signed </left><right>saturating Add.</right></line>
  <line><left><a href="uqadd_advsimd.xml">UQADD</a>: Unsigned </left><right>saturating Add.</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed </left><right>saturating Doubling Multiply Long (by element).</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: Signed </left><right>saturating Doubling Multiply Long.</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed </left><right>saturating Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed </left><right>saturating Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed </left><right>saturating Doubling Multiply-Add Long (by element).</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed </left><right>saturating Doubling Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed </left><right>saturating Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed </left><right>saturating Doubling Multiply-Subtract Long.</right></line>
  <line><left><a href="sqxtn_advsimd.xml">SQXTN, SQXTN2</a>: Signed </left><right>saturating extract Narrow.</right></line>
  <line><left><a href="uqxtn_advsimd.xml">UQXTN, UQXTN2</a>: Unsigned </left><right>saturating extract Narrow.</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: Signed </left><right>saturating extract Unsigned Narrow.</right></line>
  <line><left><a href="sqneg_advsimd.xml">SQNEG</a>: Signed </left><right>saturating Negate.</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed </left><right>saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned </left><right>saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed </left><right>saturating Rounded Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed </left><right>Saturating Rounding Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed </left><right>Saturating Rounding Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed </left><right>saturating Rounding Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed </left><right>saturating Rounding Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed </left><right>Saturating Rounding Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed </left><right>Saturating Rounding Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="sqrshl_advsimd.xml">SQRSHL</a>: Signed </left><right>saturating Rounding Shift Left (register).</right></line>
  <line><left><a href="uqrshl_advsimd.xml">UQRSHL</a>: Unsigned </left><right>saturating Rounding Shift Left (register).</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: Signed </left><right>saturating Shift Left (immediate).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: Unsigned </left><right>saturating Shift Left (immediate).</right></line>
  <line><left><a href="sqshl_advsimd_reg.xml">SQSHL (register)</a>: Signed </left><right>saturating Shift Left (register).</right></line>
  <line><left><a href="uqshl_advsimd_reg.xml">UQSHL (register)</a>: Unsigned </left><right>saturating Shift Left (register).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed </left><right>saturating Shift Left Unsigned (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed </left><right>saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned </left><right>saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed </left><right>saturating Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqsub_advsimd.xml">SQSUB</a>: Signed </left><right>saturating Subtract.</right></line>
  <line><left><a href="uqsub_advsimd.xml">UQSUB</a>: Unsigned </left><right>saturating Subtract.</right></line>
  <line><left><a href="ngc_sbc.xml">NGC</a>: Negate with Carry: an alias of </left><right>SBC.</right></line>
  <line><left></left><right><a href="sbc.xml">SBC</a>: Subtract with Carry.</right></line>
  <line><left><a href="ngcs_sbcs.xml">NGCS</a>: Negate with Carry, setting flags: an alias of </left><right>SBCS.</right></line>
  <line><left></left><right><a href="sbcs.xml">SBCS</a>: Subtract with Carry, setting flags.</right></line>
  <line><left></left><right><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield Insert in Zero: an alias of SBFM.</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic Shift Right (immediate): an alias of </left><right>SBFM.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield Insert in Zero: an alias of </left><right>SBFM.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: Signed Bitfield Extract: an alias of </left><right>SBFM.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: Signed Extend Byte: an alias of </left><right>SBFM.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: Sign Extend Halfword: an alias of </left><right>SBFM.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: Sign Extend Word: an alias of </left><right>SBFM.</right></line>
  <line><left></left><right><a href="sbfm.xml">SBFM</a>: Signed Bitfield Move.</right></line>
  <line><left></left><right><a href="sbfx_sbfm.xml">SBFX</a>: Signed Bitfield Extract: an alias of SBFM.</right></line>
  <line><left><a href="addp_advsimd_pair.xml">ADDP (scalar)</a>: Add Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fabs_float.xml">FABS (scalar)</a>: Floating-point Absolute value (</left><right>scalar).</right></line>
  <line><left><a href="fadd_float.xml">FADD (scalar)</a>: Floating-point Add (</left><right>scalar).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (scalar)</a>: Floating-point Add Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fccmp_float.xml">FCCMP</a>: Floating-point Conditional quiet Compare (</left><right>scalar).</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: Floating-point Conditional signaling Compare (</left><right>scalar).</right></line>
  <line><left><a href="fcmp_float.xml">FCMP</a>: Floating-point quiet Compare (</left><right>scalar).</right></line>
  <line><left><a href="fcmpe_float.xml">FCMPE</a>: Floating-point signaling Compare (</left><right>scalar).</right></line>
  <line><left><a href="fcsel_float.xml">FCSEL</a>: Floating-point Conditional Select (</left><right>scalar).</right></line>
  <line><left><a href="fcvt_float.xml">FCVT</a>: Floating-point Convert precision (</left><right>scalar).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (</left><right>scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (</left><right>scalar).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (</left><right>scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (</left><right>scalar).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (</left><right>scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (</left><right>scalar).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (</left><right>scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (</left><right>scalar).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (</left><right>scalar).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (</left><right>scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (</left><right>scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (</left><right>scalar).</right></line>
  <line><left><a href="fdiv_float.xml">FDIV (scalar)</a>: Floating-point Divide (</left><right>scalar).</right></line>
  <line><left><a href="fmadd_float.xml">FMADD</a>: Floating-point fused Multiply-Add (</left><right>scalar).</right></line>
  <line><left><a href="fmax_float.xml">FMAX (scalar)</a>: Floating-point Maximum (</left><right>scalar).</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (scalar)</a>: Floating-point Maximum Number (</left><right>scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (scalar)</a>: Floating-point Maximum Number of Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (scalar)</a>: Floating-point Maximum of Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fmin_float.xml">FMIN (scalar)</a>: Floating-point Minimum (</left><right>scalar).</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (scalar)</a>: Floating-point Minimum Number (</left><right>scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (scalar)</a>: Floating-point Minimum Number of Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (scalar)</a>: Floating-point Minimum of Pair of elements (</left><right>scalar).</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (scalar, immediate)</a>: Floating-point move immediate (</left><right>scalar).</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: Floating-point Fused Multiply-Subtract (</left><right>scalar).</right></line>
  <line><left><a href="fmul_float.xml">FMUL (scalar)</a>: Floating-point Multiply (</left><right>scalar).</right></line>
  <line><left><a href="fneg_float.xml">FNEG (scalar)</a>: Floating-point Negate (</left><right>scalar).</right></line>
  <line><left><a href="fnmadd_float.xml">FNMADD</a>: Floating-point Negated fused Multiply-Add (</left><right>scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point Negated fused Multiply-Subtract (</left><right>scalar).</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (scalar)</a>: Floating-point Multiply-Negate (</left><right>scalar).</right></line>
  <line><left><a href="frecpx_advsimd.xml">FRECPX</a>: Floating-point Reciprocal exponent (</left><right>scalar).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to Integral, to nearest with ties to Away (</left><right>scalar).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, using current rounding mode (</left><right>scalar).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to Integral, toward Minus infinity (</left><right>scalar).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to Integral, to nearest with ties to even (</left><right>scalar).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to Integral, toward Plus infinity (</left><right>scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, using current rounding mode (</left><right>scalar).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point Round to Integral, toward Zero (</left><right>scalar).</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (scalar)</a>: Floating-point Square Root (</left><right>scalar).</right></line>
  <line><left><a href="fsub_float.xml">FSUB (scalar)</a>: Floating-point Subtract (</left><right>scalar).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-point Convert to Floating-point (</left><right>scalar).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed integer Convert to Floating-point (</left><right>scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (</left><right>scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned integer Convert to Floating-point (</left><right>scalar).</right></line>
  <line><left><a href="addp_advsimd_pair.xml">ADDP (</a></left><right><a href="addp_advsimd_pair.xml">scalar)</a>: Add Pair of elements (scalar).</right></line>
  <line><left><a href="fabs_float.xml">FABS (</a></left><right><a href="fabs_float.xml">scalar)</a>: Floating-point Absolute value (scalar).</right></line>
  <line><left><a href="fadd_float.xml">FADD (</a></left><right><a href="fadd_float.xml">scalar)</a>: Floating-point Add (scalar).</right></line>
  <line><left><a href="faddp_advsimd_pair.xml">FADDP (</a></left><right><a href="faddp_advsimd_pair.xml">scalar)</a>: Floating-point Add Pair of elements (scalar).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (</a></left><right><a href="fcvtas_float.xml">scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (</a></left><right><a href="fcvtns_float.xml">scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (</a></left><right><a href="fcvtms_float.xml">scalar)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (</a></left><right><a href="fcvtps_float.xml">scalar)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (</a></left><right><a href="fcvtau_float.xml">scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (</a></left><right><a href="fcvtnu_float.xml">scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (</a></left><right><a href="fcvtmu_float.xml">scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (</a></left><right><a href="fcvtpu_float.xml">scalar)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fdiv_float.xml">FDIV (</a></left><right><a href="fdiv_float.xml">scalar)</a>: Floating-point Divide (scalar).</right></line>
  <line><left><a href="fmax_float.xml">FMAX (</a></left><right><a href="fmax_float.xml">scalar)</a>: Floating-point Maximum (scalar).</right></line>
  <line><left><a href="fmaxnm_float.xml">FMAXNM (</a></left><right><a href="fmaxnm_float.xml">scalar)</a>: Floating-point Maximum Number (scalar).</right></line>
  <line><left><a href="fmaxnmp_advsimd_pair.xml">FMAXNMP (</a></left><right><a href="fmaxnmp_advsimd_pair.xml">scalar)</a>: Floating-point Maximum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fmaxp_advsimd_pair.xml">FMAXP (</a></left><right><a href="fmaxp_advsimd_pair.xml">scalar)</a>: Floating-point Maximum of Pair of elements (scalar).</right></line>
  <line><left><a href="fmin_float.xml">FMIN (</a></left><right><a href="fmin_float.xml">scalar)</a>: Floating-point Minimum (scalar).</right></line>
  <line><left><a href="fminnm_float.xml">FMINNM (</a></left><right><a href="fminnm_float.xml">scalar)</a>: Floating-point Minimum Number (scalar).</right></line>
  <line><left><a href="fminnmp_advsimd_pair.xml">FMINNMP (</a></left><right><a href="fminnmp_advsimd_pair.xml">scalar)</a>: Floating-point Minimum Number of Pair of elements (scalar).</right></line>
  <line><left><a href="fminp_advsimd_pair.xml">FMINP (</a></left><right><a href="fminp_advsimd_pair.xml">scalar)</a>: Floating-point Minimum of Pair of elements (scalar).</right></line>
  <line><left><a href="fmul_float.xml">FMUL (</a></left><right><a href="fmul_float.xml">scalar)</a>: Floating-point Multiply (scalar).</right></line>
  <line><left><a href="fnmul_float.xml">FNMUL (</a></left><right><a href="fnmul_float.xml">scalar)</a>: Floating-point Multiply-Negate (scalar).</right></line>
  <line><left><a href="fneg_float.xml">FNEG (</a></left><right><a href="fneg_float.xml">scalar)</a>: Floating-point Negate (scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (</a></left><right><a href="frintx_float.xml">scalar)</a>: Floating-point Round to Integral exact, using current rounding mode (scalar).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (</a></left><right><a href="frinta_float.xml">scalar)</a>: Floating-point Round to Integral, to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (</a></left><right><a href="frintn_float.xml">scalar)</a>: Floating-point Round to Integral, to nearest with ties to even (scalar).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (</a></left><right><a href="frintm_float.xml">scalar)</a>: Floating-point Round to Integral, toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (</a></left><right><a href="frintp_float.xml">scalar)</a>: Floating-point Round to Integral, toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (</a></left><right><a href="frintz_float.xml">scalar)</a>: Floating-point Round to Integral, toward Zero (scalar).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (</a></left><right><a href="frinti_float.xml">scalar)</a>: Floating-point Round to Integral, using current rounding mode (scalar).</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (</a></left><right><a href="fsqrt_float.xml">scalar)</a>: Floating-point Square Root (scalar).</right></line>
  <line><left><a href="fsub_float.xml">FSUB (</a></left><right><a href="fsub_float.xml">scalar)</a>: Floating-point Subtract (scalar).</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (</a></left><right><a href="mov_dup_advsimd_elt.xml">scalar)</a>: Move vector element to scalar: an alias of DUP (element).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (</a></left><right><a href="fcvtzs_float_fix.xml">scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (</a></left><right><a href="fcvtzu_float_fix.xml">scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (</a></left><right><a href="scvtf_float_fix.xml">scalar, fixed-point)</a>: Signed fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (</a></left><right><a href="ucvtf_float_fix.xml">scalar, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="fmov_float_imm.xml">FMOV (</a></left><right><a href="fmov_float_imm.xml">scalar, immediate)</a>: Floating-point move immediate (scalar).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (</a></left><right><a href="fcvtzs_float_int.xml">scalar, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (</a></left><right><a href="fcvtzu_float_int.xml">scalar, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (</a></left><right><a href="scvtf_float_int.xml">scalar, integer)</a>: Signed integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (</a></left><right><a href="ucvtf_float_int.xml">scalar, integer)</a>: Unsigned integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (element)</a>: Duplicate vector element to vector or </left><right>scalar.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move vector element to </left><right>scalar: an alias of DUP (element).</right></line>
  <line><left><a href="sha1su0_advsimd.xml">SHA1SU0</a>: SHA1 </left><right>schedule update 0.</right></line>
  <line><left><a href="sha256su0_advsimd.xml">SHA256SU0</a>: SHA256 </left><right>schedule update 0.</right></line>
  <line><left><a href="sha1su1_advsimd.xml">SHA1SU1</a>: SHA1 </left><right>schedule update 1.</right></line>
  <line><left><a href="sha256su1_advsimd.xml">SHA256SU1</a>: SHA256 </left><right>schedule update 1.</right></line>
  <line><left></left><right><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: Signed fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left></left><right><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: Signed integer Convert to Floating-point (scalar).</right></line>
  <line><left></left><right><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-point Convert to Floating-point (vector).</right></line>
  <line><left></left><right><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed integer Convert to Floating-point (vector).</right></line>
  <line><left></left><right><a href="sdiv.xml">SDIV</a>: Signed Divide.</right></line>
  <line><left><a href="trn2_advsimd.xml">TRN2</a>: Transpose vectors (</left><right>secondary).</right></line>
  <line><left><a href="uzp2_advsimd.xml">UZP2</a>: Unzip vectors (</left><right>secondary).</right></line>
  <line><left><a href="zip2_advsimd.xml">ZIP2</a>: Zip vectors (</left><right>secondary).</right></line>
  <line><left><a href="smc.xml">SMC</a>: </left><right>Secure Monitor Call.</right></line>
  <line><left><a href="fcsel_float.xml">FCSEL</a>: Floating-point Conditional </left><right>Select (scalar).</right></line>
  <line><left><a href="csinc.xml">CSINC</a>: Conditional </left><right>Select Increment.</right></line>
  <line><left><a href="csinv.xml">CSINV</a>: Conditional </left><right>Select Invert.</right></line>
  <line><left><a href="csneg.xml">CSNEG</a>: Conditional </left><right>Select Negation.</right></line>
  <line><left><a href="bsl_advsimd.xml">BSL</a>: Bitwise </left><right>Select.</right></line>
  <line><left><a href="csel.xml">CSEL</a>: Conditional </left><right>Select.</right></line>
  <line><left><a href="sevl.xml">SEVL</a>: </left><right>Send Event Local.</right></line>
  <line><left><a href="sev.xml">SEV</a>: </left><right>Send Event.</right></line>
  <line><left><a href="csetm_csinv.xml">CSETM</a>: Conditional </left><right>Set Mask: an alias of CSINV.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit </left><right>set on byte in memory, without return.</right></line>
  <line><left><a href="ldsetb.xml">LDSETB, LDSETAB, LDSETALB, LDSETLB</a>: Atomic bit </left><right>set on byte in memory.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit </left><right>set on halfword in memory, without return.</right></line>
  <line><left><a href="ldseth.xml">LDSETH, LDSETAH, LDSETALH, LDSETLH</a>: Atomic bit </left><right>set on halfword in memory.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit </left><right>set on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit </left><right>set on word or doubleword in memory.</right></line>
  <line><left><a href="cset_csinc.xml">CSET</a>: Conditional </left><right>Set: an alias of CSINC.</right></line>
  <line><left></left><right><a href="sev.xml">SEV</a>: Send Event.</right></line>
  <line><left></left><right><a href="sevl.xml">SEVL</a>: Send Event Local.</right></line>
  <line><left><a href="sha1h_advsimd.xml">SHA1H</a>: </left><right>SHA1 fixed rotate.</right></line>
  <line><left><a href="sha1c_advsimd.xml">SHA1C</a>: </left><right>SHA1 hash update (choose).</right></line>
  <line><left><a href="sha1m_advsimd.xml">SHA1M</a>: </left><right>SHA1 hash update (majority).</right></line>
  <line><left><a href="sha1p_advsimd.xml">SHA1P</a>: </left><right>SHA1 hash update (parity).</right></line>
  <line><left><a href="sha1su0_advsimd.xml">SHA1SU0</a>: </left><right>SHA1 schedule update 0.</right></line>
  <line><left><a href="sha1su1_advsimd.xml">SHA1SU1</a>: </left><right>SHA1 schedule update 1.</right></line>
  <line><left></left><right><a href="sha1c_advsimd.xml">SHA1C</a>: SHA1 hash update (choose).</right></line>
  <line><left></left><right><a href="sha1h_advsimd.xml">SHA1H</a>: SHA1 fixed rotate.</right></line>
  <line><left></left><right><a href="sha1m_advsimd.xml">SHA1M</a>: SHA1 hash update (majority).</right></line>
  <line><left></left><right><a href="sha1p_advsimd.xml">SHA1P</a>: SHA1 hash update (parity).</right></line>
  <line><left></left><right><a href="sha1su0_advsimd.xml">SHA1SU0</a>: SHA1 schedule update 0.</right></line>
  <line><left></left><right><a href="sha1su1_advsimd.xml">SHA1SU1</a>: SHA1 schedule update 1.</right></line>
  <line><left><a href="sha256h_advsimd.xml">SHA256H</a>: </left><right>SHA256 hash update (part 1).</right></line>
  <line><left><a href="sha256h2_advsimd.xml">SHA256H2</a>: </left><right>SHA256 hash update (part 2).</right></line>
  <line><left><a href="sha256su0_advsimd.xml">SHA256SU0</a>: </left><right>SHA256 schedule update 0.</right></line>
  <line><left><a href="sha256su1_advsimd.xml">SHA256SU1</a>: </left><right>SHA256 schedule update 1.</right></line>
  <line><left></left><right><a href="sha256h2_advsimd.xml">SHA256H2</a>: SHA256 hash update (part 2).</right></line>
  <line><left></left><right><a href="sha256h_advsimd.xml">SHA256H</a>: SHA256 hash update (part 1).</right></line>
  <line><left></left><right><a href="sha256su0_advsimd.xml">SHA256SU0</a>: SHA256 schedule update 0.</right></line>
  <line><left></left><right><a href="sha256su1_advsimd.xml">SHA256SU1</a>: SHA256 schedule update 1.</right></line>
  <line><left></left><right><a href="shadd_advsimd.xml">SHADD</a>: Signed Halving Add.</right></line>
  <line><left><a href="shl_advsimd.xml">SHL</a>: </left><right>Shift Left (immediate).</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: Signed saturating </left><right>Shift Left (immediate).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: Unsigned saturating </left><right>Shift Left (immediate).</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical </left><right>Shift Left (immediate): an alias of UBFM.</right></line>
  <line><left><a href="sqrshl_advsimd.xml">SQRSHL</a>: Signed saturating Rounding </left><right>Shift Left (register).</right></line>
  <line><left><a href="sqshl_advsimd_reg.xml">SQSHL (register)</a>: Signed saturating </left><right>Shift Left (register).</right></line>
  <line><left><a href="srshl_advsimd.xml">SRSHL</a>: Signed Rounding </left><right>Shift Left (register).</right></line>
  <line><left><a href="sshl_advsimd.xml">SSHL</a>: Signed </left><right>Shift Left (register).</right></line>
  <line><left><a href="uqrshl_advsimd.xml">UQRSHL</a>: Unsigned saturating Rounding </left><right>Shift Left (register).</right></line>
  <line><left><a href="uqshl_advsimd_reg.xml">UQSHL (register)</a>: Unsigned saturating </left><right>Shift Left (register).</right></line>
  <line><left><a href="urshl_advsimd.xml">URSHL</a>: Unsigned Rounding </left><right>Shift Left (register).</right></line>
  <line><left><a href="ushl_advsimd.xml">USHL</a>: Unsigned </left><right>Shift Left (register).</right></line>
  <line><left><a href="lsl_lslv.xml">LSL (register)</a>: Logical </left><right>Shift Left (register): an alias of LSLV.</right></line>
  <line><left><a href="sli_advsimd.xml">SLI</a>: </left><right>Shift Left and Insert (immediate).</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, SHLL2</a>: </left><right>Shift Left Long (by element size).</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: Signed </left><right>Shift Left Long (immediate).</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: Unsigned </left><right>Shift Left Long (immediate).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed saturating </left><right>Shift Left Unsigned (immediate).</right></line>
  <line><left><a href="lslv.xml">LSLV</a>: Logical </left><right>Shift Left Variable.</right></line>
  <line><left><a href="srshr_advsimd.xml">SRSHR</a>: Signed Rounding </left><right>Shift Right (immediate).</right></line>
  <line><left><a href="sshr_advsimd.xml">SSHR</a>: Signed </left><right>Shift Right (immediate).</right></line>
  <line><left><a href="urshr_advsimd.xml">URSHR</a>: Unsigned Rounding </left><right>Shift Right (immediate).</right></line>
  <line><left><a href="ushr_advsimd.xml">USHR</a>: Unsigned </left><right>Shift Right (immediate).</right></line>
  <line><left><a href="asr_sbfm.xml">ASR (immediate)</a>: Arithmetic </left><right>Shift Right (immediate): an alias of SBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical </left><right>Shift Right (immediate): an alias of UBFM.</right></line>
  <line><left><a href="asr_asrv.xml">ASR (register)</a>: Arithmetic </left><right>Shift Right (register): an alias of ASRV.</right></line>
  <line><left><a href="lsr_lsrv.xml">LSR (register)</a>: Logical </left><right>Shift Right (register): an alias of LSRV.</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: Signed Rounding </left><right>Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="ssra_advsimd.xml">SSRA</a>: Signed </left><right>Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: Unsigned Rounding </left><right>Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="usra_advsimd.xml">USRA</a>: Unsigned </left><right>Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="sri_advsimd.xml">SRI</a>: </left><right>Shift Right and Insert (immediate).</right></line>
  <line><left><a href="rshrn_advsimd.xml">RSHRN, RSHRN2</a>: Rounding </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="shrn_advsimd.xml">SHRN, SHRN2</a>: </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating Rounded </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed saturating </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating Rounded </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned saturating </left><right>Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded </left><right>Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating </left><right>Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="asrv.xml">ASRV</a>: Arithmetic </left><right>Shift Right Variable.</right></line>
  <line><left><a href="lsrv.xml">LSRV</a>: Logical </left><right>Shift Right Variable.</right></line>
  <line><left><a href="adds_addsub_shift.xml">ADDS (shifted register)</a>: Add (</left><right>shifted register), setting flags.</right></line>
  <line><left><a href="ands_log_shift.xml">ANDS (shifted register)</a>: Bitwise AND (</left><right>shifted register), setting flags.</right></line>
  <line><left><a href="bics.xml">BICS (shifted register)</a>: Bitwise Bit Clear (</left><right>shifted register), setting flags.</right></line>
  <line><left><a href="subs_addsub_shift.xml">SUBS (shifted register)</a>: Subtract (</left><right>shifted register), setting flags.</right></line>
  <line><left><a href="add_addsub_shift.xml">ADD (shifted register)</a>: Add (</left><right>shifted register).</right></line>
  <line><left><a href="and_log_shift.xml">AND (shifted register)</a>: Bitwise AND (</left><right>shifted register).</right></line>
  <line><left><a href="bic_log_shift.xml">BIC (shifted register)</a>: Bitwise Bit Clear (</left><right>shifted register).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (shifted register): an alias of ADDS (</left><right>shifted register).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (shifted register): an alias of SUBS (</left><right>shifted register).</right></line>
  <line><left><a href="eon.xml">EON (shifted register)</a>: Bitwise Exclusive OR NOT (</left><right>shifted register).</right></line>
  <line><left><a href="eor_log_shift.xml">EOR (shifted register)</a>: Bitwise Exclusive OR (</left><right>shifted register).</right></line>
  <line><left><a href="mov_orr_log_shift.xml">MOV (register)</a>: Move (register): an alias of ORR (</left><right>shifted register).</right></line>
  <line><left><a href="mvn_orn_log_shift.xml">MVN</a>: Bitwise NOT: an alias of ORN (</left><right>shifted register).</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (shifted register): an alias of SUB (</left><right>shifted register).</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting flags: an alias of SUBS (</left><right>shifted register).</right></line>
  <line><left><a href="orn_log_shift.xml">ORN (shifted register)</a>: Bitwise OR NOT (</left><right>shifted register).</right></line>
  <line><left><a href="orr_log_shift.xml">ORR (shifted register)</a>: Bitwise OR (</left><right>shifted register).</right></line>
  <line><left><a href="sub_addsub_shift.xml">SUB (shifted register)</a>: Subtract (</left><right>shifted register).</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (shifted register): an alias of ANDS (</left><right>shifted register).</right></line>
  <line><left><a href="adds_addsub_shift.xml">ADDS (</a></left><right><a href="adds_addsub_shift.xml">shifted register)</a>: Add (shifted register), setting flags.</right></line>
  <line><left><a href="add_addsub_shift.xml">ADD (</a></left><right><a href="add_addsub_shift.xml">shifted register)</a>: Add (shifted register).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (shifted register)</a>: Compare Negative (</left><right>shifted register): an alias of ADDS (shifted register).</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (</left><right>shifted register): an alias of ANDS (shifted register).</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (</left><right>shifted register): an alias of SUB (shifted register).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (</left><right>shifted register): an alias of SUBS (shifted register).</right></line>
  <line><left><a href="ands_log_shift.xml">ANDS (</a></left><right><a href="ands_log_shift.xml">shifted register)</a>: Bitwise AND (shifted register), setting flags.</right></line>
  <line><left><a href="and_log_shift.xml">AND (</a></left><right><a href="and_log_shift.xml">shifted register)</a>: Bitwise AND (shifted register).</right></line>
  <line><left><a href="bics.xml">BICS (</a></left><right><a href="bics.xml">shifted register)</a>: Bitwise Bit Clear (shifted register), setting flags.</right></line>
  <line><left><a href="bic_log_shift.xml">BIC (</a></left><right><a href="bic_log_shift.xml">shifted register)</a>: Bitwise Bit Clear (shifted register).</right></line>
  <line><left><a href="eor_log_shift.xml">EOR (</a></left><right><a href="eor_log_shift.xml">shifted register)</a>: Bitwise Exclusive OR (shifted register).</right></line>
  <line><left><a href="eon.xml">EON (</a></left><right><a href="eon.xml">shifted register)</a>: Bitwise Exclusive OR NOT (shifted register).</right></line>
  <line><left><a href="orr_log_shift.xml">ORR (</a></left><right><a href="orr_log_shift.xml">shifted register)</a>: Bitwise OR (shifted register).</right></line>
  <line><left><a href="orn_log_shift.xml">ORN (</a></left><right><a href="orn_log_shift.xml">shifted register)</a>: Bitwise OR NOT (shifted register).</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (</a></left><right><a href="cmp_subs_addsub_shift.xml">shifted register)</a>: Compare (shifted register): an alias of SUBS (shifted register).</right></line>
  <line><left><a href="cmn_adds_addsub_shift.xml">CMN (</a></left><right><a href="cmn_adds_addsub_shift.xml">shifted register)</a>: Compare Negative (shifted register): an alias of ADDS (shifted register).</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (</a></left><right><a href="neg_sub_addsub_shift.xml">shifted register)</a>: Negate (shifted register): an alias of SUB (shifted register).</right></line>
  <line><left><a href="subs_addsub_shift.xml">SUBS (</a></left><right><a href="subs_addsub_shift.xml">shifted register)</a>: Subtract (shifted register), setting flags.</right></line>
  <line><left><a href="sub_addsub_shift.xml">SUB (</a></left><right><a href="sub_addsub_shift.xml">shifted register)</a>: Subtract (shifted register).</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (</a></left><right><a href="tst_ands_log_shift.xml">shifted register)</a>: Test (shifted register): an alias of ANDS (shifted register).</right></line>
  <line><left></left><right><a href="shl_advsimd.xml">SHL</a>: Shift Left (immediate).</right></line>
  <line><left></left><right><a href="shll_advsimd.xml">SHLL, SHLL2</a>: Shift Left Long (by element size).</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, </a></left><right><a href="shll_advsimd.xml">SHLL2</a>: Shift Left Long (by element size).</right></line>
  <line><left></left><right><a href="shrn_advsimd.xml">SHRN, SHRN2</a>: Shift Right Narrow (immediate).</right></line>
  <line><left><a href="shrn_advsimd.xml">SHRN, </a></left><right><a href="shrn_advsimd.xml">SHRN2</a>: Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="shsub_advsimd.xml">SHSUB</a>: Signed Halving Subtract.</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (vector)</a>: Count Leading </left><right>Sign bits (vector).</right></line>
  <line><left><a href="cls_int.xml">CLS</a>: Count leading </left><right>sign bits.</right></line>
  <line><left><a href="sxth_sbfm.xml">SXTH</a>: </left><right>Sign Extend Halfword: an alias of SBFM.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: </left><right>Sign Extend Word: an alias of SBFM.</right></line>
  <line><left><a href="fccmpe_float.xml">FCCMPE</a>: Floating-point Conditional </left><right>signaling Compare (scalar).</right></line>
  <line><left><a href="fcmpe_float.xml">FCMPE</a>: Floating-point </left><right>signaling Compare (scalar).</right></line>
  <line><left><a href="sabal_advsimd.xml">SABAL, SABAL2</a>: </left><right>Signed Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="saba_advsimd.xml">SABA</a>: </left><right>Signed Absolute difference and Accumulate.</right></line>
  <line><left><a href="sabdl_advsimd.xml">SABDL, SABDL2</a>: </left><right>Signed Absolute Difference Long.</right></line>
  <line><left><a href="sabd_advsimd.xml">SABD</a>: </left><right>Signed Absolute Difference.</right></line>
  <line><left><a href="sadalp_advsimd.xml">SADALP</a>: </left><right>Signed Add and Accumulate Long Pairwise.</right></line>
  <line><left><a href="saddl_advsimd.xml">SADDL, SADDL2</a>: </left><right>Signed Add Long (vector).</right></line>
  <line><left><a href="saddlv_advsimd.xml">SADDLV</a>: </left><right>Signed Add Long across Vector.</right></line>
  <line><left><a href="saddlp_advsimd.xml">SADDLP</a>: </left><right>Signed Add Long Pairwise.</right></line>
  <line><left><a href="saddw_advsimd.xml">SADDW, SADDW2</a>: </left><right>Signed Add Wide.</right></line>
  <line><left><a href="sbfx_sbfm.xml">SBFX</a>: </left><right>Signed Bitfield Extract: an alias of SBFM.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: </left><right>Signed Bitfield Insert in Zero: an alias of SBFM.</right></line>
  <line><left><a href="sbfm.xml">SBFM</a>: </left><right>Signed Bitfield Move.</right></line>
  <line><left><a href="ldrsb_imm.xml">LDRSB (immediate)</a>: Load Register </left><right>Signed Byte (immediate).</right></line>
  <line><left><a href="ldrsb_reg.xml">LDRSB (register)</a>: Load Register </left><right>Signed Byte (register).</right></line>
  <line><left><a href="ldtrsb.xml">LDTRSB</a>: Load Register </left><right>Signed Byte (unprivileged).</right></line>
  <line><left><a href="ldursb.xml">LDURSB</a>: Load Register </left><right>Signed Byte (unscaled).</right></line>
  <line><left><a href="sdiv.xml">SDIV</a>: </left><right>Signed Divide.</right></line>
  <line><left><a href="sxtb_sbfm.xml">SXTB</a>: </left><right>Signed Extend Byte: an alias of SBFM.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: </left><right>Signed extend Long: an alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="scvtf_float_fix.xml">SCVTF (scalar, fixed-point)</a>: </left><right>Signed fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: </left><right>Signed fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to </left><right>Signed fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to </left><right>Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_reg.xml">CMGT (register)</a>: Compare </left><right>signed Greater than (vector).</right></line>
  <line><left><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: Compare </left><right>signed Greater than or Equal (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare </left><right>signed Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: Compare </left><right>signed Greater than zero (vector).</right></line>
  <line><left><a href="ldrsh_imm.xml">LDRSH (immediate)</a>: Load Register </left><right>Signed Halfword (immediate).</right></line>
  <line><left><a href="ldrsh_reg.xml">LDRSH (register)</a>: Load Register </left><right>Signed Halfword (register).</right></line>
  <line><left><a href="ldtrsh.xml">LDTRSH</a>: Load Register </left><right>Signed Halfword (unprivileged).</right></line>
  <line><left><a href="ldursh.xml">LDURSH</a>: Load Register </left><right>Signed Halfword (unscaled).</right></line>
  <line><left><a href="shadd_advsimd.xml">SHADD</a>: </left><right>Signed Halving Add.</right></line>
  <line><left><a href="shsub_advsimd.xml">SHSUB</a>: </left><right>Signed Halving Subtract.</right></line>
  <line><left><a href="scvtf_float_int.xml">SCVTF (scalar, integer)</a>: </left><right>Signed integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: </left><right>Signed integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to </left><right>Signed integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to </left><right>Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to </left><right>Signed integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to </left><right>Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to </left><right>Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare </left><right>signed Less than or Equal to zero (vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (zero)</a>: Compare </left><right>signed Less than zero (vector).</right></line>
  <line><left><a href="smax_advsimd.xml">SMAX</a>: </left><right>Signed Maximum (vector).</right></line>
  <line><left><a href="smaxv_advsimd.xml">SMAXV</a>: </left><right>Signed Maximum across Vector.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic </left><right>signed maximum on byte in memory, without return.</right></line>
  <line><left><a href="ldsmaxb.xml">LDSMAXB, LDSMAXAB, LDSMAXALB, LDSMAXLB</a>: Atomic </left><right>signed maximum on byte in memory.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic </left><right>signed maximum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsmaxh.xml">LDSMAXH, LDSMAXAH, LDSMAXALH, LDSMAXLH</a>: Atomic </left><right>signed maximum on halfword in memory.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic </left><right>signed maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic </left><right>signed maximum on word or doubleword in memory.</right></line>
  <line><left><a href="smaxp_advsimd.xml">SMAXP</a>: </left><right>Signed Maximum Pairwise.</right></line>
  <line><left><a href="smin_advsimd.xml">SMIN</a>: </left><right>Signed Minimum (vector).</right></line>
  <line><left><a href="sminv_advsimd.xml">SMINV</a>: </left><right>Signed Minimum across Vector.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic </left><right>signed minimum on byte in memory, without return.</right></line>
  <line><left><a href="ldsminb.xml">LDSMINB, LDSMINAB, LDSMINALB, LDSMINLB</a>: Atomic </left><right>signed minimum on byte in memory.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic </left><right>signed minimum on halfword in memory, without return.</right></line>
  <line><left><a href="ldsminh.xml">LDSMINH, LDSMINAH, LDSMINALH, LDSMINLH</a>: Atomic </left><right>signed minimum on halfword in memory.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic </left><right>signed minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic </left><right>signed minimum on word or doubleword in memory.</right></line>
  <line><left><a href="sminp_advsimd.xml">SMINP</a>: </left><right>Signed Minimum Pairwise.</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: </left><right>Signed Move vector element to general-purpose register.</right></line>
  <line><left><a href="smulh.xml">SMULH</a>: </left><right>Signed Multiply High.</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (vector)</a>: </left><right>Signed Multiply Long (vector).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: </left><right>Signed Multiply Long (vector, by element).</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: </left><right>Signed Multiply Long: an alias of SMADDL.</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: </left><right>Signed Multiply-Add Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: </left><right>Signed Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="smaddl.xml">SMADDL</a>: </left><right>Signed Multiply-Add Long.</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: </left><right>Signed Multiply-Negate Long: an alias of SMSUBL.</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: </left><right>Signed Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: </left><right>Signed Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="smsubl.xml">SMSUBL</a>: </left><right>Signed Multiply-Subtract Long.</right></line>
  <line><left><a href="srhadd_advsimd.xml">SRHADD</a>: </left><right>Signed Rounding Halving Add.</right></line>
  <line><left><a href="srshl_advsimd.xml">SRSHL</a>: </left><right>Signed Rounding Shift Left (register).</right></line>
  <line><left><a href="srshr_advsimd.xml">SRSHR</a>: </left><right>Signed Rounding Shift Right (immediate).</right></line>
  <line><left><a href="srsra_advsimd.xml">SRSRA</a>: </left><right>Signed Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="sqabs_advsimd.xml">SQABS</a>: </left><right>Signed saturating Absolute value.</right></line>
  <line><left><a href="suqadd_advsimd.xml">SUQADD</a>: </left><right>Signed saturating Accumulate of Unsigned value.</right></line>
  <line><left><a href="sqadd_advsimd.xml">SQADD</a>: </left><right>Signed saturating Add.</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: </left><right>Signed saturating Doubling Multiply Long (by element).</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: </left><right>Signed saturating Doubling Multiply Long.</right></line>
  <line><left><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: </left><right>Signed saturating Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: </left><right>Signed saturating Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: </left><right>Signed saturating Doubling Multiply-Add Long (by element).</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: </left><right>Signed saturating Doubling Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: </left><right>Signed saturating Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: </left><right>Signed saturating Doubling Multiply-Subtract Long.</right></line>
  <line><left><a href="sqxtn_advsimd.xml">SQXTN, SQXTN2</a>: </left><right>Signed saturating extract Narrow.</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: </left><right>Signed saturating extract Unsigned Narrow.</right></line>
  <line><left><a href="sqneg_advsimd.xml">SQNEG</a>: </left><right>Signed saturating Negate.</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: </left><right>Signed saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: </left><right>Signed saturating Rounded Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: </left><right>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: </left><right>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: </left><right>Signed saturating Rounding Doubling Multiply returning High half (by element).</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: </left><right>Signed saturating Rounding Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: </left><right>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: </left><right>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="sqrshl_advsimd.xml">SQRSHL</a>: </left><right>Signed saturating Rounding Shift Left (register).</right></line>
  <line><left><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: </left><right>Signed saturating Shift Left (immediate).</right></line>
  <line><left><a href="sqshl_advsimd_reg.xml">SQSHL (register)</a>: </left><right>Signed saturating Shift Left (register).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: </left><right>Signed saturating Shift Left Unsigned (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: </left><right>Signed saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: </left><right>Signed saturating Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqsub_advsimd.xml">SQSUB</a>: </left><right>Signed saturating Subtract.</right></line>
  <line><left><a href="sshl_advsimd.xml">SSHL</a>: </left><right>Signed Shift Left (register).</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: </left><right>Signed Shift Left Long (immediate).</right></line>
  <line><left><a href="sshr_advsimd.xml">SSHR</a>: </left><right>Signed Shift Right (immediate).</right></line>
  <line><left><a href="ssra_advsimd.xml">SSRA</a>: </left><right>Signed Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="ssubl_advsimd.xml">SSUBL, SSUBL2</a>: </left><right>Signed Subtract Long.</right></line>
  <line><left><a href="ssubw_advsimd.xml">SSUBW, SSUBW2</a>: </left><right>Signed Subtract Wide.</right></line>
  <line><left><a href="usqadd_advsimd.xml">USQADD</a>: Unsigned saturating Accumulate of </left><right>Signed value.</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: Load Register </left><right>Signed Word (immediate).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (literal)</a>: Load Register </left><right>Signed Word (literal).</right></line>
  <line><left><a href="ldrsw_reg.xml">LDRSW (register)</a>: Load Register </left><right>Signed Word (register).</right></line>
  <line><left><a href="ldtrsw.xml">LDTRSW</a>: Load Register </left><right>Signed Word (unprivileged).</right></line>
  <line><left><a href="ldursw.xml">LDURSW</a>: Load Register </left><right>Signed Word (unscaled).</right></line>
  <line><left><a href="ldpsw.xml">LDPSW</a>: Load Pair of Registers </left><right>Signed Word.</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, SIMD&amp;FP)</a>: Load </left><right>SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: Store </left><right>SIMD&amp;FP register (immediate offset).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, SIMD&amp;FP)</a>: Load </left><right>SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, SIMD&amp;FP)</a>: Load </left><right>SIMD&amp;FP Register (register offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;FP)</a>: Store </left><right>SIMD&amp;FP register (register offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load </left><right>SIMD&amp;FP Register (unscaled offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: Store </left><right>SIMD&amp;FP register (unscaled offset).</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of </left><right>SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of </left><right>SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (SIMD&amp;FP)</a>: Load Pair of </left><right>SIMD&amp;FP registers.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (SIMD&amp;FP)</a>: Store Pair of </left><right>SIMD&amp;FP registers.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (</a></left><right><a href="ldnp_fpsimd.xml">SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="ldp_fpsimd.xml">LDP (</a></left><right><a href="ldp_fpsimd.xml">SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="ldr_imm_fpsimd.xml">LDR (immediate, </a></left><right><a href="ldr_imm_fpsimd.xml">SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (immediate offset).</right></line>
  <line><left><a href="ldr_lit_fpsimd.xml">LDR (literal, </a></left><right><a href="ldr_lit_fpsimd.xml">SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (PC-relative literal).</right></line>
  <line><left><a href="ldr_reg_fpsimd.xml">LDR (register, </a></left><right><a href="ldr_reg_fpsimd.xml">SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (register offset).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (</a></left><right><a href="ldur_fpsimd.xml">SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (unscaled offset).</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (</a></left><right><a href="stnp_fpsimd.xml">SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (</a></left><right><a href="stp_fpsimd.xml">SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, </a></left><right><a href="str_imm_fpsimd.xml">SIMD&amp;FP)</a>: Store SIMD&amp;FP register (immediate offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, </a></left><right><a href="str_reg_fpsimd.xml">SIMD&amp;FP)</a>: Store SIMD&amp;FP register (register offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (</a></left><right><a href="stur_fpsimd.xml">SIMD&amp;FP)</a>: Store SIMD&amp;FP register (unscaled offset).</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load </left><right>single 2-element structure and Replicate to all lanes of two registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store </left><right>single 2-element structure from one lane of two registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load </left><right>single 2-element structure to one lane of two registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load </left><right>single 3-element structure and Replicate to all lanes of three registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store </left><right>single 3-element structure from one lane of three registers.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load </left><right>single 3-element structure to one lane of three registers).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load </left><right>single 4-element structure and Replicate to all lanes of four registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store </left><right>single 4-element structure from one lane of four registers.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load </left><right>single 4-element structure to one lane of four registers.</right></line>
  <line><left><a href="aesd_advsimd.xml">AESD</a>: AES </left><right>single round decryption.</right></line>
  <line><left><a href="aese_advsimd.xml">AESE</a>: AES </left><right>single round encryption.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (</a></left><right><a href="ld1_advsimd_sngl.xml">single structure)</a>: Load one single-element structure to one lane of one register.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (</a></left><right><a href="ld2_advsimd_sngl.xml">single structure)</a>: Load single 2-element structure to one lane of two registers.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (</a></left><right><a href="ld3_advsimd_sngl.xml">single structure)</a>: Load single 3-element structure to one lane of three registers).</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (</a></left><right><a href="ld4_advsimd_sngl.xml">single structure)</a>: Load single 4-element structure to one lane of four registers.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (</a></left><right><a href="st1_advsimd_sngl.xml">single structure)</a>: Store a single-element structure from one lane of one register.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (</a></left><right><a href="st2_advsimd_sngl.xml">single structure)</a>: Store single 2-element structure from one lane of two registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (</a></left><right><a href="st3_advsimd_sngl.xml">single structure)</a>: Store single 3-element structure from one lane of three registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (</a></left><right><a href="st4_advsimd_sngl.xml">single structure)</a>: Store single 4-element structure from one lane of four registers.</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one </left><right>single-element structure and Replicate to all lanes (of one register).</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a </left><right>single-element structure from one lane of one register.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one </left><right>single-element structure to one lane of one register.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple </left><right>single-element structures from one, two, three, or four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple </left><right>single-element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="shll_advsimd.xml">SHLL, SHLL2</a>: Shift Left Long (by element </left><right>size).</right></line>
  <line><left></left><right><a href="sli_advsimd.xml">SLI</a>: Shift Left and Insert (immediate).</right></line>
  <line><left><a href="smull_smaddl.xml">SMULL</a>: Signed Multiply Long: an alias of </left><right>SMADDL.</right></line>
  <line><left></left><right><a href="smaddl.xml">SMADDL</a>: Signed Multiply-Add Long.</right></line>
  <line><left></left><right><a href="smax_advsimd.xml">SMAX</a>: Signed Maximum (vector).</right></line>
  <line><left></left><right><a href="smaxp_advsimd.xml">SMAXP</a>: Signed Maximum Pairwise.</right></line>
  <line><left></left><right><a href="smaxv_advsimd.xml">SMAXV</a>: Signed Maximum across Vector.</right></line>
  <line><left></left><right><a href="smc.xml">SMC</a>: Secure Monitor Call.</right></line>
  <line><left></left><right><a href="smin_advsimd.xml">SMIN</a>: Signed Minimum (vector).</right></line>
  <line><left></left><right><a href="sminp_advsimd.xml">SMINP</a>: Signed Minimum Pairwise.</right></line>
  <line><left></left><right><a href="sminv_advsimd.xml">SMINV</a>: Signed Minimum across Vector.</right></line>
  <line><left></left><right><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed Multiply-Add Long (vector, by element).</right></line>
  <line><left></left><right><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: Signed Multiply-Add Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, </a></left><right><a href="smlal_advsimd_elt.xml">SMLAL2 (by element)</a>: Signed Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, </a></left><right><a href="smlal_advsimd_vec.xml">SMLAL2 (vector)</a>: Signed Multiply-Add Long (vector).</right></line>
  <line><left></left><right><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed Multiply-Subtract Long (vector, by element).</right></line>
  <line><left></left><right><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: Signed Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, </a></left><right><a href="smlsl_advsimd_elt.xml">SMLSL2 (by element)</a>: Signed Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, </a></left><right><a href="smlsl_advsimd_vec.xml">SMLSL2 (vector)</a>: Signed Multiply-Subtract Long (vector).</right></line>
  <line><left></left><right><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-Negate Long: an alias of SMSUBL.</right></line>
  <line><left></left><right><a href="smov_advsimd.xml">SMOV</a>: Signed Move vector element to general-purpose register.</right></line>
  <line><left><a href="smnegl_smsubl.xml">SMNEGL</a>: Signed Multiply-Negate Long: an alias of </left><right>SMSUBL.</right></line>
  <line><left></left><right><a href="smsubl.xml">SMSUBL</a>: Signed Multiply-Subtract Long.</right></line>
  <line><left></left><right><a href="smulh.xml">SMULH</a>: Signed Multiply High.</right></line>
  <line><left></left><right><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: Signed Multiply Long (vector, by element).</right></line>
  <line><left></left><right><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (vector)</a>: Signed Multiply Long (vector).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, </a></left><right><a href="smull_advsimd_elt.xml">SMULL2 (by element)</a>: Signed Multiply Long (vector, by element).</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, </a></left><right><a href="smull_advsimd_vec.xml">SMULL2 (vector)</a>: Signed Multiply Long (vector).</right></line>
  <line><left></left><right><a href="smull_smaddl.xml">SMULL</a>: Signed Multiply Long: an alias of SMADDL.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from </a></left><right><a href="mov_add_addsub_imm.xml">SP)</a>: Move between register and stack pointer: an alias of ADD (immediate).</right></line>
  <line><left><a href="msr_imm.xml">MSR (immediate)</a>: Move immediate value to </left><right>Special Register.</right></line>
  <line><left></left><right><a href="sqabs_advsimd.xml">SQABS</a>: Signed saturating Absolute value.</right></line>
  <line><left></left><right><a href="sqadd_advsimd.xml">SQADD</a>: Signed saturating Add.</right></line>
  <line><left></left><right><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, SQDMLAL2 (by element)</a>: Signed saturating Doubling Multiply-Add Long (by element).</right></line>
  <line><left></left><right><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (vector)</a>: Signed saturating Doubling Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlal_advsimd_elt.xml">SQDMLAL, </a></left><right><a href="sqdmlal_advsimd_elt.xml">SQDMLAL2 (by element)</a>: Signed saturating Doubling Multiply-Add Long (by element).</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, </a></left><right><a href="sqdmlal_advsimd_vec.xml">SQDMLAL2 (vector)</a>: Signed saturating Doubling Multiply-Add Long.</right></line>
  <line><left></left><right><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left></left><right><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed saturating Doubling Multiply-Subtract Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, </a></left><right><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL2 (by element)</a>: Signed saturating Doubling Multiply-Subtract Long (by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, </a></left><right><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL2 (vector)</a>: Signed saturating Doubling Multiply-Subtract Long.</right></line>
  <line><left></left><right><a href="sqdmulh_advsimd_elt.xml">SQDMULH (by element)</a>: Signed saturating Doubling Multiply returning High half (by element).</right></line>
  <line><left></left><right><a href="sqdmulh_advsimd_vec.xml">SQDMULH (vector)</a>: Signed saturating Doubling Multiply returning High half.</right></line>
  <line><left></left><right><a href="sqdmull_advsimd_elt.xml">SQDMULL, SQDMULL2 (by element)</a>: Signed saturating Doubling Multiply Long (by element).</right></line>
  <line><left></left><right><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (vector)</a>: Signed saturating Doubling Multiply Long.</right></line>
  <line><left><a href="sqdmull_advsimd_elt.xml">SQDMULL, </a></left><right><a href="sqdmull_advsimd_elt.xml">SQDMULL2 (by element)</a>: Signed saturating Doubling Multiply Long (by element).</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, </a></left><right><a href="sqdmull_advsimd_vec.xml">SQDMULL2 (vector)</a>: Signed saturating Doubling Multiply Long.</right></line>
  <line><left></left><right><a href="sqneg_advsimd.xml">SQNEG</a>: Signed saturating Negate.</right></line>
  <line><left></left><right><a href="sqrdmlah_advsimd_elt.xml">SQRDMLAH (by element)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element).</right></line>
  <line><left></left><right><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left></left><right><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element).</right></line>
  <line><left></left><right><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left></left><right><a href="sqrdmulh_advsimd_elt.xml">SQRDMULH (by element)</a>: Signed saturating Rounding Doubling Multiply returning High half (by element).</right></line>
  <line><left></left><right><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (vector)</a>: Signed saturating Rounding Doubling Multiply returning High half.</right></line>
  <line><left></left><right><a href="sqrshl_advsimd.xml">SQRSHL</a>: Signed saturating Rounding Shift Left (register).</right></line>
  <line><left></left><right><a href="sqrshrn_advsimd.xml">SQRSHRN, SQRSHRN2</a>: Signed saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqrshrn_advsimd.xml">SQRSHRN, </a></left><right><a href="sqrshrn_advsimd.xml">SQRSHRN2</a>: Signed saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, </a></left><right><a href="sqrshrun_advsimd.xml">SQRSHRUN2</a>: Signed saturating Rounded Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left></left><right><a href="sqshl_advsimd_imm.xml">SQSHL (immediate)</a>: Signed saturating Shift Left (immediate).</right></line>
  <line><left></left><right><a href="sqshl_advsimd_reg.xml">SQSHL (register)</a>: Signed saturating Shift Left (register).</right></line>
  <line><left></left><right><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed saturating Shift Left Unsigned (immediate).</right></line>
  <line><left></left><right><a href="sqshrn_advsimd.xml">SQSHRN, SQSHRN2</a>: Signed saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="sqshrn_advsimd.xml">SQSHRN, </a></left><right><a href="sqshrn_advsimd.xml">SQSHRN2</a>: Signed saturating Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, </a></left><right><a href="sqshrun_advsimd.xml">SQSHRUN2</a>: Signed saturating Shift Right Unsigned Narrow (immediate).</right></line>
  <line><left></left><right><a href="sqsub_advsimd.xml">SQSUB</a>: Signed saturating Subtract.</right></line>
  <line><left><a href="fsqrt_float.xml">FSQRT (scalar)</a>: Floating-point </left><right>Square Root (scalar).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: Floating-point </left><right>Square Root (vector).</right></line>
  <line><left><a href="frsqrte_advsimd.xml">FRSQRTE</a>: Floating-point Reciprocal </left><right>Square Root Estimate.</right></line>
  <line><left><a href="ursqrte_advsimd.xml">URSQRTE</a>: Unsigned Reciprocal </left><right>Square Root Estimate.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-point Reciprocal </left><right>Square Root Step.</right></line>
  <line><left></left><right><a href="sqxtn_advsimd.xml">SQXTN, SQXTN2</a>: Signed saturating extract Narrow.</right></line>
  <line><left><a href="sqxtn_advsimd.xml">SQXTN, </a></left><right><a href="sqxtn_advsimd.xml">SQXTN2</a>: Signed saturating extract Narrow.</right></line>
  <line><left></left><right><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: Signed saturating extract Unsigned Narrow.</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, </a></left><right><a href="sqxtun_advsimd.xml">SQXTUN2</a>: Signed saturating extract Unsigned Narrow.</right></line>
  <line><left></left><right><a href="srhadd_advsimd.xml">SRHADD</a>: Signed Rounding Halving Add.</right></line>
  <line><left></left><right><a href="sri_advsimd.xml">SRI</a>: Shift Right and Insert (immediate).</right></line>
  <line><left></left><right><a href="srshl_advsimd.xml">SRSHL</a>: Signed Rounding Shift Left (register).</right></line>
  <line><left></left><right><a href="srshr_advsimd.xml">SRSHR</a>: Signed Rounding Shift Right (immediate).</right></line>
  <line><left></left><right><a href="srsra_advsimd.xml">SRSRA</a>: Signed Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left></left><right><a href="sshl_advsimd.xml">SSHL</a>: Signed Shift Left (register).</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend Long: an alias of </left><right>SSHLL, SSHLL2.</right></line>
  <line><left></left><right><a href="sshll_advsimd.xml">SSHLL, SSHLL2</a>: Signed Shift Left Long (immediate).</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend Long: an alias of SSHLL, </left><right>SSHLL2.</right></line>
  <line><left><a href="sshll_advsimd.xml">SSHLL, </a></left><right><a href="sshll_advsimd.xml">SSHLL2</a>: Signed Shift Left Long (immediate).</right></line>
  <line><left></left><right><a href="sshr_advsimd.xml">SSHR</a>: Signed Shift Right (immediate).</right></line>
  <line><left></left><right><a href="ssra_advsimd.xml">SSRA</a>: Signed Shift Right and Accumulate (immediate).</right></line>
  <line><left></left><right><a href="ssubl_advsimd.xml">SSUBL, SSUBL2</a>: Signed Subtract Long.</right></line>
  <line><left><a href="ssubl_advsimd.xml">SSUBL, </a></left><right><a href="ssubl_advsimd.xml">SSUBL2</a>: Signed Subtract Long.</right></line>
  <line><left></left><right><a href="ssubw_advsimd.xml">SSUBW, SSUBW2</a>: Signed Subtract Wide.</right></line>
  <line><left><a href="ssubw_advsimd.xml">SSUBW, </a></left><right><a href="ssubw_advsimd.xml">SSUBW2</a>: Signed Subtract Wide.</right></line>
  <line><left></left><right><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element structures from one, two, three, or four registers.</right></line>
  <line><left></left><right><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-element structure from one lane of one register.</right></line>
  <line><left></left><right><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: Store multiple 2-element structures from two registers.</right></line>
  <line><left></left><right><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single 2-element structure from one lane of two registers.</right></line>
  <line><left></left><right><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: Store multiple 3-element structures from three registers.</right></line>
  <line><left></left><right><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single 3-element structure from one lane of three registers.</right></line>
  <line><left></left><right><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: Store multiple 4-element structures from four registers.</right></line>
  <line><left></left><right><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single 4-element structure from one lane of four registers.</right></line>
  <line><left><a href="mov_add_addsub_imm.xml">MOV (to/from SP)</a>: Move between register and </left><right>stack pointer: an alias of ADD (immediate).</right></line>
  <line><left></left><right><a href="stadd.xml">STADD, STADDL</a>: Atomic add on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add on byte in memory, without return.</right></line>
  <line><left></left><right><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add on halfword in memory, without return.</right></line>
  <line><left><a href="stadd.xml">STADD, </a></left><right><a href="stadd.xml">STADDL</a>: Atomic add on word or doubleword in memory, without return.</right></line>
  <line><left><a href="staddb.xml">STADDB, </a></left><right><a href="staddb.xml">STADDLB</a>: Atomic add on byte in memory, without return.</right></line>
  <line><left><a href="staddh.xml">STADDH, </a></left><right><a href="staddh.xml">STADDLH</a>: Atomic add on halfword in memory, without return.</right></line>
  <line><left><a href="dcps1.xml">DCPS1</a>: Debug Change PE </left><right>State to EL1..</right></line>
  <line><left><a href="dcps2.xml">DCPS2</a>: Debug Change PE </left><right>State to EL2..</right></line>
  <line><left><a href="dcps3.xml">DCPS3</a>: Debug Change PE </left><right>State to EL3.</right></line>
  <line><left><a href="drps.xml">DRPS</a>: Debug restore process </left><right>state.</right></line>
  <line><left></left><right><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear on halfword in memory, without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, </a></left><right><a href="stclr.xml">STCLRL</a>: Atomic bit clear on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, </a></left><right><a href="stclrb.xml">STCLRLB</a>: Atomic bit clear on byte in memory, without return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, </a></left><right><a href="stclrh.xml">STCLRLH</a>: Atomic bit clear on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR on byte in memory, without return.</right></line>
  <line><left></left><right><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR on halfword in memory, without return.</right></line>
  <line><left><a href="steor.xml">STEOR, </a></left><right><a href="steor.xml">STEORL</a>: Atomic exclusive OR on word or doubleword in memory, without return.</right></line>
  <line><left><a href="steorb.xml">STEORB, </a></left><right><a href="steorb.xml">STEORLB</a>: Atomic exclusive OR on byte in memory, without return.</right></line>
  <line><left><a href="steorh.xml">STEORH, </a></left><right><a href="steorh.xml">STEORLH</a>: Atomic exclusive OR on halfword in memory, without return.</right></line>
  <line><left><a href="frecps_advsimd.xml">FRECPS</a>: Floating-point Reciprocal </left><right>Step.</right></line>
  <line><left><a href="frsqrts_advsimd.xml">FRSQRTS</a>: Floating-point Reciprocal Square Root </left><right>Step.</right></line>
  <line><left></left><right><a href="stllr.xml">STLLR</a>: Store LORelease Register.</right></line>
  <line><left></left><right><a href="stllrb.xml">STLLRB</a>: Store LORelease Register Byte.</right></line>
  <line><left></left><right><a href="stllrh.xml">STLLRH</a>: Store LORelease Register Halfword.</right></line>
  <line><left></left><right><a href="stlr.xml">STLR</a>: Store-Release Register.</right></line>
  <line><left></left><right><a href="stlrb.xml">STLRB</a>: Store-Release Register Byte.</right></line>
  <line><left></left><right><a href="stlrh.xml">STLRH</a>: Store-Release Register Halfword.</right></line>
  <line><left></left><right><a href="stlxp.xml">STLXP</a>: Store-Release Exclusive Pair of registers.</right></line>
  <line><left></left><right><a href="stlxr.xml">STLXR</a>: Store-Release Exclusive Register.</right></line>
  <line><left></left><right><a href="stlxrb.xml">STLXRB</a>: Store-Release Exclusive Register Byte.</right></line>
  <line><left></left><right><a href="stlxrh.xml">STLXRH</a>: Store-Release Exclusive Register Halfword.</right></line>
  <line><left></left><right><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left></left><right><a href="stnp_gen.xml">STNP</a>: Store Pair of Registers, with non-temporal hint.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: </left><right>Store a single-element structure from one lane of one register.</right></line>
  <line><left><a href="stxp.xml">STXP</a>: </left><right>Store Exclusive Pair of registers.</right></line>
  <line><left><a href="stxrb.xml">STXRB</a>: </left><right>Store Exclusive Register Byte.</right></line>
  <line><left><a href="stxrh.xml">STXRH</a>: </left><right>Store Exclusive Register Halfword.</right></line>
  <line><left><a href="stxr.xml">STXR</a>: </left><right>Store Exclusive Register.</right></line>
  <line><left><a href="stllrb.xml">STLLRB</a>: </left><right>Store LORelease Register Byte.</right></line>
  <line><left><a href="stllrh.xml">STLLRH</a>: </left><right>Store LORelease Register Halfword.</right></line>
  <line><left><a href="stllr.xml">STLLR</a>: </left><right>Store LORelease Register.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: </left><right>Store multiple 2-element structures from two registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: </left><right>Store multiple 3-element structures from three registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: </left><right>Store multiple 4-element structures from four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: </left><right>Store multiple single-element structures from one, two, three, or four registers.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: </left><right>Store Pair of Registers, with non-temporal hint.</right></line>
  <line><left><a href="stp_gen.xml">STP</a>: </left><right>Store Pair of Registers.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: </left><right>Store Pair of SIMD&amp;FP registers, with Non-temporal hint.</right></line>
  <line><left><a href="stp_fpsimd.xml">STP (SIMD&amp;FP)</a>: </left><right>Store Pair of SIMD&amp;FP registers.</right></line>
  <line><left><a href="str_imm_gen.xml">STR (immediate)</a>: </left><right>Store Register (immediate).</right></line>
  <line><left><a href="str_reg_gen.xml">STR (register)</a>: </left><right>Store Register (register).</right></line>
  <line><left><a href="sttr.xml">STTR</a>: </left><right>Store Register (unprivileged).</right></line>
  <line><left><a href="stur_gen.xml">STUR</a>: </left><right>Store Register (unscaled).</right></line>
  <line><left><a href="strb_imm.xml">STRB (immediate)</a>: </left><right>Store Register Byte (immediate).</right></line>
  <line><left><a href="strb_reg.xml">STRB (register)</a>: </left><right>Store Register Byte (register).</right></line>
  <line><left><a href="sttrb.xml">STTRB</a>: </left><right>Store Register Byte (unprivileged).</right></line>
  <line><left><a href="sturb.xml">STURB</a>: </left><right>Store Register Byte (unscaled).</right></line>
  <line><left><a href="strh_imm.xml">STRH (immediate)</a>: </left><right>Store Register Halfword (immediate).</right></line>
  <line><left><a href="strh_reg.xml">STRH (register)</a>: </left><right>Store Register Halfword (register).</right></line>
  <line><left><a href="sttrh.xml">STTRH</a>: </left><right>Store Register Halfword (unprivileged).</right></line>
  <line><left><a href="sturh.xml">STURH</a>: </left><right>Store Register Halfword (unscaled).</right></line>
  <line><left><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: </left><right>Store SIMD&amp;FP register (immediate offset).</right></line>
  <line><left><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;FP)</a>: </left><right>Store SIMD&amp;FP register (register offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: </left><right>Store SIMD&amp;FP register (unscaled offset).</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: </left><right>Store single 2-element structure from one lane of two registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: </left><right>Store single 3-element structure from one lane of three registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: </left><right>Store single 4-element structure from one lane of four registers.</right></line>
  <line><left><a href="stlxp.xml">STLXP</a>: </left><right>Store-Release Exclusive Pair of registers.</right></line>
  <line><left><a href="stlxrb.xml">STLXRB</a>: </left><right>Store-Release Exclusive Register Byte.</right></line>
  <line><left><a href="stlxrh.xml">STLXRH</a>: </left><right>Store-Release Exclusive Register Halfword.</right></line>
  <line><left><a href="stlxr.xml">STLXR</a>: </left><right>Store-Release Exclusive Register.</right></line>
  <line><left><a href="stlrb.xml">STLRB</a>: </left><right>Store-Release Register Byte.</right></line>
  <line><left><a href="stlrh.xml">STLRH</a>: </left><right>Store-Release Register Halfword.</right></line>
  <line><left><a href="stlr.xml">STLR</a>: </left><right>Store-Release Register.</right></line>
  <line><left></left><right><a href="stp_fpsimd.xml">STP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers.</right></line>
  <line><left></left><right><a href="stp_gen.xml">STP</a>: Store Pair of Registers.</right></line>
  <line><left></left><right><a href="str_imm_gen.xml">STR (immediate)</a>: Store Register (immediate).</right></line>
  <line><left></left><right><a href="str_imm_fpsimd.xml">STR (immediate, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (immediate offset).</right></line>
  <line><left></left><right><a href="str_reg_gen.xml">STR (register)</a>: Store Register (register).</right></line>
  <line><left></left><right><a href="str_reg_fpsimd.xml">STR (register, SIMD&amp;FP)</a>: Store SIMD&amp;FP register (register offset).</right></line>
  <line><left></left><right><a href="strb_imm.xml">STRB (immediate)</a>: Store Register Byte (immediate).</right></line>
  <line><left></left><right><a href="strb_reg.xml">STRB (register)</a>: Store Register Byte (register).</right></line>
  <line><left></left><right><a href="strh_imm.xml">STRH (immediate)</a>: Store Register Halfword (immediate).</right></line>
  <line><left></left><right><a href="strh_reg.xml">STRH (register)</a>: Store Register Halfword (register).</right></line>
  <line><left><a href="ld1r_advsimd.xml">LD1R</a>: Load one single-element </left><right>structure and Replicate to all lanes (of one register).</right></line>
  <line><left><a href="ld4r_advsimd.xml">LD4R</a>: Load single 4-element </left><right>structure and Replicate to all lanes of four registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element </left><right>structure and Replicate to all lanes of three registers.</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element </left><right>structure and Replicate to all lanes of two registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single structure)</a>: Store single 4-element </left><right>structure from one lane of four registers.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single structure)</a>: Store a single-element </left><right>structure from one lane of one register.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single 3-element </left><right>structure from one lane of three registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single 2-element </left><right>structure from one lane of two registers.</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single structure)</a>: Load single 4-element </left><right>structure to one lane of four registers.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single structure)</a>: Load one single-element </left><right>structure to one lane of one register.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single 3-element </left><right>structure to one lane of three registers).</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single 2-element </left><right>structure to one lane of two registers.</right></line>
  <line><left><a href="ld1_advsimd_sngl.xml">LD1 (single </a></left><right><a href="ld1_advsimd_sngl.xml">structure)</a>: Load one single-element structure to one lane of one register.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single </a></left><right><a href="ld2_advsimd_sngl.xml">structure)</a>: Load single 2-element structure to one lane of two registers.</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single </a></left><right><a href="ld3_advsimd_sngl.xml">structure)</a>: Load single 3-element structure to one lane of three registers).</right></line>
  <line><left><a href="ld4_advsimd_sngl.xml">LD4 (single </a></left><right><a href="ld4_advsimd_sngl.xml">structure)</a>: Load single 4-element structure to one lane of four registers.</right></line>
  <line><left><a href="st1_advsimd_sngl.xml">ST1 (single </a></left><right><a href="st1_advsimd_sngl.xml">structure)</a>: Store a single-element structure from one lane of one register.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single </a></left><right><a href="st2_advsimd_sngl.xml">structure)</a>: Store single 2-element structure from one lane of two registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single </a></left><right><a href="st3_advsimd_sngl.xml">structure)</a>: Store single 3-element structure from one lane of three registers.</right></line>
  <line><left><a href="st4_advsimd_sngl.xml">ST4 (single </a></left><right><a href="st4_advsimd_sngl.xml">structure)</a>: Store single 4-element structure from one lane of four registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple structures)</a>: Store multiple 4-element </left><right>structures from four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element </left><right>structures from one, two, three, or four registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: Store multiple 3-element </left><right>structures from three registers.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: Store multiple 2-element </left><right>structures from two registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple structures)</a>: Load multiple 4-element </left><right>structures to four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element </left><right>structures to one, two, three, or four registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: Load multiple 3-element </left><right>structures to three registers.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: Load multiple 2-element </left><right>structures to two registers.</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple </a></left><right><a href="ld2_advsimd_mult.xml">structures)</a>: Load multiple 2-element structures to two registers.</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple </a></left><right><a href="ld3_advsimd_mult.xml">structures)</a>: Load multiple 3-element structures to three registers.</right></line>
  <line><left><a href="ld4_advsimd_mult.xml">LD4 (multiple </a></left><right><a href="ld4_advsimd_mult.xml">structures)</a>: Load multiple 4-element structures to four registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple </a></left><right><a href="ld1_advsimd_mult.xml">structures)</a>: Load multiple single-element structures to one, two, three, or four registers.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple </a></left><right><a href="st2_advsimd_mult.xml">structures)</a>: Store multiple 2-element structures from two registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple </a></left><right><a href="st3_advsimd_mult.xml">structures)</a>: Store multiple 3-element structures from three registers.</right></line>
  <line><left><a href="st4_advsimd_mult.xml">ST4 (multiple </a></left><right><a href="st4_advsimd_mult.xml">structures)</a>: Store multiple 4-element structures from four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple </a></left><right><a href="st1_advsimd_mult.xml">structures)</a>: Store multiple single-element structures from one, two, three, or four registers.</right></line>
  <line><left></left><right><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set on halfword in memory, without return.</right></line>
  <line><left><a href="stset.xml">STSET, </a></left><right><a href="stset.xml">STSETL</a>: Atomic bit set on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, </a></left><right><a href="stsetb.xml">STSETLB</a>: Atomic bit set on byte in memory, without return.</right></line>
  <line><left><a href="stseth.xml">STSETH, </a></left><right><a href="stseth.xml">STSETLH</a>: Atomic bit set on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum on halfword in memory, without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, </a></left><right><a href="stsmax.xml">STSMAXL</a>: Atomic signed maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, </a></left><right><a href="stsmaxb.xml">STSMAXLB</a>: Atomic signed maximum on byte in memory, without return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, </a></left><right><a href="stsmaxh.xml">STSMAXLH</a>: Atomic signed maximum on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum on halfword in memory, without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, </a></left><right><a href="stsmin.xml">STSMINL</a>: Atomic signed minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, </a></left><right><a href="stsminb.xml">STSMINLB</a>: Atomic signed minimum on byte in memory, without return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, </a></left><right><a href="stsminh.xml">STSMINLH</a>: Atomic signed minimum on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="sttr.xml">STTR</a>: Store Register (unprivileged).</right></line>
  <line><left></left><right><a href="sttrb.xml">STTRB</a>: Store Register Byte (unprivileged).</right></line>
  <line><left></left><right><a href="sttrh.xml">STTRH</a>: Store Register Halfword (unprivileged).</right></line>
  <line><left></left><right><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum on halfword in memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, </a></left><right><a href="stumax.xml">STUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, </a></left><right><a href="stumaxb.xml">STUMAXLB</a>: Atomic unsigned maximum on byte in memory, without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, </a></left><right><a href="stumaxh.xml">STUMAXLH</a>: Atomic unsigned maximum on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on word or doubleword in memory, without return.</right></line>
  <line><left></left><right><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum on byte in memory, without return.</right></line>
  <line><left></left><right><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum on halfword in memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, </a></left><right><a href="stumin.xml">STUMINL</a>: Atomic unsigned minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, </a></left><right><a href="stuminb.xml">STUMINLB</a>: Atomic unsigned minimum on byte in memory, without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, </a></left><right><a href="stuminh.xml">STUMINLH</a>: Atomic unsigned minimum on halfword in memory, without return.</right></line>
  <line><left></left><right><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: Store SIMD&amp;FP register (unscaled offset).</right></line>
  <line><left></left><right><a href="stur_gen.xml">STUR</a>: Store Register (unscaled).</right></line>
  <line><left></left><right><a href="sturb.xml">STURB</a>: Store Register Byte (unscaled).</right></line>
  <line><left></left><right><a href="sturh.xml">STURH</a>: Store Register Halfword (unscaled).</right></line>
  <line><left></left><right><a href="stxp.xml">STXP</a>: Store Exclusive Pair of registers.</right></line>
  <line><left></left><right><a href="stxr.xml">STXR</a>: Store Exclusive Register.</right></line>
  <line><left></left><right><a href="stxrb.xml">STXRB</a>: Store Exclusive Register Byte.</right></line>
  <line><left></left><right><a href="stxrh.xml">STXRH</a>: Store Exclusive Register Halfword.</right></line>
  <line><left></left><right><a href="sub_addsub_ext.xml">SUB (extended register)</a>: Subtract (extended register).</right></line>
  <line><left></left><right><a href="sub_addsub_imm.xml">SUB (immediate)</a>: Subtract (immediate).</right></line>
  <line><left><a href="neg_sub_addsub_shift.xml">NEG (shifted register)</a>: Negate (shifted register): an alias of </left><right>SUB (shifted register).</right></line>
  <line><left></left><right><a href="sub_addsub_shift.xml">SUB (shifted register)</a>: Subtract (shifted register).</right></line>
  <line><left></left><right><a href="sub_advsimd.xml">SUB (vector)</a>: Subtract (vector).</right></line>
  <line><left></left><right><a href="subhn_advsimd.xml">SUBHN, SUBHN2</a>: Subtract returning High Narrow.</right></line>
  <line><left><a href="subhn_advsimd.xml">SUBHN, </a></left><right><a href="subhn_advsimd.xml">SUBHN2</a>: Subtract returning High Narrow.</right></line>
  <line><left><a href="ret.xml">RET</a>: Return from </left><right>subroutine.</right></line>
  <line><left><a href="cmp_subs_addsub_ext.xml">CMP (extended register)</a>: Compare (extended register): an alias of </left><right>SUBS (extended register).</right></line>
  <line><left></left><right><a href="subs_addsub_ext.xml">SUBS (extended register)</a>: Subtract (extended register), setting flags.</right></line>
  <line><left><a href="cmp_subs_addsub_imm.xml">CMP (immediate)</a>: Compare (immediate): an alias of </left><right>SUBS (immediate).</right></line>
  <line><left></left><right><a href="subs_addsub_imm.xml">SUBS (immediate)</a>: Subtract (immediate), setting flags.</right></line>
  <line><left><a href="cmp_subs_addsub_shift.xml">CMP (shifted register)</a>: Compare (shifted register): an alias of </left><right>SUBS (shifted register).</right></line>
  <line><left><a href="negs_subs_addsub_shift.xml">NEGS</a>: Negate, setting flags: an alias of </left><right>SUBS (shifted register).</right></line>
  <line><left></left><right><a href="subs_addsub_shift.xml">SUBS (shifted register)</a>: Subtract (shifted register), setting flags.</right></line>
  <line><left><a href="subs_addsub_ext.xml">SUBS (extended register)</a>: </left><right>Subtract (extended register), setting flags.</right></line>
  <line><left><a href="sub_addsub_ext.xml">SUB (extended register)</a>: </left><right>Subtract (extended register).</right></line>
  <line><left><a href="subs_addsub_imm.xml">SUBS (immediate)</a>: </left><right>Subtract (immediate), setting flags.</right></line>
  <line><left><a href="sub_addsub_imm.xml">SUB (immediate)</a>: </left><right>Subtract (immediate).</right></line>
  <line><left><a href="fmsub_float.xml">FMSUB</a>: Floating-point Fused Multiply-</left><right>Subtract (scalar).</right></line>
  <line><left><a href="fnmsub_float.xml">FNMSUB</a>: Floating-point Negated fused Multiply-</left><right>Subtract (scalar).</right></line>
  <line><left><a href="fsub_float.xml">FSUB (scalar)</a>: Floating-point </left><right>Subtract (scalar).</right></line>
  <line><left><a href="subs_addsub_shift.xml">SUBS (shifted register)</a>: </left><right>Subtract (shifted register), setting flags.</right></line>
  <line><left><a href="sub_addsub_shift.xml">SUB (shifted register)</a>: </left><right>Subtract (shifted register).</right></line>
  <line><left><a href="fsub_advsimd.xml">FSUB (vector)</a>: Floating-point </left><right>Subtract (vector).</right></line>
  <line><left><a href="sub_advsimd.xml">SUB (vector)</a>: </left><right>Subtract (vector).</right></line>
  <line><left><a href="fmls_advsimd_elt.xml">FMLS (by element)</a>: Floating-point fused Multiply-</left><right>Subtract from accumulator (by element).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point fused Multiply-</left><right>Subtract from accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_vec.xml">MLS (vector)</a>: Multiply-</left><right>Subtract from accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by element)</a>: Multiply-</left><right>Subtract from accumulator (vector, by element).</right></line>
  <line><left><a href="sqdmlsl_advsimd_elt.xml">SQDMLSL, SQDMLSL2 (by element)</a>: Signed saturating Doubling Multiply-</left><right>Subtract Long (by element).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: Signed Multiply-</left><right>Subtract Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: Unsigned Multiply-</left><right>Subtract Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed Multiply-</left><right>Subtract Long (vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned Multiply-</left><right>Subtract Long (vector, by element).</right></line>
  <line><left><a href="smsubl.xml">SMSUBL</a>: Signed Multiply-</left><right>Subtract Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (vector)</a>: Signed saturating Doubling Multiply-</left><right>Subtract Long.</right></line>
  <line><left><a href="ssubl_advsimd.xml">SSUBL, SSUBL2</a>: Signed </left><right>Subtract Long.</right></line>
  <line><left><a href="umsubl.xml">UMSUBL</a>: Unsigned Multiply-</left><right>Subtract Long.</right></line>
  <line><left><a href="usubl_advsimd.xml">USUBL, USUBL2</a>: Unsigned </left><right>Subtract Long.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_elt.xml">SQRDMLSH (by element)</a>: Signed Saturating Rounding Doubling Multiply </left><right>Subtract returning High Half (by element).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply </left><right>Subtract returning High Half (vector).</right></line>
  <line><left><a href="rsubhn_advsimd.xml">RSUBHN, RSUBHN2</a>: Rounding </left><right>Subtract returning High Narrow.</right></line>
  <line><left><a href="subhn_advsimd.xml">SUBHN, SUBHN2</a>: </left><right>Subtract returning High Narrow.</right></line>
  <line><left><a href="ssubw_advsimd.xml">SSUBW, SSUBW2</a>: Signed </left><right>Subtract Wide.</right></line>
  <line><left><a href="usubw_advsimd.xml">USUBW, USUBW2</a>: Unsigned </left><right>Subtract Wide.</right></line>
  <line><left><a href="sbcs.xml">SBCS</a>: </left><right>Subtract with Carry, setting flags.</right></line>
  <line><left><a href="sbc.xml">SBC</a>: </left><right>Subtract with Carry.</right></line>
  <line><left><a href="msub.xml">MSUB</a>: Multiply-</left><right>Subtract.</right></line>
  <line><left><a href="shsub_advsimd.xml">SHSUB</a>: Signed Halving </left><right>Subtract.</right></line>
  <line><left><a href="sqsub_advsimd.xml">SQSUB</a>: Signed saturating </left><right>Subtract.</right></line>
  <line><left><a href="uhsub_advsimd.xml">UHSUB</a>: Unsigned Halving </left><right>Subtract.</right></line>
  <line><left><a href="uqsub_advsimd.xml">UQSUB</a>: Unsigned saturating </left><right>Subtract.</right></line>
  <line><left><a href="uaddlv_advsimd.xml">UADDLV</a>: Unsigned </left><right>sum Long across Vector.</right></line>
  <line><left><a href="svc.xml">SVC</a>: </left><right>Supervisor Call.</right></line>
  <line><left></left><right><a href="suqadd_advsimd.xml">SUQADD</a>: Signed saturating Accumulate of Unsigned value.</right></line>
  <line><left></left><right><a href="svc.xml">SVC</a>: Supervisor Call.</right></line>
  <line><left><a href="casb.xml">CASB, CASAB, CASALB, CASLB</a>: Compare and </left><right>Swap byte in memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, SWPAB, SWPALB, SWPLB</a>: </left><right>Swap byte in memory.</right></line>
  <line><left><a href="cash.xml">CASH, CASAH, CASALH, CASLH</a>: Compare and </left><right>Swap halfword in memory.</right></line>
  <line><left><a href="swph.xml">SWPH, SWPAH, SWPALH, SWPLH</a>: </left><right>Swap halfword in memory.</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and </left><right>Swap Pair of words or doublewords in memory.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: Compare and </left><right>Swap word or doubleword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, SWPAL, SWPL</a>: </left><right>Swap word or doubleword in memory.</right></line>
  <line><left></left><right><a href="swp.xml">SWP, SWPA, SWPAL, SWPL</a>: Swap word or doubleword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, </a></left><right><a href="swp.xml">SWPA, SWPAL, SWPL</a>: Swap word or doubleword in memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, </a></left><right><a href="swpb.xml">SWPAB, SWPALB, SWPLB</a>: Swap byte in memory.</right></line>
  <line><left><a href="swph.xml">SWPH, </a></left><right><a href="swph.xml">SWPAH, SWPALH, SWPLH</a>: Swap halfword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, </a></left><right><a href="swp.xml">SWPAL, SWPL</a>: Swap word or doubleword in memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, SWPAB, </a></left><right><a href="swpb.xml">SWPALB, SWPLB</a>: Swap byte in memory.</right></line>
  <line><left><a href="swph.xml">SWPH, SWPAH, </a></left><right><a href="swph.xml">SWPALH, SWPLH</a>: Swap halfword in memory.</right></line>
  <line><left></left><right><a href="swpb.xml">SWPB, SWPAB, SWPALB, SWPLB</a>: Swap byte in memory.</right></line>
  <line><left></left><right><a href="swph.xml">SWPH, SWPAH, SWPALH, SWPLH</a>: Swap halfword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, SWPAL, </a></left><right><a href="swp.xml">SWPL</a>: Swap word or doubleword in memory.</right></line>
  <line><left><a href="swpb.xml">SWPB, SWPAB, SWPALB, </a></left><right><a href="swpb.xml">SWPLB</a>: Swap byte in memory.</right></line>
  <line><left><a href="swph.xml">SWPH, SWPAH, SWPALH, </a></left><right><a href="swph.xml">SWPLH</a>: Swap halfword in memory.</right></line>
  <line><left></left><right><a href="sxtb_sbfm.xml">SXTB</a>: Signed Extend Byte: an alias of SBFM.</right></line>
  <line><left></left><right><a href="sxth_sbfm.xml">SXTH</a>: Sign Extend Halfword: an alias of SBFM.</right></line>
  <line><left></left><right><a href="sxtl_sshll_advsimd.xml">SXTL, SXTL2</a>: Signed extend Long: an alias of SSHLL, SSHLL2.</right></line>
  <line><left><a href="sxtl_sshll_advsimd.xml">SXTL, </a></left><right><a href="sxtl_sshll_advsimd.xml">SXTL2</a>: Signed extend Long: an alias of SSHLL, SSHLL2.</right></line>
  <line><left></left><right><a href="sxtw_sbfm.xml">SXTW</a>: Sign Extend Word: an alias of SBFM.</right></line>
  <line><left><a href="dsb.xml">DSB</a>: Data </left><right>Synchronization Barrier.</right></line>
  <line><left><a href="esb.xml">ESB</a>: Error </left><right>Synchronization Barrier.</right></line>
  <line><left><a href="isb.xml">ISB</a>: Instruction </left><right>Synchronization Barrier.</right></line>
  <line><left><a href="psb.xml">PSB CSYNC</a>: Profiling </left><right>Synchronization Barrier.</right></line>
  <line><left><a href="at_sys.xml">AT</a>: Address Translate: an alias of </left><right>SYS.</right></line>
  <line><left><a href="dc_sys.xml">DC</a>: Data Cache operation: an alias of </left><right>SYS.</right></line>
  <line><left><a href="ic_sys.xml">IC</a>: Instruction Cache operation: an alias of </left><right>SYS.</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: TLB Invalidate operation: an alias of </left><right>SYS.</right></line>
  <line><left></left><right><a href="sys.xml">SYS</a>: System instruction.</right></line>
  <line><left></left><right><a href="sysl.xml">SYSL</a>: System instruction with result.</right></line>
  <line><left><a href="sysl.xml">SYSL</a>: </left><right>System instruction with result.</right></line>
  <line><left><a href="sys.xml">SYS</a>: </left><right>System instruction.</right></line>
  <line><left><a href="mrs.xml">MRS</a>: Move </left><right>System Register.</right></line>
  <line><left><a href="msr_reg.xml">MSR (register)</a>: Move general-purpose register to </left><right>System Register.</right></line>
  <line initialtag="T"><left><a href="tbx_advsimd.xml">TBX</a>: </left><right>Table vector lookup extension.</right></line>
  <line><left><a href="tbl_advsimd.xml">TBL</a>: </left><right>Table vector Lookup.</right></line>
  <line><left></left><right><a href="tbl_advsimd.xml">TBL</a>: Table vector Lookup.</right></line>
  <line><left></left><right><a href="tbnz.xml">TBNZ</a>: Test bit and Branch if Nonzero.</right></line>
  <line><left></left><right><a href="tbx_advsimd.xml">TBX</a>: Table vector lookup extension.</right></line>
  <line><left></left><right><a href="tbz.xml">TBZ</a>: Test bit and Branch if Zero.</right></line>
  <line><left><a href="ldnp_fpsimd.xml">LDNP (SIMD&amp;FP)</a>: Load Pair of SIMD&amp;FP registers, with Non-</left><right>temporal hint.</right></line>
  <line><left><a href="ldnp_gen.xml">LDNP</a>: Load Pair of Registers, with non-</left><right>temporal hint.</right></line>
  <line><left><a href="stnp_fpsimd.xml">STNP (SIMD&amp;FP)</a>: Store Pair of SIMD&amp;FP registers, with Non-</left><right>temporal hint.</right></line>
  <line><left><a href="stnp_gen.xml">STNP</a>: Store Pair of Registers, with non-</left><right>temporal hint.</right></line>
  <line><left><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: </left><right>Test (shifted register): an alias of ANDS (shifted register).</right></line>
  <line><left><a href="tbnz.xml">TBNZ</a>: </left><right>Test bit and Branch if Nonzero.</right></line>
  <line><left><a href="tbz.xml">TBZ</a>: </left><right>Test bit and Branch if Zero.</right></line>
  <line><left><a href="tst_ands_log_imm.xml">TST (immediate)</a>: </left><right>Test bits (immediate): an alias of ANDS (immediate).</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: Compare bitwise </left><right>Test bits nonzero (vector).</right></line>
  <line><left><a href="ld3_advsimd_sngl.xml">LD3 (single structure)</a>: Load single 3-element structure to one lane of </left><right>three registers).</right></line>
  <line><left><a href="ld3_advsimd_mult.xml">LD3 (multiple structures)</a>: Load multiple 3-element structures to </left><right>three registers.</right></line>
  <line><left><a href="ld3r_advsimd.xml">LD3R</a>: Load single 3-element structure and Replicate to all lanes of </left><right>three registers.</right></line>
  <line><left><a href="st3_advsimd_mult.xml">ST3 (multiple structures)</a>: Store multiple 3-element structures from </left><right>three registers.</right></line>
  <line><left><a href="st3_advsimd_sngl.xml">ST3 (single structure)</a>: Store single 3-element structure from one lane of </left><right>three registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element structures to one, two, </left><right>three, or four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element structures from one, two, </left><right>three, or four registers.</right></line>
  <line><left><a href="fcvtas_float.xml">FCVTAS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with </left><right>ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with </left><right>ties to Away (scalar).</right></line>
  <line><left><a href="frinta_float.xml">FRINTA (scalar)</a>: Floating-point Round to Integral, to nearest with </left><right>ties to Away (scalar).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with </left><right>ties to Away (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with </left><right>ties to Away (vector).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to Integral, to nearest with </left><right>ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_float.xml">FCVTNS (scalar)</a>: Floating-point Convert to Signed integer, rounding to nearest with </left><right>ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with </left><right>ties to even (scalar).</right></line>
  <line><left><a href="frintn_float.xml">FRINTN (scalar)</a>: Floating-point Round to Integral, to nearest with </left><right>ties to even (scalar).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with </left><right>ties to even (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with </left><right>ties to even (vector).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to Integral, to nearest with </left><right>ties to even (vector).</right></line>
  <line><left><a href="tlbi_sys.xml">TLBI</a>: </left><right>TLB Invalidate operation: an alias of SYS.</right></line>
  <line><left></left><right><a href="tlbi_sys.xml">TLBI</a>: TLB Invalidate operation: an alias of SYS.</right></line>
  <line><left><a href="fcvtms_float.xml">FCVTMS (scalar)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Minus infinity (scalar).</right></line>
  <line><left><a href="frintm_float.xml">FRINTM (scalar)</a>: Floating-point Round to Integral, </left><right>toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Minus infinity (vector).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to Integral, </left><right>toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_float.xml">FCVTPS (scalar)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Plus infinity (scalar).</right></line>
  <line><left><a href="frintp_float.xml">FRINTP (scalar)</a>: Floating-point Round to Integral, </left><right>toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Plus infinity (vector).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to Integral, </left><right>toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding </left><right>toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding </left><right>toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Zero (scalar).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point Round to Integral, </left><right>toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding </left><right>toward Zero (vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed integer, rounding </left><right>toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding </left><right>toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned integer, rounding </left><right>toward Zero (vector).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point Round to Integral, </left><right>toward Zero (vector).</right></line>
  <line><left><a href="at_sys.xml">AT</a>: Address </left><right>Translate: an alias of SYS.</right></line>
  <line><left><a href="trn1_advsimd.xml">TRN1</a>: </left><right>Transpose vectors (primary).</right></line>
  <line><left><a href="trn2_advsimd.xml">TRN2</a>: </left><right>Transpose vectors (secondary).</right></line>
  <line><left></left><right><a href="trn1_advsimd.xml">TRN1</a>: Transpose vectors (primary).</right></line>
  <line><left></left><right><a href="trn2_advsimd.xml">TRN2</a>: Transpose vectors (secondary).</right></line>
  <line><left><a href="bit_advsimd.xml">BIT</a>: Bitwise Insert if </left><right>True.</right></line>
  <line><left></left><right><a href="tst_ands_log_imm.xml">TST (immediate)</a>: Test bits (immediate): an alias of ANDS (immediate).</right></line>
  <line><left></left><right><a href="tst_ands_log_shift.xml">TST (shifted register)</a>: Test (shifted register): an alias of ANDS (shifted register).</right></line>
  <line><left><a href="ld2_advsimd_mult.xml">LD2 (multiple structures)</a>: Load multiple 2-element structures to </left><right>two registers.</right></line>
  <line><left><a href="ld2_advsimd_sngl.xml">LD2 (single structure)</a>: Load single 2-element structure to one lane of </left><right>two registers.</right></line>
  <line><left><a href="ld2r_advsimd.xml">LD2R</a>: Load single 2-element structure and Replicate to all lanes of </left><right>two registers.</right></line>
  <line><left><a href="st2_advsimd_mult.xml">ST2 (multiple structures)</a>: Store multiple 2-element structures from </left><right>two registers.</right></line>
  <line><left><a href="st2_advsimd_sngl.xml">ST2 (single structure)</a>: Store single 2-element structure from one lane of </left><right>two registers.</right></line>
  <line><left><a href="ld1_advsimd_mult.xml">LD1 (multiple structures)</a>: Load multiple single-element structures to one, </left><right>two, three, or four registers.</right></line>
  <line><left><a href="st1_advsimd_mult.xml">ST1 (multiple structures)</a>: Store multiple single-element structures from one, </left><right>two, three, or four registers.</right></line>
  <line initialtag="U"><left></left><right><a href="uaba_advsimd.xml">UABA</a>: Unsigned Absolute difference and Accumulate.</right></line>
  <line><left></left><right><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: Unsigned Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, </a></left><right><a href="uabal_advsimd.xml">UABAL2</a>: Unsigned Absolute difference and Accumulate Long.</right></line>
  <line><left></left><right><a href="uabd_advsimd.xml">UABD</a>: Unsigned Absolute Difference (vector).</right></line>
  <line><left></left><right><a href="uabdl_advsimd.xml">UABDL, UABDL2</a>: Unsigned Absolute Difference Long.</right></line>
  <line><left><a href="uabdl_advsimd.xml">UABDL, </a></left><right><a href="uabdl_advsimd.xml">UABDL2</a>: Unsigned Absolute Difference Long.</right></line>
  <line><left></left><right><a href="uadalp_advsimd.xml">UADALP</a>: Unsigned Add and Accumulate Long Pairwise.</right></line>
  <line><left></left><right><a href="uaddl_advsimd.xml">UADDL, UADDL2</a>: Unsigned Add Long (vector).</right></line>
  <line><left><a href="uaddl_advsimd.xml">UADDL, </a></left><right><a href="uaddl_advsimd.xml">UADDL2</a>: Unsigned Add Long (vector).</right></line>
  <line><left></left><right><a href="uaddlp_advsimd.xml">UADDLP</a>: Unsigned Add Long Pairwise.</right></line>
  <line><left></left><right><a href="uaddlv_advsimd.xml">UADDLV</a>: Unsigned sum Long across Vector.</right></line>
  <line><left></left><right><a href="uaddw_advsimd.xml">UADDW, UADDW2</a>: Unsigned Add Wide.</right></line>
  <line><left><a href="uaddw_advsimd.xml">UADDW, </a></left><right><a href="uaddw_advsimd.xml">UADDW2</a>: Unsigned Add Wide.</right></line>
  <line><left></left><right><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield Insert in Zero: an alias of UBFM.</right></line>
  <line><left><a href="lsl_ubfm.xml">LSL (immediate)</a>: Logical Shift Left (immediate): an alias of </left><right>UBFM.</right></line>
  <line><left><a href="lsr_ubfm.xml">LSR (immediate)</a>: Logical Shift Right (immediate): an alias of </left><right>UBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield Insert in Zero: an alias of </left><right>UBFM.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned Bitfield Extract: an alias of </left><right>UBFM.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned Extend Byte: an alias of </left><right>UBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: Unsigned Extend Halfword: an alias of </left><right>UBFM.</right></line>
  <line><left></left><right><a href="ubfm.xml">UBFM</a>: Unsigned Bitfield Move.</right></line>
  <line><left></left><right><a href="ubfx_ubfm.xml">UBFX</a>: Unsigned Bitfield Extract: an alias of UBFM.</right></line>
  <line><left></left><right><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left></left><right><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: Unsigned integer Convert to Floating-point (scalar).</right></line>
  <line><left></left><right><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (vector).</right></line>
  <line><left></left><right><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned integer Convert to Floating-point (vector).</right></line>
  <line><left></left><right><a href="udiv.xml">UDIV</a>: Unsigned Divide.</right></line>
  <line><left></left><right><a href="uhadd_advsimd.xml">UHADD</a>: Unsigned Halving Add.</right></line>
  <line><left></left><right><a href="uhsub_advsimd.xml">UHSUB</a>: Unsigned Halving Subtract.</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: Unsigned Multiply Long: an alias of </left><right>UMADDL.</right></line>
  <line><left></left><right><a href="umaddl.xml">UMADDL</a>: Unsigned Multiply-Add Long.</right></line>
  <line><left></left><right><a href="umax_advsimd.xml">UMAX</a>: Unsigned Maximum (vector).</right></line>
  <line><left></left><right><a href="umaxp_advsimd.xml">UMAXP</a>: Unsigned Maximum Pairwise.</right></line>
  <line><left></left><right><a href="umaxv_advsimd.xml">UMAXV</a>: Unsigned Maximum across Vector.</right></line>
  <line><left></left><right><a href="umin_advsimd.xml">UMIN</a>: Unsigned Minimum (vector).</right></line>
  <line><left></left><right><a href="uminp_advsimd.xml">UMINP</a>: Unsigned Minimum Pairwise.</right></line>
  <line><left></left><right><a href="uminv_advsimd.xml">UMINV</a>: Unsigned Minimum across Vector.</right></line>
  <line><left></left><right><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned Multiply-Add Long (vector, by element).</right></line>
  <line><left></left><right><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: Unsigned Multiply-Add Long (vector).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, </a></left><right><a href="umlal_advsimd_elt.xml">UMLAL2 (by element)</a>: Unsigned Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, </a></left><right><a href="umlal_advsimd_vec.xml">UMLAL2 (vector)</a>: Unsigned Multiply-Add Long (vector).</right></line>
  <line><left></left><right><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned Multiply-Subtract Long (vector, by element).</right></line>
  <line><left></left><right><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: Unsigned Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, </a></left><right><a href="umlsl_advsimd_elt.xml">UMLSL2 (by element)</a>: Unsigned Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, </a></left><right><a href="umlsl_advsimd_vec.xml">UMLSL2 (vector)</a>: Unsigned Multiply-Subtract Long (vector).</right></line>
  <line><left></left><right><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-Negate Long: an alias of UMSUBL.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move vector element to general-purpose register: an alias of </left><right>UMOV.</right></line>
  <line><left></left><right><a href="umov_advsimd.xml">UMOV</a>: Unsigned Move vector element to general-purpose register.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: Unsigned Multiply-Negate Long: an alias of </left><right>UMSUBL.</right></line>
  <line><left></left><right><a href="umsubl.xml">UMSUBL</a>: Unsigned Multiply-Subtract Long.</right></line>
  <line><left></left><right><a href="umulh.xml">UMULH</a>: Unsigned Multiply High.</right></line>
  <line><left></left><right><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: Unsigned Multiply Long (vector, by element).</right></line>
  <line><left></left><right><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (vector)</a>: Unsigned Multiply long (vector).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, </a></left><right><a href="umull_advsimd_elt.xml">UMULL2 (by element)</a>: Unsigned Multiply Long (vector, by element).</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, </a></left><right><a href="umull_advsimd_vec.xml">UMULL2 (vector)</a>: Unsigned Multiply long (vector).</right></line>
  <line><left></left><right><a href="umull_umaddl.xml">UMULL</a>: Unsigned Multiply Long: an alias of UMADDL.</right></line>
  <line><left><a href="bfc_bfm.xml">BFC</a>: Bitfield Clear, leaving other bits </left><right>unchanged: an alias of BFM.</right></line>
  <line><left><a href="ldtr.xml">LDTR</a>: Load Register (</left><right>unprivileged).</right></line>
  <line><left><a href="ldtrb.xml">LDTRB</a>: Load Register Byte (</left><right>unprivileged).</right></line>
  <line><left><a href="ldtrh.xml">LDTRH</a>: Load Register Halfword (</left><right>unprivileged).</right></line>
  <line><left><a href="ldtrsb.xml">LDTRSB</a>: Load Register Signed Byte (</left><right>unprivileged).</right></line>
  <line><left><a href="ldtrsh.xml">LDTRSH</a>: Load Register Signed Halfword (</left><right>unprivileged).</right></line>
  <line><left><a href="ldtrsw.xml">LDTRSW</a>: Load Register Signed Word (</left><right>unprivileged).</right></line>
  <line><left><a href="sttr.xml">STTR</a>: Store Register (</left><right>unprivileged).</right></line>
  <line><left><a href="sttrb.xml">STTRB</a>: Store Register Byte (</left><right>unprivileged).</right></line>
  <line><left><a href="sttrh.xml">STTRH</a>: Store Register Halfword (</left><right>unprivileged).</right></line>
  <line><left><a href="ldur_fpsimd.xml">LDUR (SIMD&amp;FP)</a>: Load SIMD&amp;FP Register (</left><right>unscaled offset).</right></line>
  <line><left><a href="prfum.xml">PRFM (unscaled offset)</a>: Prefetch Memory (</left><right>unscaled offset).</right></line>
  <line><left><a href="stur_fpsimd.xml">STUR (SIMD&amp;FP)</a>: Store SIMD&amp;FP register (</left><right>unscaled offset).</right></line>
  <line><left><a href="prfum.xml">PRFM (</a></left><right><a href="prfum.xml">unscaled offset)</a>: Prefetch Memory (unscaled offset).</right></line>
  <line><left><a href="ldur_gen.xml">LDUR</a>: Load Register (</left><right>unscaled).</right></line>
  <line><left><a href="ldurb.xml">LDURB</a>: Load Register Byte (</left><right>unscaled).</right></line>
  <line><left><a href="ldurh.xml">LDURH</a>: Load Register Halfword (</left><right>unscaled).</right></line>
  <line><left><a href="ldursb.xml">LDURSB</a>: Load Register Signed Byte (</left><right>unscaled).</right></line>
  <line><left><a href="ldursh.xml">LDURSH</a>: Load Register Signed Halfword (</left><right>unscaled).</right></line>
  <line><left><a href="ldursw.xml">LDURSW</a>: Load Register Signed Word (</left><right>unscaled).</right></line>
  <line><left><a href="stur_gen.xml">STUR</a>: Store Register (</left><right>unscaled).</right></line>
  <line><left><a href="sturb.xml">STURB</a>: Store Register Byte (</left><right>unscaled).</right></line>
  <line><left><a href="sturh.xml">STURH</a>: Store Register Halfword (</left><right>unscaled).</right></line>
  <line><left><a href="sqshlu_advsimd.xml">SQSHLU</a>: Signed saturating Shift Left </left><right>Unsigned (immediate).</right></line>
  <line><left><a href="uabd_advsimd.xml">UABD</a>: </left><right>Unsigned Absolute Difference (vector).</right></line>
  <line><left><a href="uabal_advsimd.xml">UABAL, UABAL2</a>: </left><right>Unsigned Absolute difference and Accumulate Long.</right></line>
  <line><left><a href="uaba_advsimd.xml">UABA</a>: </left><right>Unsigned Absolute difference and Accumulate.</right></line>
  <line><left><a href="uabdl_advsimd.xml">UABDL, UABDL2</a>: </left><right>Unsigned Absolute Difference Long.</right></line>
  <line><left><a href="uadalp_advsimd.xml">UADALP</a>: </left><right>Unsigned Add and Accumulate Long Pairwise.</right></line>
  <line><left><a href="uaddl_advsimd.xml">UADDL, UADDL2</a>: </left><right>Unsigned Add Long (vector).</right></line>
  <line><left><a href="uaddlp_advsimd.xml">UADDLP</a>: </left><right>Unsigned Add Long Pairwise.</right></line>
  <line><left><a href="uaddw_advsimd.xml">UADDW, UADDW2</a>: </left><right>Unsigned Add Wide.</right></line>
  <line><left><a href="ubfx_ubfm.xml">UBFX</a>: </left><right>Unsigned Bitfield Extract: an alias of UBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: </left><right>Unsigned Bitfield Insert in Zero: an alias of UBFM.</right></line>
  <line><left><a href="ubfm.xml">UBFM</a>: </left><right>Unsigned Bitfield Move.</right></line>
  <line><left><a href="udiv.xml">UDIV</a>: </left><right>Unsigned Divide.</right></line>
  <line><left><a href="uxtb_ubfm.xml">UXTB</a>: </left><right>Unsigned Extend Byte: an alias of UBFM.</right></line>
  <line><left><a href="uxth_ubfm.xml">UXTH</a>: </left><right>Unsigned Extend Halfword: an alias of UBFM.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: </left><right>Unsigned extend Long: an alias of USHLL, USHLL2.</right></line>
  <line><left><a href="ucvtf_float_fix.xml">UCVTF (scalar, fixed-point)</a>: </left><right>Unsigned fixed-point Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: </left><right>Unsigned fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to </left><right>Unsigned fixed-point, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to </left><right>Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="uhadd_advsimd.xml">UHADD</a>: </left><right>Unsigned Halving Add.</right></line>
  <line><left><a href="uhsub_advsimd.xml">UHSUB</a>: </left><right>Unsigned Halving Subtract.</right></line>
  <line><left><a href="cmhi_advsimd.xml">CMHI (register)</a>: Compare </left><right>unsigned Higher (vector).</right></line>
  <line><left><a href="cmhs_advsimd.xml">CMHS (register)</a>: Compare </left><right>unsigned Higher or Same (vector).</right></line>
  <line><left><a href="ucvtf_float_int.xml">UCVTF (scalar, integer)</a>: </left><right>Unsigned integer Convert to Floating-point (scalar).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: </left><right>Unsigned integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="fcvtau_float.xml">FCVTAU (scalar)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding to nearest with ties to Away (scalar).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtnu_float.xml">FCVTNU (scalar)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding to nearest with ties to even (scalar).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtmu_float.xml">FCVTMU (scalar)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Minus infinity (scalar).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_float.xml">FCVTPU (scalar)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Plus infinity (scalar).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to </left><right>Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="umax_advsimd.xml">UMAX</a>: </left><right>Unsigned Maximum (vector).</right></line>
  <line><left><a href="umaxv_advsimd.xml">UMAXV</a>: </left><right>Unsigned Maximum across Vector.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic </left><right>unsigned maximum on byte in memory, without return.</right></line>
  <line><left><a href="ldumaxb.xml">LDUMAXB, LDUMAXAB, LDUMAXALB, LDUMAXLB</a>: Atomic </left><right>unsigned maximum on byte in memory.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic </left><right>unsigned maximum on halfword in memory, without return.</right></line>
  <line><left><a href="ldumaxh.xml">LDUMAXH, LDUMAXAH, LDUMAXALH, LDUMAXLH</a>: Atomic </left><right>unsigned maximum on halfword in memory.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic </left><right>unsigned maximum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic </left><right>unsigned maximum on word or doubleword in memory.</right></line>
  <line><left><a href="umaxp_advsimd.xml">UMAXP</a>: </left><right>Unsigned Maximum Pairwise.</right></line>
  <line><left><a href="umin_advsimd.xml">UMIN</a>: </left><right>Unsigned Minimum (vector).</right></line>
  <line><left><a href="uminv_advsimd.xml">UMINV</a>: </left><right>Unsigned Minimum across Vector.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic </left><right>unsigned minimum on byte in memory, without return.</right></line>
  <line><left><a href="lduminb.xml">LDUMINB, LDUMINAB, LDUMINALB, LDUMINLB</a>: Atomic </left><right>unsigned minimum on byte in memory.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic </left><right>unsigned minimum on halfword in memory, without return.</right></line>
  <line><left><a href="lduminh.xml">LDUMINH, LDUMINAH, LDUMINALH, LDUMINLH</a>: Atomic </left><right>unsigned minimum on halfword in memory.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic </left><right>unsigned minimum on word or doubleword in memory, without return.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic </left><right>unsigned minimum on word or doubleword in memory.</right></line>
  <line><left><a href="uminp_advsimd.xml">UMINP</a>: </left><right>Unsigned Minimum Pairwise.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: </left><right>Unsigned Move vector element to general-purpose register.</right></line>
  <line><left><a href="umulh.xml">UMULH</a>: </left><right>Unsigned Multiply High.</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (vector)</a>: </left><right>Unsigned Multiply long (vector).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: </left><right>Unsigned Multiply Long (vector, by element).</right></line>
  <line><left><a href="umull_umaddl.xml">UMULL</a>: </left><right>Unsigned Multiply Long: an alias of UMADDL.</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: </left><right>Unsigned Multiply-Add Long (vector).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: </left><right>Unsigned Multiply-Add Long (vector, by element).</right></line>
  <line><left><a href="umaddl.xml">UMADDL</a>: </left><right>Unsigned Multiply-Add Long.</right></line>
  <line><left><a href="umnegl_umsubl.xml">UMNEGL</a>: </left><right>Unsigned Multiply-Negate Long: an alias of UMSUBL.</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: </left><right>Unsigned Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: </left><right>Unsigned Multiply-Subtract Long (vector, by element).</right></line>
  <line><left><a href="umsubl.xml">UMSUBL</a>: </left><right>Unsigned Multiply-Subtract Long.</right></line>
  <line><left><a href="sqrshrun_advsimd.xml">SQRSHRUN, SQRSHRUN2</a>: Signed saturating Rounded Shift Right </left><right>Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqshrun_advsimd.xml">SQSHRUN, SQSHRUN2</a>: Signed saturating Shift Right </left><right>Unsigned Narrow (immediate).</right></line>
  <line><left><a href="sqxtun_advsimd.xml">SQXTUN, SQXTUN2</a>: Signed saturating extract </left><right>Unsigned Narrow.</right></line>
  <line><left><a href="urecpe_advsimd.xml">URECPE</a>: </left><right>Unsigned Reciprocal Estimate.</right></line>
  <line><left><a href="ursqrte_advsimd.xml">URSQRTE</a>: </left><right>Unsigned Reciprocal Square Root Estimate.</right></line>
  <line><left><a href="urhadd_advsimd.xml">URHADD</a>: </left><right>Unsigned Rounding Halving Add.</right></line>
  <line><left><a href="urshl_advsimd.xml">URSHL</a>: </left><right>Unsigned Rounding Shift Left (register).</right></line>
  <line><left><a href="urshr_advsimd.xml">URSHR</a>: </left><right>Unsigned Rounding Shift Right (immediate).</right></line>
  <line><left><a href="ursra_advsimd.xml">URSRA</a>: </left><right>Unsigned Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="usqadd_advsimd.xml">USQADD</a>: </left><right>Unsigned saturating Accumulate of Signed value.</right></line>
  <line><left><a href="uqadd_advsimd.xml">UQADD</a>: </left><right>Unsigned saturating Add.</right></line>
  <line><left><a href="uqxtn_advsimd.xml">UQXTN, UQXTN2</a>: </left><right>Unsigned saturating extract Narrow.</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: </left><right>Unsigned saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshl_advsimd.xml">UQRSHL</a>: </left><right>Unsigned saturating Rounding Shift Left (register).</right></line>
  <line><left><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: </left><right>Unsigned saturating Shift Left (immediate).</right></line>
  <line><left><a href="uqshl_advsimd_reg.xml">UQSHL (register)</a>: </left><right>Unsigned saturating Shift Left (register).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: </left><right>Unsigned saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqsub_advsimd.xml">UQSUB</a>: </left><right>Unsigned saturating Subtract.</right></line>
  <line><left><a href="ushl_advsimd.xml">USHL</a>: </left><right>Unsigned Shift Left (register).</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: </left><right>Unsigned Shift Left Long (immediate).</right></line>
  <line><left><a href="ushr_advsimd.xml">USHR</a>: </left><right>Unsigned Shift Right (immediate).</right></line>
  <line><left><a href="usra_advsimd.xml">USRA</a>: </left><right>Unsigned Shift Right and Accumulate (immediate).</right></line>
  <line><left><a href="usubl_advsimd.xml">USUBL, USUBL2</a>: </left><right>Unsigned Subtract Long.</right></line>
  <line><left><a href="usubw_advsimd.xml">USUBW, USUBW2</a>: </left><right>Unsigned Subtract Wide.</right></line>
  <line><left><a href="uaddlv_advsimd.xml">UADDLV</a>: </left><right>Unsigned sum Long across Vector.</right></line>
  <line><left><a href="suqadd_advsimd.xml">SUQADD</a>: Signed saturating Accumulate of </left><right>Unsigned value.</right></line>
  <line><left><a href="uzp1_advsimd.xml">UZP1</a>: </left><right>Unzip vectors (primary).</right></line>
  <line><left><a href="uzp2_advsimd.xml">UZP2</a>: </left><right>Unzip vectors (secondary).</right></line>
  <line><left><a href="sha1c_advsimd.xml">SHA1C</a>: SHA1 hash </left><right>update (choose).</right></line>
  <line><left><a href="sha1m_advsimd.xml">SHA1M</a>: SHA1 hash </left><right>update (majority).</right></line>
  <line><left><a href="sha1p_advsimd.xml">SHA1P</a>: SHA1 hash </left><right>update (parity).</right></line>
  <line><left><a href="sha256h_advsimd.xml">SHA256H</a>: SHA256 hash </left><right>update (part 1).</right></line>
  <line><left><a href="sha256h2_advsimd.xml">SHA256H2</a>: SHA256 hash </left><right>update (part 2).</right></line>
  <line><left><a href="sha1su0_advsimd.xml">SHA1SU0</a>: SHA1 schedule </left><right>update 0.</right></line>
  <line><left><a href="sha256su0_advsimd.xml">SHA256SU0</a>: SHA256 schedule </left><right>update 0.</right></line>
  <line><left><a href="sha1su1_advsimd.xml">SHA1SU1</a>: SHA1 schedule </left><right>update 1.</right></line>
  <line><left><a href="sha256su1_advsimd.xml">SHA256SU1</a>: SHA256 schedule </left><right>update 1.</right></line>
  <line><left></left><right><a href="uqadd_advsimd.xml">UQADD</a>: Unsigned saturating Add.</right></line>
  <line><left></left><right><a href="uqrshl_advsimd.xml">UQRSHL</a>: Unsigned saturating Rounding Shift Left (register).</right></line>
  <line><left></left><right><a href="uqrshrn_advsimd.xml">UQRSHRN, UQRSHRN2</a>: Unsigned saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqrshrn_advsimd.xml">UQRSHRN, </a></left><right><a href="uqrshrn_advsimd.xml">UQRSHRN2</a>: Unsigned saturating Rounded Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="uqshl_advsimd_imm.xml">UQSHL (immediate)</a>: Unsigned saturating Shift Left (immediate).</right></line>
  <line><left></left><right><a href="uqshl_advsimd_reg.xml">UQSHL (register)</a>: Unsigned saturating Shift Left (register).</right></line>
  <line><left></left><right><a href="uqshrn_advsimd.xml">UQSHRN, UQSHRN2</a>: Unsigned saturating Shift Right Narrow (immediate).</right></line>
  <line><left><a href="uqshrn_advsimd.xml">UQSHRN, </a></left><right><a href="uqshrn_advsimd.xml">UQSHRN2</a>: Unsigned saturating Shift Right Narrow (immediate).</right></line>
  <line><left></left><right><a href="uqsub_advsimd.xml">UQSUB</a>: Unsigned saturating Subtract.</right></line>
  <line><left></left><right><a href="uqxtn_advsimd.xml">UQXTN, UQXTN2</a>: Unsigned saturating extract Narrow.</right></line>
  <line><left><a href="uqxtn_advsimd.xml">UQXTN, </a></left><right><a href="uqxtn_advsimd.xml">UQXTN2</a>: Unsigned saturating extract Narrow.</right></line>
  <line><left></left><right><a href="urecpe_advsimd.xml">URECPE</a>: Unsigned Reciprocal Estimate.</right></line>
  <line><left></left><right><a href="urhadd_advsimd.xml">URHADD</a>: Unsigned Rounding Halving Add.</right></line>
  <line><left></left><right><a href="urshl_advsimd.xml">URSHL</a>: Unsigned Rounding Shift Left (register).</right></line>
  <line><left></left><right><a href="urshr_advsimd.xml">URSHR</a>: Unsigned Rounding Shift Right (immediate).</right></line>
  <line><left></left><right><a href="ursqrte_advsimd.xml">URSQRTE</a>: Unsigned Reciprocal Square Root Estimate.</right></line>
  <line><left></left><right><a href="ursra_advsimd.xml">URSRA</a>: Unsigned Rounding Shift Right and Accumulate (immediate).</right></line>
  <line><left></left><right><a href="ushl_advsimd.xml">USHL</a>: Unsigned Shift Left (register).</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend Long: an alias of </left><right>USHLL, USHLL2.</right></line>
  <line><left></left><right><a href="ushll_advsimd.xml">USHLL, USHLL2</a>: Unsigned Shift Left Long (immediate).</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend Long: an alias of USHLL, </left><right>USHLL2.</right></line>
  <line><left><a href="ushll_advsimd.xml">USHLL, </a></left><right><a href="ushll_advsimd.xml">USHLL2</a>: Unsigned Shift Left Long (immediate).</right></line>
  <line><left></left><right><a href="ushr_advsimd.xml">USHR</a>: Unsigned Shift Right (immediate).</right></line>
  <line><left><a href="frinti_float.xml">FRINTI (scalar)</a>: Floating-point Round to Integral, </left><right>using current rounding mode (scalar).</right></line>
  <line><left><a href="frintx_float.xml">FRINTX (scalar)</a>: Floating-point Round to Integral exact, </left><right>using current rounding mode (scalar).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, </left><right>using current rounding mode (vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, </left><right>using current rounding mode (vector).</right></line>
  <line><left></left><right><a href="usqadd_advsimd.xml">USQADD</a>: Unsigned saturating Accumulate of Signed value.</right></line>
  <line><left></left><right><a href="usra_advsimd.xml">USRA</a>: Unsigned Shift Right and Accumulate (immediate).</right></line>
  <line><left></left><right><a href="usubl_advsimd.xml">USUBL, USUBL2</a>: Unsigned Subtract Long.</right></line>
  <line><left><a href="usubl_advsimd.xml">USUBL, </a></left><right><a href="usubl_advsimd.xml">USUBL2</a>: Unsigned Subtract Long.</right></line>
  <line><left></left><right><a href="usubw_advsimd.xml">USUBW, USUBW2</a>: Unsigned Subtract Wide.</right></line>
  <line><left><a href="usubw_advsimd.xml">USUBW, </a></left><right><a href="usubw_advsimd.xml">USUBW2</a>: Unsigned Subtract Wide.</right></line>
  <line><left></left><right><a href="uxtb_ubfm.xml">UXTB</a>: Unsigned Extend Byte: an alias of UBFM.</right></line>
  <line><left></left><right><a href="uxth_ubfm.xml">UXTH</a>: Unsigned Extend Halfword: an alias of UBFM.</right></line>
  <line><left></left><right><a href="uxtl_ushll_advsimd.xml">UXTL, UXTL2</a>: Unsigned extend Long: an alias of USHLL, USHLL2.</right></line>
  <line><left><a href="uxtl_ushll_advsimd.xml">UXTL, </a></left><right><a href="uxtl_ushll_advsimd.xml">UXTL2</a>: Unsigned extend Long: an alias of USHLL, USHLL2.</right></line>
  <line><left></left><right><a href="uzp1_advsimd.xml">UZP1</a>: Unzip vectors (primary).</right></line>
  <line><left></left><right><a href="uzp2_advsimd.xml">UZP2</a>: Unzip vectors (secondary).</right></line>
  <line initialtag="V"><left><a href="asrv.xml">ASRV</a>: Arithmetic Shift Right </left><right>Variable.</right></line>
  <line><left><a href="lslv.xml">LSLV</a>: Logical Shift Left </left><right>Variable.</right></line>
  <line><left><a href="lsrv.xml">LSRV</a>: Logical Shift Right </left><right>Variable.</right></line>
  <line><left><a href="rorv.xml">RORV</a>: Rotate Right </left><right>Variable.</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert </left><right>vector element from another vector element.</right></line>
  <line><left><a href="ins_advsimd_gen.xml">INS (general)</a>: Insert </left><right>vector element from general-purpose register.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move </left><right>vector element to another vector element: an alias of INS (element).</right></line>
  <line><left><a href="smov_advsimd.xml">SMOV</a>: Signed Move </left><right>vector element to general-purpose register.</right></line>
  <line><left><a href="umov_advsimd.xml">UMOV</a>: Unsigned Move </left><right>vector element to general-purpose register.</right></line>
  <line><left><a href="mov_umov_advsimd.xml">MOV (to general)</a>: Move </left><right>vector element to general-purpose register: an alias of UMOV.</right></line>
  <line><left><a href="mov_dup_advsimd_elt.xml">MOV (scalar)</a>: Move </left><right>vector element to scalar: an alias of DUP (element).</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (element)</a>: Duplicate </left><right>vector element to vector or scalar.</right></line>
  <line><left><a href="ins_advsimd_elt.xml">INS (element)</a>: Insert vector element from another </left><right>vector element.</right></line>
  <line><left><a href="mov_ins_advsimd_elt.xml">MOV (element)</a>: Move vector element to another </left><right>vector element: an alias of INS (element).</right></line>
  <line><left><a href="mov_ins_advsimd_gen.xml">MOV (from general)</a>: Move general-purpose register to a </left><right>vector element: an alias of INS (general).</right></line>
  <line><left><a href="ext_advsimd.xml">EXT</a>: Extract </left><right>vector from pair of vectors.</right></line>
  <line><left><a href="tbx_advsimd.xml">TBX</a>: Table </left><right>vector lookup extension.</right></line>
  <line><left><a href="tbl_advsimd.xml">TBL</a>: Table </left><right>vector Lookup.</right></line>
  <line><left><a href="dup_advsimd_elt.xml">DUP (element)</a>: Duplicate vector element to </left><right>vector or scalar.</right></line>
  <line><left><a href="abs_advsimd.xml">ABS</a>: Absolute value (</left><right>vector).</right></line>
  <line><left><a href="add_advsimd.xml">ADD (vector)</a>: Add (</left><right>vector).</right></line>
  <line><left><a href="addp_advsimd_vec.xml">ADDP (vector)</a>: Add Pairwise (</left><right>vector).</right></line>
  <line><left><a href="and_advsimd.xml">AND (vector)</a>: Bitwise AND (</left><right>vector).</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (vector)</a>: Count Leading Sign bits (</left><right>vector).</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (vector)</a>: Count Leading Zero bits (</left><right>vector).</right></line>
  <line><left><a href="cmeq_advsimd_reg.xml">CMEQ (register)</a>: Compare bitwise Equal (</left><right>vector).</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: Compare bitwise Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="cmge_advsimd_reg.xml">CMGE (register)</a>: Compare signed Greater than or Equal (</left><right>vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare signed Greater than or Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="cmgt_advsimd_reg.xml">CMGT (register)</a>: Compare signed Greater than (</left><right>vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: Compare signed Greater than zero (</left><right>vector).</right></line>
  <line><left><a href="cmhi_advsimd.xml">CMHI (register)</a>: Compare unsigned Higher (</left><right>vector).</right></line>
  <line><left><a href="cmhs_advsimd.xml">CMHS (register)</a>: Compare unsigned Higher or Same (</left><right>vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare signed Less than or Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (zero)</a>: Compare signed Less than zero (</left><right>vector).</right></line>
  <line><left><a href="cmtst_advsimd.xml">CMTST</a>: Compare bitwise Test bits nonzero (</left><right>vector).</right></line>
  <line><left><a href="eor_advsimd.xml">EOR (vector)</a>: Bitwise Exclusive OR (</left><right>vector).</right></line>
  <line><left><a href="fabd_advsimd.xml">FABD</a>: Floating-point Absolute Difference (</left><right>vector).</right></line>
  <line><left><a href="fabs_advsimd.xml">FABS (vector)</a>: Floating-point Absolute value (</left><right>vector).</right></line>
  <line><left><a href="facge_advsimd.xml">FACGE</a>: Floating-point Absolute Compare Greater than or Equal (</left><right>vector).</right></line>
  <line><left><a href="facgt_advsimd.xml">FACGT</a>: Floating-point Absolute Compare Greater than (</left><right>vector).</right></line>
  <line><left><a href="fadd_advsimd.xml">FADD (vector)</a>: Floating-point Add (</left><right>vector).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (vector)</a>: Floating-point Add Pairwise (</left><right>vector).</right></line>
  <line><left><a href="fcmeq_advsimd_reg.xml">FCMEQ (register)</a>: Floating-point Compare Equal (</left><right>vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-point Compare Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="fcmge_advsimd_reg.xml">FCMGE (register)</a>: Floating-point Compare Greater than or Equal (</left><right>vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point Compare Greater than or Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="fcmgt_advsimd_reg.xml">FCMGT (register)</a>: Floating-point Compare Greater than (</left><right>vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-point Compare Greater than zero (</left><right>vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point Compare Less than or Equal to zero (</left><right>vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-point Compare Less than zero (</left><right>vector).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (</left><right>vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (</left><right>vector).</right></line>
  <line><left><a href="fcvtl_advsimd.xml">FCVTL, FCVTL2</a>: Floating-point Convert to higher precision Long (</left><right>vector).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (</left><right>vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (</left><right>vector).</right></line>
  <line><left><a href="fcvtn_advsimd.xml">FCVTN, FCVTN2</a>: Floating-point Convert to lower precision Narrow (</left><right>vector).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (</left><right>vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (</left><right>vector).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (vector)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (</left><right>vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (</left><right>vector).</right></line>
  <line><left><a href="fcvtxn_advsimd.xml">FCVTXN, FCVTXN2</a>: Floating-point Convert to lower precision Narrow, rounding to odd (</left><right>vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (</left><right>vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (</left><right>vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (</left><right>vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (</left><right>vector).</right></line>
  <line><left><a href="fdiv_advsimd.xml">FDIV (vector)</a>: Floating-point Divide (</left><right>vector).</right></line>
  <line><left><a href="fmax_advsimd.xml">FMAX (vector)</a>: Floating-point Maximum (</left><right>vector).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (vector)</a>: Floating-point Maximum Number (</left><right>vector).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (vector)</a>: Floating-point Maximum Number Pairwise (</left><right>vector).</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (vector)</a>: Floating-point Maximum Pairwise (</left><right>vector).</right></line>
  <line><left><a href="fmin_advsimd.xml">FMIN (vector)</a>: Floating-point minimum (</left><right>vector).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (vector)</a>: Floating-point Minimum Number (</left><right>vector).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (vector)</a>: Floating-point Minimum Number Pairwise (</left><right>vector).</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (vector)</a>: Floating-point Minimum Pairwise (</left><right>vector).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (vector)</a>: Floating-point fused Multiply-Add to accumulator (</left><right>vector).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (vector)</a>: Floating-point fused Multiply-Subtract from accumulator (</left><right>vector).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (vector, immediate)</a>: Floating-point move immediate (</left><right>vector).</right></line>
  <line><left><a href="fmul_advsimd_vec.xml">FMUL (vector)</a>: Floating-point Multiply (</left><right>vector).</right></line>
  <line><left><a href="fneg_advsimd.xml">FNEG (vector)</a>: Floating-point Negate (</left><right>vector).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (vector)</a>: Floating-point Round to Integral, to nearest with ties to Away (</left><right>vector).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (vector)</a>: Floating-point Round to Integral, using current rounding mode (</left><right>vector).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (vector)</a>: Floating-point Round to Integral, toward Minus infinity (</left><right>vector).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (vector)</a>: Floating-point Round to Integral, to nearest with ties to even (</left><right>vector).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (vector)</a>: Floating-point Round to Integral, toward Plus infinity (</left><right>vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (vector)</a>: Floating-point Round to Integral exact, using current rounding mode (</left><right>vector).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point Round to Integral, toward Zero (</left><right>vector).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (vector)</a>: Floating-point Square Root (</left><right>vector).</right></line>
  <line><left><a href="fsub_advsimd.xml">FSUB (vector)</a>: Floating-point Subtract (</left><right>vector).</right></line>
  <line><left><a href="mla_advsimd_vec.xml">MLA (vector)</a>: Multiply-Add to accumulator (</left><right>vector).</right></line>
  <line><left><a href="mls_advsimd_vec.xml">MLS (vector)</a>: Multiply-Subtract from accumulator (</left><right>vector).</right></line>
  <line><left><a href="movi_advsimd.xml">MOVI</a>: Move Immediate (</left><right>vector).</right></line>
  <line><left><a href="mul_advsimd_vec.xml">MUL (vector)</a>: Multiply (</left><right>vector).</right></line>
  <line><left><a href="mvni_advsimd.xml">MVNI</a>: Move inverted Immediate (</left><right>vector).</right></line>
  <line><left><a href="neg_advsimd.xml">NEG (vector)</a>: Negate (</left><right>vector).</right></line>
  <line><left><a href="not_advsimd.xml">NOT</a>: Bitwise NOT (</left><right>vector).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (vector)</a>: Bitwise inclusive OR NOT (</left><right>vector).</right></line>
  <line><left><a href="rbit_advsimd.xml">RBIT (vector)</a>: Reverse Bit order (</left><right>vector).</right></line>
  <line><left><a href="rev16_advsimd.xml">REV16 (vector)</a>: Reverse elements in 16-bit halfwords (</left><right>vector).</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (vector)</a>: Reverse elements in 32-bit words (</left><right>vector).</right></line>
  <line><left><a href="rev64_advsimd.xml">REV64</a>: Reverse elements in 64-bit doublewords (</left><right>vector).</right></line>
  <line><left><a href="saddl_advsimd.xml">SADDL, SADDL2</a>: Signed Add Long (</left><right>vector).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (vector, fixed-point)</a>: Signed fixed-point Convert to Floating-point (</left><right>vector).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (vector, integer)</a>: Signed integer Convert to Floating-point (</left><right>vector).</right></line>
  <line><left><a href="smax_advsimd.xml">SMAX</a>: Signed Maximum (</left><right>vector).</right></line>
  <line><left><a href="smin_advsimd.xml">SMIN</a>: Signed Minimum (</left><right>vector).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (vector)</a>: Signed Multiply-Add Long (</left><right>vector).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (vector)</a>: Signed Multiply-Subtract Long (</left><right>vector).</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (vector)</a>: Signed Multiply Long (</left><right>vector).</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (</left><right>vector).</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (</left><right>vector).</right></line>
  <line><left><a href="sub_advsimd.xml">SUB (vector)</a>: Subtract (</left><right>vector).</right></line>
  <line><left><a href="uabd_advsimd.xml">UABD</a>: Unsigned Absolute Difference (</left><right>vector).</right></line>
  <line><left><a href="uaddl_advsimd.xml">UADDL, UADDL2</a>: Unsigned Add Long (</left><right>vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (vector, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (</left><right>vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (vector, integer)</a>: Unsigned integer Convert to Floating-point (</left><right>vector).</right></line>
  <line><left><a href="umax_advsimd.xml">UMAX</a>: Unsigned Maximum (</left><right>vector).</right></line>
  <line><left><a href="umin_advsimd.xml">UMIN</a>: Unsigned Minimum (</left><right>vector).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (vector)</a>: Unsigned Multiply-Add Long (</left><right>vector).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (vector)</a>: Unsigned Multiply-Subtract Long (</left><right>vector).</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (vector)</a>: Unsigned Multiply long (</left><right>vector).</right></line>
  <line><left><a href="add_advsimd.xml">ADD (</a></left><right><a href="add_advsimd.xml">vector)</a>: Add (vector).</right></line>
  <line><left><a href="addp_advsimd_vec.xml">ADDP (</a></left><right><a href="addp_advsimd_vec.xml">vector)</a>: Add Pairwise (vector).</right></line>
  <line><left><a href="mvn_not_advsimd.xml">MVN</a>: Bitwise NOT (</left><right>vector): an alias of NOT.</right></line>
  <line><left><a href="and_advsimd.xml">AND (</a></left><right><a href="and_advsimd.xml">vector)</a>: Bitwise AND (vector).</right></line>
  <line><left><a href="eor_advsimd.xml">EOR (</a></left><right><a href="eor_advsimd.xml">vector)</a>: Bitwise Exclusive OR (vector).</right></line>
  <line><left><a href="orn_advsimd.xml">ORN (</a></left><right><a href="orn_advsimd.xml">vector)</a>: Bitwise inclusive OR NOT (vector).</right></line>
  <line><left><a href="cls_advsimd.xml">CLS (</a></left><right><a href="cls_advsimd.xml">vector)</a>: Count Leading Sign bits (vector).</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (</a></left><right><a href="clz_advsimd.xml">vector)</a>: Count Leading Zero bits (vector).</right></line>
  <line><left><a href="fabs_advsimd.xml">FABS (</a></left><right><a href="fabs_advsimd.xml">vector)</a>: Floating-point Absolute value (vector).</right></line>
  <line><left><a href="fadd_advsimd.xml">FADD (</a></left><right><a href="fadd_advsimd.xml">vector)</a>: Floating-point Add (vector).</right></line>
  <line><left><a href="faddp_advsimd_vec.xml">FADDP (</a></left><right><a href="faddp_advsimd_vec.xml">vector)</a>: Floating-point Add Pairwise (vector).</right></line>
  <line><left><a href="fcvtas_advsimd.xml">FCVTAS (</a></left><right><a href="fcvtas_advsimd.xml">vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtns_advsimd.xml">FCVTNS (</a></left><right><a href="fcvtns_advsimd.xml">vector)</a>: Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtms_advsimd.xml">FCVTMS (</a></left><right><a href="fcvtms_advsimd.xml">vector)</a>: Floating-point Convert to Signed integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtps_advsimd.xml">FCVTPS (</a></left><right><a href="fcvtps_advsimd.xml">vector)</a>: Floating-point Convert to Signed integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fcvtau_advsimd.xml">FCVTAU (</a></left><right><a href="fcvtau_advsimd.xml">vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector).</right></line>
  <line><left><a href="fcvtnu_advsimd.xml">FCVTNU (</a></left><right><a href="fcvtnu_advsimd.xml">vector)</a>: Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector).</right></line>
  <line><left><a href="fcvtmu_advsimd.xml">FCVTMU (</a></left><right><a href="fcvtmu_advsimd.xml">vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector).</right></line>
  <line><left><a href="fcvtpu_advsimd.xml">FCVTPU (</a></left><right><a href="fcvtpu_advsimd.xml">vector)</a>: Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector).</right></line>
  <line><left><a href="fdiv_advsimd.xml">FDIV (</a></left><right><a href="fdiv_advsimd.xml">vector)</a>: Floating-point Divide (vector).</right></line>
  <line><left><a href="fmla_advsimd_vec.xml">FMLA (</a></left><right><a href="fmla_advsimd_vec.xml">vector)</a>: Floating-point fused Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="fmls_advsimd_vec.xml">FMLS (</a></left><right><a href="fmls_advsimd_vec.xml">vector)</a>: Floating-point fused Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="fmax_advsimd.xml">FMAX (</a></left><right><a href="fmax_advsimd.xml">vector)</a>: Floating-point Maximum (vector).</right></line>
  <line><left><a href="fmaxnm_advsimd.xml">FMAXNM (</a></left><right><a href="fmaxnm_advsimd.xml">vector)</a>: Floating-point Maximum Number (vector).</right></line>
  <line><left><a href="fmaxnmp_advsimd_vec.xml">FMAXNMP (</a></left><right><a href="fmaxnmp_advsimd_vec.xml">vector)</a>: Floating-point Maximum Number Pairwise (vector).</right></line>
  <line><left><a href="fmaxp_advsimd_vec.xml">FMAXP (</a></left><right><a href="fmaxp_advsimd_vec.xml">vector)</a>: Floating-point Maximum Pairwise (vector).</right></line>
  <line><left><a href="fmin_advsimd.xml">FMIN (</a></left><right><a href="fmin_advsimd.xml">vector)</a>: Floating-point minimum (vector).</right></line>
  <line><left><a href="fminnm_advsimd.xml">FMINNM (</a></left><right><a href="fminnm_advsimd.xml">vector)</a>: Floating-point Minimum Number (vector).</right></line>
  <line><left><a href="fminnmp_advsimd_vec.xml">FMINNMP (</a></left><right><a href="fminnmp_advsimd_vec.xml">vector)</a>: Floating-point Minimum Number Pairwise (vector).</right></line>
  <line><left><a href="fminp_advsimd_vec.xml">FMINP (</a></left><right><a href="fminp_advsimd_vec.xml">vector)</a>: Floating-point Minimum Pairwise (vector).</right></line>
  <line><left><a href="fmul_advsimd_vec.xml">FMUL (</a></left><right><a href="fmul_advsimd_vec.xml">vector)</a>: Floating-point Multiply (vector).</right></line>
  <line><left><a href="fneg_advsimd.xml">FNEG (</a></left><right><a href="fneg_advsimd.xml">vector)</a>: Floating-point Negate (vector).</right></line>
  <line><left><a href="frintx_advsimd.xml">FRINTX (</a></left><right><a href="frintx_advsimd.xml">vector)</a>: Floating-point Round to Integral exact, using current rounding mode (vector).</right></line>
  <line><left><a href="frinta_advsimd.xml">FRINTA (</a></left><right><a href="frinta_advsimd.xml">vector)</a>: Floating-point Round to Integral, to nearest with ties to Away (vector).</right></line>
  <line><left><a href="frintn_advsimd.xml">FRINTN (</a></left><right><a href="frintn_advsimd.xml">vector)</a>: Floating-point Round to Integral, to nearest with ties to even (vector).</right></line>
  <line><left><a href="frintm_advsimd.xml">FRINTM (</a></left><right><a href="frintm_advsimd.xml">vector)</a>: Floating-point Round to Integral, toward Minus infinity (vector).</right></line>
  <line><left><a href="frintp_advsimd.xml">FRINTP (</a></left><right><a href="frintp_advsimd.xml">vector)</a>: Floating-point Round to Integral, toward Plus infinity (vector).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (</a></left><right><a href="frintz_advsimd.xml">vector)</a>: Floating-point Round to Integral, toward Zero (vector).</right></line>
  <line><left><a href="frinti_advsimd.xml">FRINTI (</a></left><right><a href="frinti_advsimd.xml">vector)</a>: Floating-point Round to Integral, using current rounding mode (vector).</right></line>
  <line><left><a href="fsqrt_advsimd.xml">FSQRT (</a></left><right><a href="fsqrt_advsimd.xml">vector)</a>: Floating-point Square Root (vector).</right></line>
  <line><left><a href="fsub_advsimd.xml">FSUB (</a></left><right><a href="fsub_advsimd.xml">vector)</a>: Floating-point Subtract (vector).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (</a></left><right><a href="mov_orr_advsimd_reg.xml">vector)</a>: Move vector: an alias of ORR (vector, register).</right></line>
  <line><left><a href="mul_advsimd_vec.xml">MUL (</a></left><right><a href="mul_advsimd_vec.xml">vector)</a>: Multiply (vector).</right></line>
  <line><left><a href="mla_advsimd_vec.xml">MLA (</a></left><right><a href="mla_advsimd_vec.xml">vector)</a>: Multiply-Add to accumulator (vector).</right></line>
  <line><left><a href="mls_advsimd_vec.xml">MLS (</a></left><right><a href="mls_advsimd_vec.xml">vector)</a>: Multiply-Subtract from accumulator (vector).</right></line>
  <line><left><a href="neg_advsimd.xml">NEG (</a></left><right><a href="neg_advsimd.xml">vector)</a>: Negate (vector).</right></line>
  <line><left><a href="rbit_advsimd.xml">RBIT (</a></left><right><a href="rbit_advsimd.xml">vector)</a>: Reverse Bit order (vector).</right></line>
  <line><left><a href="rev16_advsimd.xml">REV16 (</a></left><right><a href="rev16_advsimd.xml">vector)</a>: Reverse elements in 16-bit halfwords (vector).</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (</a></left><right><a href="rev32_advsimd.xml">vector)</a>: Reverse elements in 32-bit words (vector).</right></line>
  <line><left><a href="smull_advsimd_vec.xml">SMULL, SMULL2 (</a></left><right><a href="smull_advsimd_vec.xml">vector)</a>: Signed Multiply Long (vector).</right></line>
  <line><left><a href="smlal_advsimd_vec.xml">SMLAL, SMLAL2 (</a></left><right><a href="smlal_advsimd_vec.xml">vector)</a>: Signed Multiply-Add Long (vector).</right></line>
  <line><left><a href="smlsl_advsimd_vec.xml">SMLSL, SMLSL2 (</a></left><right><a href="smlsl_advsimd_vec.xml">vector)</a>: Signed Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="sqdmull_advsimd_vec.xml">SQDMULL, SQDMULL2 (</a></left><right><a href="sqdmull_advsimd_vec.xml">vector)</a>: Signed saturating Doubling Multiply Long.</right></line>
  <line><left><a href="sqdmulh_advsimd_vec.xml">SQDMULH (</a></left><right><a href="sqdmulh_advsimd_vec.xml">vector)</a>: Signed saturating Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqdmlal_advsimd_vec.xml">SQDMLAL, SQDMLAL2 (</a></left><right><a href="sqdmlal_advsimd_vec.xml">vector)</a>: Signed saturating Doubling Multiply-Add Long.</right></line>
  <line><left><a href="sqdmlsl_advsimd_vec.xml">SQDMLSL, SQDMLSL2 (</a></left><right><a href="sqdmlsl_advsimd_vec.xml">vector)</a>: Signed saturating Doubling Multiply-Subtract Long.</right></line>
  <line><left><a href="sqrdmlah_advsimd_vec.xml">SQRDMLAH (</a></left><right><a href="sqrdmlah_advsimd_vec.xml">vector)</a>: Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector).</right></line>
  <line><left><a href="sqrdmulh_advsimd_vec.xml">SQRDMULH (</a></left><right><a href="sqrdmulh_advsimd_vec.xml">vector)</a>: Signed saturating Rounding Doubling Multiply returning High half.</right></line>
  <line><left><a href="sqrdmlsh_advsimd_vec.xml">SQRDMLSH (</a></left><right><a href="sqrdmlsh_advsimd_vec.xml">vector)</a>: Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector).</right></line>
  <line><left><a href="sub_advsimd.xml">SUB (</a></left><right><a href="sub_advsimd.xml">vector)</a>: Subtract (vector).</right></line>
  <line><left><a href="umull_advsimd_vec.xml">UMULL, UMULL2 (</a></left><right><a href="umull_advsimd_vec.xml">vector)</a>: Unsigned Multiply long (vector).</right></line>
  <line><left><a href="umlal_advsimd_vec.xml">UMLAL, UMLAL2 (</a></left><right><a href="umlal_advsimd_vec.xml">vector)</a>: Unsigned Multiply-Add Long (vector).</right></line>
  <line><left><a href="umlsl_advsimd_vec.xml">UMLSL, UMLSL2 (</a></left><right><a href="umlsl_advsimd_vec.xml">vector)</a>: Unsigned Multiply-Subtract Long (vector).</right></line>
  <line><left><a href="mla_advsimd_elt.xml">MLA (by element)</a>: Multiply-Add to accumulator (</left><right>vector, by element).</right></line>
  <line><left><a href="mls_advsimd_elt.xml">MLS (by element)</a>: Multiply-Subtract from accumulator (</left><right>vector, by element).</right></line>
  <line><left><a href="mul_advsimd_elt.xml">MUL (by element)</a>: Multiply (</left><right>vector, by element).</right></line>
  <line><left><a href="smlal_advsimd_elt.xml">SMLAL, SMLAL2 (by element)</a>: Signed Multiply-Add Long (</left><right>vector, by element).</right></line>
  <line><left><a href="smlsl_advsimd_elt.xml">SMLSL, SMLSL2 (by element)</a>: Signed Multiply-Subtract Long (</left><right>vector, by element).</right></line>
  <line><left><a href="smull_advsimd_elt.xml">SMULL, SMULL2 (by element)</a>: Signed Multiply Long (</left><right>vector, by element).</right></line>
  <line><left><a href="umlal_advsimd_elt.xml">UMLAL, UMLAL2 (by element)</a>: Unsigned Multiply-Add Long (</left><right>vector, by element).</right></line>
  <line><left><a href="umlsl_advsimd_elt.xml">UMLSL, UMLSL2 (by element)</a>: Unsigned Multiply-Subtract Long (</left><right>vector, by element).</right></line>
  <line><left><a href="umull_advsimd_elt.xml">UMULL, UMULL2 (by element)</a>: Unsigned Multiply Long (</left><right>vector, by element).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (</a></left><right><a href="fcvtzs_advsimd_fix.xml">vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (</a></left><right><a href="fcvtzu_advsimd_fix.xml">vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector).</right></line>
  <line><left><a href="scvtf_advsimd_fix.xml">SCVTF (</a></left><right><a href="scvtf_advsimd_fix.xml">vector, fixed-point)</a>: Signed fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_fix.xml">UCVTF (</a></left><right><a href="ucvtf_advsimd_fix.xml">vector, fixed-point)</a>: Unsigned fixed-point Convert to Floating-point (vector).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (vector, immediate)</a>: Bitwise bit Clear (</left><right>vector, immediate).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (vector, immediate)</a>: Bitwise inclusive OR (</left><right>vector, immediate).</right></line>
  <line><left><a href="bic_advsimd_imm.xml">BIC (</a></left><right><a href="bic_advsimd_imm.xml">vector, immediate)</a>: Bitwise bit Clear (vector, immediate).</right></line>
  <line><left><a href="orr_advsimd_imm.xml">ORR (</a></left><right><a href="orr_advsimd_imm.xml">vector, immediate)</a>: Bitwise inclusive OR (vector, immediate).</right></line>
  <line><left><a href="fmov_advsimd.xml">FMOV (</a></left><right><a href="fmov_advsimd.xml">vector, immediate)</a>: Floating-point move immediate (vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (</a></left><right><a href="fcvtzs_advsimd_int.xml">vector, integer)</a>: Floating-point Convert to Signed integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (</a></left><right><a href="fcvtzu_advsimd_int.xml">vector, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward Zero (vector).</right></line>
  <line><left><a href="scvtf_advsimd_int.xml">SCVTF (</a></left><right><a href="scvtf_advsimd_int.xml">vector, integer)</a>: Signed integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="ucvtf_advsimd_int.xml">UCVTF (</a></left><right><a href="ucvtf_advsimd_int.xml">vector, integer)</a>: Unsigned integer Convert to Floating-point (vector).</right></line>
  <line><left><a href="bic_advsimd_reg.xml">BIC (vector, register)</a>: Bitwise bit Clear (</left><right>vector, register).</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move vector: an alias of ORR (</left><right>vector, register).</right></line>
  <line><left><a href="orr_advsimd_reg.xml">ORR (vector, register)</a>: Bitwise inclusive OR (</left><right>vector, register).</right></line>
  <line><left><a href="bic_advsimd_reg.xml">BIC (</a></left><right><a href="bic_advsimd_reg.xml">vector, register)</a>: Bitwise bit Clear (vector, register).</right></line>
  <line><left><a href="orr_advsimd_reg.xml">ORR (</a></left><right><a href="orr_advsimd_reg.xml">vector, register)</a>: Bitwise inclusive OR (vector, register).</right></line>
  <line><left><a href="addv_advsimd.xml">ADDV</a>: Add across </left><right>Vector.</right></line>
  <line><left><a href="dup_advsimd_gen.xml">DUP (general)</a>: Duplicate general-purpose register to </left><right>vector.</right></line>
  <line><left><a href="fmaxnmv_advsimd.xml">FMAXNMV</a>: Floating-point Maximum Number across </left><right>Vector.</right></line>
  <line><left><a href="fmaxv_advsimd.xml">FMAXV</a>: Floating-point Maximum across </left><right>Vector.</right></line>
  <line><left><a href="fminnmv_advsimd.xml">FMINNMV</a>: Floating-point Minimum Number across </left><right>Vector.</right></line>
  <line><left><a href="fminv_advsimd.xml">FMINV</a>: Floating-point Minimum across </left><right>Vector.</right></line>
  <line><left><a href="saddlv_advsimd.xml">SADDLV</a>: Signed Add Long across </left><right>Vector.</right></line>
  <line><left><a href="smaxv_advsimd.xml">SMAXV</a>: Signed Maximum across </left><right>Vector.</right></line>
  <line><left><a href="sminv_advsimd.xml">SMINV</a>: Signed Minimum across </left><right>Vector.</right></line>
  <line><left><a href="uaddlv_advsimd.xml">UADDLV</a>: Unsigned sum Long across </left><right>Vector.</right></line>
  <line><left><a href="umaxv_advsimd.xml">UMAXV</a>: Unsigned Maximum across </left><right>Vector.</right></line>
  <line><left><a href="uminv_advsimd.xml">UMINV</a>: Unsigned Minimum across </left><right>Vector.</right></line>
  <line><left><a href="mov_orr_advsimd_reg.xml">MOV (vector)</a>: Move </left><right>vector: an alias of ORR (vector, register).</right></line>
  <line><left><a href="trn1_advsimd.xml">TRN1</a>: Transpose </left><right>vectors (primary).</right></line>
  <line><left><a href="uzp1_advsimd.xml">UZP1</a>: Unzip </left><right>vectors (primary).</right></line>
  <line><left><a href="zip1_advsimd.xml">ZIP1</a>: Zip </left><right>vectors (primary).</right></line>
  <line><left><a href="trn2_advsimd.xml">TRN2</a>: Transpose </left><right>vectors (secondary).</right></line>
  <line><left><a href="uzp2_advsimd.xml">UZP2</a>: Unzip </left><right>vectors (secondary).</right></line>
  <line><left><a href="zip2_advsimd.xml">ZIP2</a>: Zip </left><right>vectors (secondary).</right></line>
  <line><left><a href="ext_advsimd.xml">EXT</a>: Extract vector from pair of </left><right>vectors.</right></line>
  <line initialtag="W"><left><a href="wfe.xml">WFE</a>: </left><right>Wait For Event.</right></line>
  <line><left><a href="wfi.xml">WFI</a>: </left><right>Wait For Interrupt.</right></line>
  <line><left></left><right><a href="wfe.xml">WFE</a>: Wait For Event.</right></line>
  <line><left></left><right><a href="wfi.xml">WFI</a>: Wait For Interrupt.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted wide immediate)</a>: Move (inverted </left><right>wide immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (wide immediate)</a>: Move (</left><right>wide immediate): an alias of MOVZ.</right></line>
  <line><left><a href="mov_movn.xml">MOV (inverted </a></left><right><a href="mov_movn.xml">wide immediate)</a>: Move (inverted wide immediate): an alias of MOVN.</right></line>
  <line><left><a href="mov_movz.xml">MOV (</a></left><right><a href="mov_movz.xml">wide immediate)</a>: Move (wide immediate): an alias of MOVZ.</right></line>
  <line><left><a href="movk.xml">MOVK</a>: Move </left><right>wide with keep.</right></line>
  <line><left><a href="movn.xml">MOVN</a>: Move </left><right>wide with NOT.</right></line>
  <line><left><a href="movz.xml">MOVZ</a>: Move </left><right>wide with zero.</right></line>
  <line><left><a href="saddw_advsimd.xml">SADDW, SADDW2</a>: Signed Add </left><right>Wide.</right></line>
  <line><left><a href="ssubw_advsimd.xml">SSUBW, SSUBW2</a>: Signed Subtract </left><right>Wide.</right></line>
  <line><left><a href="uaddw_advsimd.xml">UADDW, UADDW2</a>: Unsigned Add </left><right>Wide.</right></line>
  <line><left><a href="usubw_advsimd.xml">USUBW, USUBW2</a>: Unsigned Subtract </left><right>Wide.</right></line>
  <line><left><a href="fmov_float_gen.xml">FMOV (general)</a>: Floating-point Move to or from general-purpose register </left><right>without conversion.</right></line>
  <line><left><a href="fmov_float.xml">FMOV (register)</a>: Floating-point Move register </left><right>without conversion.</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="staddb.xml">STADDB, STADDLB</a>: Atomic add on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="staddh.xml">STADDH, STADDLH</a>: Atomic add on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stclrb.xml">STCLRB, STCLRLB</a>: Atomic bit clear on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stclrh.xml">STCLRH, STCLRLH</a>: Atomic bit clear on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="steorb.xml">STEORB, STEORLB</a>: Atomic exclusive OR on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="steorh.xml">STEORH, STEORLH</a>: Atomic exclusive OR on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stsetb.xml">STSETB, STSETLB</a>: Atomic bit set on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stseth.xml">STSETH, STSETLH</a>: Atomic bit set on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stsmaxb.xml">STSMAXB, STSMAXLB</a>: Atomic signed maximum on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stsmaxh.xml">STSMAXH, STSMAXLH</a>: Atomic signed maximum on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stsminb.xml">STSMINB, STSMINLB</a>: Atomic signed minimum on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stsminh.xml">STSMINH, STSMINLH</a>: Atomic signed minimum on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stumaxb.xml">STUMAXB, STUMAXLB</a>: Atomic unsigned maximum on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stumaxh.xml">STUMAXH, STUMAXLH</a>: Atomic unsigned maximum on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on word or doubleword in memory, </left><right>without return.</right></line>
  <line><left><a href="stuminb.xml">STUMINB, STUMINLB</a>: Atomic unsigned minimum on byte in memory, </left><right>without return.</right></line>
  <line><left><a href="stuminh.xml">STUMINH, STUMINLH</a>: Atomic unsigned minimum on halfword in memory, </left><right>without return.</right></line>
  <line><left><a href="ldrsw_imm.xml">LDRSW (immediate)</a>: Load Register Signed </left><right>Word (immediate).</right></line>
  <line><left><a href="ldrsw_lit.xml">LDRSW (literal)</a>: Load Register Signed </left><right>Word (literal).</right></line>
  <line><left><a href="ldrsw_reg.xml">LDRSW (register)</a>: Load Register Signed </left><right>Word (register).</right></line>
  <line><left><a href="ldtrsw.xml">LDTRSW</a>: Load Register Signed </left><right>Word (unprivileged).</right></line>
  <line><left><a href="ldursw.xml">LDURSW</a>: Load Register Signed </left><right>Word (unscaled).</right></line>
  <line><left><a href="stadd.xml">STADD, STADDL</a>: Atomic add on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stclr.xml">STCLR, STCLRL</a>: Atomic bit clear on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="steor.xml">STEOR, STEORL</a>: Atomic exclusive OR on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stset.xml">STSET, STSETL</a>: Atomic bit set on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsmax.xml">STSMAX, STSMAXL</a>: Atomic signed maximum on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stsmin.xml">STSMIN, STSMINL</a>: Atomic signed minimum on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumax.xml">STUMAX, STUMAXL</a>: Atomic unsigned maximum on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="stumin.xml">STUMIN, STUMINL</a>: Atomic unsigned minimum on </left><right>word or doubleword in memory, without return.</right></line>
  <line><left><a href="cas.xml">CAS, CASA, CASAL, CASL</a>: Compare and Swap </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldadd.xml">LDADD, LDADDA, LDADDAL, LDADDL</a>: Atomic add on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldclr.xml">LDCLR, LDCLRA, LDCLRAL, LDCLRL</a>: Atomic bit clear on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldeor.xml">LDEOR, LDEORA, LDEORAL, LDEORL</a>: Atomic exclusive OR on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldset.xml">LDSET, LDSETA, LDSETAL, LDSETL</a>: Atomic bit set on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldsmax.xml">LDSMAX, LDSMAXA, LDSMAXAL, LDSMAXL</a>: Atomic signed maximum on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldsmin.xml">LDSMIN, LDSMINA, LDSMINAL, LDSMINL</a>: Atomic signed minimum on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldumax.xml">LDUMAX, LDUMAXA, LDUMAXAL, LDUMAXL</a>: Atomic unsigned maximum on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldumin.xml">LDUMIN, LDUMINA, LDUMINAL, LDUMINL</a>: Atomic unsigned minimum on </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="swp.xml">SWP, SWPA, SWPAL, SWPL</a>: Swap </left><right>word or doubleword in memory.</right></line>
  <line><left><a href="ldpsw.xml">LDPSW</a>: Load Pair of Registers Signed </left><right>Word.</right></line>
  <line><left><a href="sxtw_sbfm.xml">SXTW</a>: Sign Extend </left><right>Word: an alias of SBFM.</right></line>
  <line><left><a href="rev32_advsimd.xml">REV32 (vector)</a>: Reverse elements in 32-bit </left><right>words (vector).</right></line>
  <line><left><a href="casp.xml">CASP, CASPA, CASPAL, CASPL</a>: Compare and Swap Pair of </left><right>words or doublewords in memory.</right></line>
  <line><left><a href="rev32_int.xml">REV32</a>: Reverse bytes in 32-bit </left><right>words.</right></line>
  <line initialtag="X"><left></left><right><a href="xtn_advsimd.xml">XTN, XTN2</a>: Extract Narrow.</right></line>
  <line><left><a href="xtn_advsimd.xml">XTN, </a></left><right><a href="xtn_advsimd.xml">XTN2</a>: Extract Narrow.</right></line>
  <line initialtag="Y"><left><a href="yield.xml">YIELD</a>: </left><right>YIELD.</right></line>
  <line><left></left><right><a href="yield.xml">YIELD</a>: YIELD.</right></line>
  <line initialtag="Z"><left><a href="fcvtzs_float_fix.xml">FCVTZS (scalar, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward </left><right>Zero (scalar).</right></line>
  <line><left><a href="fcvtzs_float_int.xml">FCVTZS (scalar, integer)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_fix.xml">FCVTZU (scalar, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward </left><right>Zero (scalar).</right></line>
  <line><left><a href="fcvtzu_float_int.xml">FCVTZU (scalar, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Zero (scalar).</right></line>
  <line><left><a href="frintz_float.xml">FRINTZ (scalar)</a>: Floating-point Round to Integral, toward </left><right>Zero (scalar).</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (zero)</a>: Compare bitwise Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (zero)</a>: Compare signed Greater than or Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (zero)</a>: Compare signed Greater than </left><right>zero (vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (zero)</a>: Compare signed Less than or Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (zero)</a>: Compare signed Less than </left><right>zero (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (zero)</a>: Floating-point Compare Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (zero)</a>: Floating-point Compare Greater than or Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (zero)</a>: Floating-point Compare Greater than </left><right>zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (zero)</a>: Floating-point Compare Less than or Equal to </left><right>zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (zero)</a>: Floating-point Compare Less than </left><right>zero (vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_fix.xml">FCVTZS (vector, fixed-point)</a>: Floating-point Convert to Signed fixed-point, rounding toward </left><right>Zero (vector).</right></line>
  <line><left><a href="fcvtzs_advsimd_int.xml">FCVTZS (vector, integer)</a>: Floating-point Convert to Signed integer, rounding toward </left><right>Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_fix.xml">FCVTZU (vector, fixed-point)</a>: Floating-point Convert to Unsigned fixed-point, rounding toward </left><right>Zero (vector).</right></line>
  <line><left><a href="fcvtzu_advsimd_int.xml">FCVTZU (vector, integer)</a>: Floating-point Convert to Unsigned integer, rounding toward </left><right>Zero (vector).</right></line>
  <line><left><a href="frintz_advsimd.xml">FRINTZ (vector)</a>: Floating-point Round to Integral, toward </left><right>Zero (vector).</right></line>
  <line><left><a href="clz_advsimd.xml">CLZ (vector)</a>: Count Leading </left><right>Zero bits (vector).</right></line>
  <line><left><a href="clz_int.xml">CLZ</a>: Count leading </left><right>zero bits.</right></line>
  <line><left><a href="cmeq_advsimd_zero.xml">CMEQ (</a></left><right><a href="cmeq_advsimd_zero.xml">zero)</a>: Compare bitwise Equal to zero (vector).</right></line>
  <line><left><a href="cmge_advsimd_zero.xml">CMGE (</a></left><right><a href="cmge_advsimd_zero.xml">zero)</a>: Compare signed Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="cmgt_advsimd_zero.xml">CMGT (</a></left><right><a href="cmgt_advsimd_zero.xml">zero)</a>: Compare signed Greater than zero (vector).</right></line>
  <line><left><a href="cmle_advsimd.xml">CMLE (</a></left><right><a href="cmle_advsimd.xml">zero)</a>: Compare signed Less than or Equal to zero (vector).</right></line>
  <line><left><a href="cmlt_advsimd.xml">CMLT (</a></left><right><a href="cmlt_advsimd.xml">zero)</a>: Compare signed Less than zero (vector).</right></line>
  <line><left><a href="fcmeq_advsimd_zero.xml">FCMEQ (</a></left><right><a href="fcmeq_advsimd_zero.xml">zero)</a>: Floating-point Compare Equal to zero (vector).</right></line>
  <line><left><a href="fcmge_advsimd_zero.xml">FCMGE (</a></left><right><a href="fcmge_advsimd_zero.xml">zero)</a>: Floating-point Compare Greater than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmgt_advsimd_zero.xml">FCMGT (</a></left><right><a href="fcmgt_advsimd_zero.xml">zero)</a>: Floating-point Compare Greater than zero (vector).</right></line>
  <line><left><a href="fcmle_advsimd.xml">FCMLE (</a></left><right><a href="fcmle_advsimd.xml">zero)</a>: Floating-point Compare Less than or Equal to zero (vector).</right></line>
  <line><left><a href="fcmlt_advsimd.xml">FCMLT (</a></left><right><a href="fcmlt_advsimd.xml">zero)</a>: Floating-point Compare Less than zero (vector).</right></line>
  <line><left><a href="cbz.xml">CBZ</a>: Compare and Branch on </left><right>Zero.</right></line>
  <line><left><a href="movz.xml">MOVZ</a>: Move wide with </left><right>zero.</right></line>
  <line><left><a href="tbz.xml">TBZ</a>: Test bit and Branch if </left><right>Zero.</right></line>
  <line><left><a href="sbfiz_sbfm.xml">SBFIZ</a>: Signed Bitfield Insert in </left><right>Zero: an alias of SBFM.</right></line>
  <line><left><a href="ubfiz_ubfm.xml">UBFIZ</a>: Unsigned Bitfield Insert in </left><right>Zero: an alias of UBFM.</right></line>
  <line><left><a href="zip1_advsimd.xml">ZIP1</a>: </left><right>Zip vectors (primary).</right></line>
  <line><left><a href="zip2_advsimd.xml">ZIP2</a>: </left><right>Zip vectors (secondary).</right></line>
  <line><left></left><right><a href="zip1_advsimd.xml">ZIP1</a>: Zip vectors (primary).</right></line>
  <line><left></left><right><a href="zip2_advsimd.xml">ZIP2</a>: Zip vectors (secondary).</right></line>
</permindex>
rt in </left><right>Zero: an alias of UBFM.</right></line>
  <line><left><a href="zip1_advsimd.xml">ZIP1</a>: </left><right>Zip vectors (primary).</right></line>
  <line><left><a href="zip2_advsimd.xml">ZIP2</a>: </left><right>Zip vectors (secondary).</right></line>
  <line><left></left><right><a href="zip1_advsimd.xml">ZIP1</a>: Zip vectors (primary).</right></line>
  <line><left></left><right><a href="zip2_advsimd.xml">ZIP2</a>: Zip vectors (secondary).</right></line>
</permindex>
