<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2017 ARM Limited or its affiliates. All rights reserved. -->
<!-- This document is Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by ARM and the party that ARM delivered this document to. -->

<instructionsection id="RET" title="RET -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="RET" />
  </docvars>
  <heading>RET</heading>
  <desc>
    <brief>
      <para>Return from subroutine</para>
    </brief>
    <authored>
      <para>Return from subroutine branches unconditionally to an address in a register, with a hint that this is a subroutine return.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Integer" oneof="1" id="RET_64R_branch_reg" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="RET" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/branch/unconditional/register" tworows="1">
        <box hibit="31" width="7" settings="7">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="24" width="2" name="opc[3:2]" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="22" width="2" name="op" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="op2" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="6" name="op3" settings="6">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="op4" settings="5">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="RET_64R_branch_reg" oneofinclass="1" oneof="1" label="Integer">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="RET" />
        </docvars>
        <asmtemplate><text>RET  </text><text>{</text><a link="xn" hover="64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)">&lt;Xn&gt;</a><text>}</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/branch/unconditional/register" mylink="aarch64.instrs.branch.unconditional.register" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
<a link="BranchType" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType</a> branch_type;

case op of
    when '00' branch_type = <a link="BranchType_JMP" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_JMP</a>;
    when '01' branch_type = <a link="BranchType_CALL" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_CALL</a>;
    when '10' branch_type = <a link="BranchType_RET" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_RET</a>;
    otherwise <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="RET_64R_branch_reg" symboldefcount="1">
      <symbol link="xn">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose register holding the address to be branched to, encoded in the "Rn" field. Defaults to X30 if absent.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/branch/unconditional/register" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) target = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

if branch_type == <a link="BranchType_CALL" file="shared_pseudocode.xml" hover="enumeration BranchType {BranchType_CALL, BranchType_ERET, BranchType_DBGEXIT,&#13; BranchType_RET, BranchType_JMP, BranchType_EXCEPTION,&#13; BranchType_UNKNOWN}">BranchType_CALL</a> then <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[30] = <a link="impl-aarch64.PC.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) PC[]">PC</a>[] + 4;
<a link="impl-shared.BranchTo.2" file="shared_pseudocode.xml" hover="function: BranchTo(bits(N) target, BranchType branch_type)">BranchTo</a>(target, branch_type);</pstext>
    </ps>
  </ps_section>
</instructionsection>
