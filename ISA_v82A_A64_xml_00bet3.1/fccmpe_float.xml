
<instructionsection id="FCCMPE_float" title="FCCMPE -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="float" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="FCCMPE" />
  </docvars>
  <heading>FCCMPE</heading>
  <desc>
    <brief>
      <para>Floating-point Conditional signaling Compare (scalar)</para>
    </brief>
    <authored>
      <para>Floating-point Conditional signaling Compare (scalar). This instruction compares the two SIMD&amp;FP source register values and writes the result to the <xref linkend="BEIDIGBH">PSTATE</xref>.{N, Z, C, V} flags. If the condition does not pass then the <xref linkend="BEIDIGBH">PSTATE</xref>.{N, Z, C, V} flags are set to the flag bit specifier.</para>
      <para>If either operand is any type of NaN, or if either operand is a signaling NaN, the instruction raises an Invalid Operation exception.</para>
      <para>A floating-point exception can be generated by this instruction. Depending on the settings in <xref linkend="AArch64.fpcr">FPCR</xref>, the exception results in either a flag being set in <xref linkend="AArch64.fpsr">FPSR</xref>, or a synchronous exception being generated. For more information, see <xref linkend="BEIJDDAG">Floating-point exception traps</xref>.</para>
      <para>Depending on the settings in the <xref linkend="AArch64.cpacr_el1">CPACR_EL1</xref>, <xref linkend="AArch64.cptr_el2">CPTR_EL2</xref>, and <xref linkend="AArch64.cptr_el3">CPTR_EL3</xref> registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.</para>
    </authored>
    <syntaxnotes>
      <para>NaNs</para>
      <para>The IEEE 754 standard specifies that the result of a comparison is precisely one of &lt;, ==, &gt; or unordered.  If either or both of the operands are NaNs, they are unordered, and all three of (Operand1 &lt; Operand2), (Operand1 == Operand2) and (Operand1 &gt; Operand2) are false. This case results in the <xref linkend="AArch32.fpscr">FPSCR</xref> flags being set to N=0, Z=0, C=1, and V=1.</para>
      <para><instruction>FCCMPE</instruction> raises an Invalid Operation exception if either operand is any type of NaN, and is suitable for testing for &lt;, &lt;=, &gt;, &gt;=, and other predicates that raise an exception when the operands are unordered.</para>
    </syntaxnotes>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Floating-point" oneof="1" id="float" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="instr-class" value="float" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCCMPE" />
      </docvars>
      <iclassintro count="3"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/float/compare/cond" tworows="1">
        <box hibit="31" name="M" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" settings="1">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="type" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="4" name="cond" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="3" width="4" name="nzcv" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="FCCMPE_H_floatccmp" oneofinclass="3" oneof="3" label="Half-precision" bitdiffs="type == 11">
        <docvars>
          <docvar key="datatype" value="half" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCCMPE" />
        </docvars>
        <arch_variants>
          <arch_variant name="ARMv8.2" />
        </arch_variants>
        <box hibit="23" width="2" name="type">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FCCMPE  </text><a link="hn" hover="First 16-bit SIMD&amp;FP source register (field &quot;Rn&quot;)">&lt;Hn&gt;</a><text>, </text><a link="hm" hover="Second 16-bit SIMD&amp;FP source register (field &quot;Rm&quot;)">&lt;Hm&gt;</a><text>, #</text><a link="nzcv" hover="Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)">&lt;nzcv&gt;</a><text>, </text><a link="cond" hover="Standard condition (field &quot;cond&quot;)">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FCCMPE_S_floatccmp" oneofinclass="3" oneof="3" label="Single-precision" bitdiffs="type == 00">
        <docvars>
          <docvar key="datatype" value="single" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCCMPE" />
        </docvars>
        <box hibit="23" width="2" name="type">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>FCCMPE  </text><a link="sn" hover="First 32-bit SIMD&amp;FP source register (field &quot;Rn&quot;)">&lt;Sn&gt;</a><text>, </text><a link="sm" hover="Second 32-bit SIMD&amp;FP source register (field &quot;Rm&quot;)">&lt;Sm&gt;</a><text>, #</text><a link="nzcv" hover="Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)">&lt;nzcv&gt;</a><text>, </text><a link="cond" hover="Standard condition (field &quot;cond&quot;)">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FCCMPE_D_floatccmp" oneofinclass="3" oneof="3" label="Double-precision" bitdiffs="type == 01">
        <docvars>
          <docvar key="datatype" value="double" />
          <docvar key="instr-class" value="float" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCCMPE" />
        </docvars>
        <box hibit="23" width="2" name="type">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FCCMPE  </text><a link="dn" hover="First 64-bit SIMD&amp;FP source register (field &quot;Rn&quot;)">&lt;Dn&gt;</a><text>, </text><a link="dm" hover="Second 64-bit SIMD&amp;FP source register (field &quot;Rm&quot;)">&lt;Dm&gt;</a><text>, #</text><a link="nzcv" hover="Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)">&lt;nzcv&gt;</a><text>, </text><a link="cond" hover="Standard condition (field &quot;cond&quot;)">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/float/compare/cond" mylink="aarch64.instrs.float.compare.cond" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);

integer datasize;
case type of
    when '00' datasize = 32;
    when '01' datasize = 64;
    when '10' <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();
    when '11'
        if HaveFP16Ext() then
            datasize = 16;
        else
            <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();

boolean signal_all_nans = (op == '1');
bits(4) condition = cond;
bits(4) flags = nzcv;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="FCCMPE_D_floatccmp" symboldefcount="1">
      <symbol link="dn">&lt;Dn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_D_floatccmp" symboldefcount="1">
      <symbol link="dm">&lt;Dm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_H_floatccmp" symboldefcount="1">
      <symbol link="hn">&lt;Hn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 16-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_H_floatccmp" symboldefcount="1">
      <symbol link="hm">&lt;Hm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 16-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_S_floatccmp" symboldefcount="1">
      <symbol link="sn">&lt;Sn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_S_floatccmp" symboldefcount="1">
      <symbol link="sm">&lt;Sm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 32-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_D_floatccmp, FCCMPE_H_floatccmp, FCCMPE_S_floatccmp" symboldefcount="1">
      <symbol link="nzcv">&lt;nzcv&gt;</symbol>
      <account encodedin="nzcv">
        <intro>
          <para>Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the "nzcv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMPE_D_floatccmp, FCCMPE_H_floatccmp, FCCMPE_S_floatccmp" symboldefcount="1">
      <symbol link="cond">&lt;cond&gt;</symbol>
      <account encodedin="cond">
        <intro>
          <para>Is one of the standard conditions, encoded in the "cond" field in the standard way.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/float/compare/cond" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPAdvSIMDEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPAdvSIMDEnabled64()">CheckFPAdvSIMDEnabled64</a>();

bits(datasize) operand1 = <a link="impl-aarch64.V.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n]">V</a>[n];
bits(datasize) operand2;

operand2 = <a link="impl-aarch64.V.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n]">V</a>[m];

if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    flags = <a link="impl-shared.FPCompare.4" file="shared_pseudocode.xml" hover="function: bits(4) FPCompare(bits(N) op1, bits(N) op2, boolean signal_nans, FPCRType fpcr)">FPCompare</a>(operand1, operand2, signal_all_nans, FPCR);
PSTATE.&lt;N,Z,C,V&gt; = flags;</pstext>
    </ps>
  </ps_section>
</instructionsection>
ger n]">V</a>[m];

if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    flags = <a link="impl-shared.FPCompare.4" file="shared_pseudocode.xml" hover="function: bits(4) FPCompare(bits(N) op1, bits(N) op2, boolean signal_nans, FPCRType fpcr)">FPCompare</a>(operand1, operand2, signal_all_nans, FPCR);
PSTATE.&lt;N,Z,C,V&gt; = flags;</pstext>
    </ps>
  </ps_section>
</instructionsection>
