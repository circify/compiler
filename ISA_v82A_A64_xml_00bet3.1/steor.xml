
<instructionsection id="STEOR" title="STEOR, STEORL -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
  </docvars>
  <heading>STEOR, STEORL</heading>
  <desc>
    <brief>
      <para>Atomic exclusive OR on word or doubleword in memory, without return</para>
    </brief>
    <authored>
      <para>Atomic exclusive OR on word or doubleword in memory, without return, atomically loads a 32-bit word or 64-bit doubleword from memory, performs an exclusive OR with the value held in a register on it, and stores the result back to memory.</para>
      <list type="unordered">
        <listitem><content><instruction>STEOR</instruction> has no memory ordering semantics.</content></listitem>
        <listitem><content><instruction>STEORL</instruction> stores to memory with release semantics, as described in <xref linkend="BEIHCHEF">Load-Acquire, Store-Release</xref>.</content></listitem>
      </list>
      <para>For information about memory accesses see <xref linkend="CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Integer" oneof="1" id="general" no_encodings="4" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
      </docvars>
      <iclassintro count="4"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.1" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/memory/atomicops/st" tworows="1">
        <box hibit="31" width="2" name="size" usename="1" settings="1" psbits="xx">
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" name="A" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="22" name="R" usename="1">
          <c></c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rs" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" name="o3" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="14" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
      </regdiagram>
      <encoding name="STEOR_32S_memop" oneofinclass="4" oneof="4" label="32-bit, no memory ordering" bitdiffs="size == 10 &amp;&amp; R == 0">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="loadstore-order" value="no-order" />
          <docvar key="loadstore-order-reg-type" value="no-order-32-reg" />
          <docvar key="mnemonic" value="STEOR" />
          <docvar key="reg-type" value="32-reg" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>0</c>
        </box>
        <asmtemplate><text>STEOR  </text><a link="ws" hover="32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)">&lt;Ws&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="STEORL_32S_memop" oneofinclass="4" oneof="4" label="32-bit, release" bitdiffs="size == 10 &amp;&amp; R == 1">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="loadstore-order" value="release" />
          <docvar key="loadstore-order-reg-type" value="release-32-reg" />
          <docvar key="mnemonic" value="STEORL" />
          <docvar key="reg-type" value="32-reg" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>1</c>
        </box>
        <asmtemplate><text>STEORL  </text><a link="ws" hover="32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)">&lt;Ws&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="STEOR_64S_memop" oneofinclass="4" oneof="4" label="64-bit, no memory ordering" bitdiffs="size == 11 &amp;&amp; R == 0">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="loadstore-order" value="no-order" />
          <docvar key="loadstore-order-reg-type" value="no-order-64-reg" />
          <docvar key="mnemonic" value="STEOR" />
          <docvar key="reg-type" value="64-reg" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>0</c>
        </box>
        <asmtemplate><text>STEOR  </text><a link="xs" hover="64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)">&lt;Xs&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="STEORL_64S_memop" oneofinclass="4" oneof="4" label="64-bit, release" bitdiffs="size == 11 &amp;&amp; R == 1">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="loadstore-order" value="release" />
          <docvar key="loadstore-order-reg-type" value="release-64-reg" />
          <docvar key="mnemonic" value="STEORL" />
          <docvar key="reg-type" value="64-reg" />
        </docvars>
        <box hibit="31" width="2" name="size">
          <c></c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>1</c>
        </box>
        <asmtemplate><text>STEORL  </text><a link="xs" hover="64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)">&lt;Xs&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/atomicops/st" mylink="aarch64.instrs.memory.atomicops.st" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-shared.HaveAtomicExt.0" file="shared_pseudocode.xml" hover="function: boolean HaveAtomicExt()">HaveAtomicExt</a>() then <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rs);

integer datasize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
integer regsize = if datasize == 64 then 64 else 32;
<a link="AccType" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType</a> ldacctype = <a link="AccType_ATOMICRW" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_ATOMICRW</a>;
<a link="AccType" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType</a> stacctype = if R == '1' then <a link="AccType_ORDEREDRW" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_ORDEREDRW</a> else <a link="AccType_ATOMICRW" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_ATOMICRW</a>;
<a link="MemAtomicOp" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp</a> op;
case o3:opc of
    when '0000' op = <a link="MemAtomicOp_ADD" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_ADD</a>;
    when '0001' op = <a link="MemAtomicOp_BIC" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_BIC</a>;
    when '0010' op = <a link="MemAtomicOp_EOR" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_EOR</a>;
    when '0011' op = <a link="MemAtomicOp_ORR" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_ORR</a>;
    when '0100' op = <a link="MemAtomicOp_SMAX" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SMAX</a>;
    when '0101' op = <a link="MemAtomicOp_SMIN" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SMIN</a>;
    when '0110' op = <a link="MemAtomicOp_UMAX" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_UMAX</a>;
    when '0111' op = <a link="MemAtomicOp_UMIN" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_UMIN</a>;
    when '1000' op = <a link="MemAtomicOp_SWP" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SWP</a>;
    otherwise <a link="impl-shared.UnallocatedEncoding.0" file="shared_pseudocode.xml" hover="function: UnallocatedEncoding()">UnallocatedEncoding</a>();</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="STEOR_32S_memop, STEORL_32S_memop" symboldefcount="1">
      <symbol link="ws">&lt;Ws&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 32-bit name of the general-purpose register holding the data value to be operated on with the contents of the memory location, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STEOR_64S_memop, STEORL_64S_memop" symboldefcount="1">
      <symbol link="xs">&lt;Xs&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 64-bit name of the general-purpose register holding the data value to be operated on with the contents of the memory location, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STEOR_32S_memop, STEOR_64S_memop, STEORL_32S_memop, STEORL_64S_memop" symboldefcount="1">
      <symbol link="xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/atomicops/st" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) address;
bits(datasize) value;
bits(datasize) data;
bits(datasize) result;

value = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[s];
if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];
data =  <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccType acctype]">Mem</a>[address, datasize DIV 8, ldacctype];

case op of
    when <a link="MemAtomicOp_ADD" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_ADD</a>   result = data + value;
    when <a link="MemAtomicOp_BIC" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_BIC</a>   result = data AND <a link="impl-shared.NOT.1" file="shared_pseudocode.xml" hover="function: bits(N) NOT(bits(N) x)">NOT</a>(value);
    when <a link="MemAtomicOp_EOR" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_EOR</a>   result = data EOR value;
    when <a link="MemAtomicOp_ORR" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_ORR</a>   result = data OR value;
    when <a link="MemAtomicOp_SMAX" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SMAX</a>  result = if <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(data) &gt; <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(value) then data else value;
    when <a link="MemAtomicOp_SMIN" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SMIN</a>  result = if <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(data) &gt; <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(value) then value else data;
    when <a link="MemAtomicOp_UMAX" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_UMAX</a>  result = if <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(data) &gt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(value) then data else value;
    when <a link="MemAtomicOp_UMIN" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_UMIN</a>  result = if <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(data) &gt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(value) then value else data;
    when <a link="MemAtomicOp_SWP" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp {MemAtomicOp_ADD,&#13; MemAtomicOp_BIC,&#13; MemAtomicOp_EOR,&#13; MemAtomicOp_ORR,&#13; MemAtomicOp_SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SWP</a>   result = value;

// All observers in the shareability domain observe the
// following load and store atomically.
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccType acctype] = bits(size*8) value">Mem</a>[address, datasize DIV 8, stacctype] = result;</pstext>
    </ps>
  </ps_section>
</instructionsection>
SMAX,&#13; MemAtomicOp_SMIN,&#13; MemAtomicOp_UMAX,&#13; MemAtomicOp_UMIN,&#13; MemAtomicOp_SWP}">MemAtomicOp_SWP</a>   result = value;

// All observers in the shareability domain observe the
// following load and store atomically.
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccType acctype] = bits(size*8) value">Mem</a>[address, datasize DIV 8, stacctype] = result;</pstext>
    </ps>
  </ps_section>
</instructionsection>
